
SPI_Tutorial_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046c4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000032c  08004780  08004780  00014780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004aac  08004aac  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08004aac  08004aac  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004aac  08004aac  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004aac  08004aac  00014aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ab0  08004ab0  00014ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08004ab4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  20000088  08004b3c  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  08004b3c  000201ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b995  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f66  00000000  00000000  0002ba45  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000960  00000000  00000000  0002d9b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000848  00000000  00000000  0002e310  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019670  00000000  00000000  0002eb58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000962f  00000000  00000000  000481c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008d5dc  00000000  00000000  000517f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dedd3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026a8  00000000  00000000  000dee50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000088 	.word	0x20000088
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004768 	.word	0x08004768

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000008c 	.word	0x2000008c
 8000100:	08004768 	.word	0x08004768

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 800021c:	b590      	push	{r4, r7, lr}
 800021e:	b08b      	sub	sp, #44	; 0x2c
 8000220:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000222:	2414      	movs	r4, #20
 8000224:	193b      	adds	r3, r7, r4
 8000226:	0018      	movs	r0, r3
 8000228:	2314      	movs	r3, #20
 800022a:	001a      	movs	r2, r3
 800022c:	2100      	movs	r1, #0
 800022e:	f003 fb10 	bl	8003852 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000232:	4b54      	ldr	r3, [pc, #336]	; (8000384 <MX_GPIO_Init+0x168>)
 8000234:	695a      	ldr	r2, [r3, #20]
 8000236:	4b53      	ldr	r3, [pc, #332]	; (8000384 <MX_GPIO_Init+0x168>)
 8000238:	2180      	movs	r1, #128	; 0x80
 800023a:	0309      	lsls	r1, r1, #12
 800023c:	430a      	orrs	r2, r1
 800023e:	615a      	str	r2, [r3, #20]
 8000240:	4b50      	ldr	r3, [pc, #320]	; (8000384 <MX_GPIO_Init+0x168>)
 8000242:	695a      	ldr	r2, [r3, #20]
 8000244:	2380      	movs	r3, #128	; 0x80
 8000246:	031b      	lsls	r3, r3, #12
 8000248:	4013      	ands	r3, r2
 800024a:	613b      	str	r3, [r7, #16]
 800024c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800024e:	4b4d      	ldr	r3, [pc, #308]	; (8000384 <MX_GPIO_Init+0x168>)
 8000250:	695a      	ldr	r2, [r3, #20]
 8000252:	4b4c      	ldr	r3, [pc, #304]	; (8000384 <MX_GPIO_Init+0x168>)
 8000254:	2180      	movs	r1, #128	; 0x80
 8000256:	03c9      	lsls	r1, r1, #15
 8000258:	430a      	orrs	r2, r1
 800025a:	615a      	str	r2, [r3, #20]
 800025c:	4b49      	ldr	r3, [pc, #292]	; (8000384 <MX_GPIO_Init+0x168>)
 800025e:	695a      	ldr	r2, [r3, #20]
 8000260:	2380      	movs	r3, #128	; 0x80
 8000262:	03db      	lsls	r3, r3, #15
 8000264:	4013      	ands	r3, r2
 8000266:	60fb      	str	r3, [r7, #12]
 8000268:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800026a:	4b46      	ldr	r3, [pc, #280]	; (8000384 <MX_GPIO_Init+0x168>)
 800026c:	695a      	ldr	r2, [r3, #20]
 800026e:	4b45      	ldr	r3, [pc, #276]	; (8000384 <MX_GPIO_Init+0x168>)
 8000270:	2180      	movs	r1, #128	; 0x80
 8000272:	0289      	lsls	r1, r1, #10
 8000274:	430a      	orrs	r2, r1
 8000276:	615a      	str	r2, [r3, #20]
 8000278:	4b42      	ldr	r3, [pc, #264]	; (8000384 <MX_GPIO_Init+0x168>)
 800027a:	695a      	ldr	r2, [r3, #20]
 800027c:	2380      	movs	r3, #128	; 0x80
 800027e:	029b      	lsls	r3, r3, #10
 8000280:	4013      	ands	r3, r2
 8000282:	60bb      	str	r3, [r7, #8]
 8000284:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000286:	4b3f      	ldr	r3, [pc, #252]	; (8000384 <MX_GPIO_Init+0x168>)
 8000288:	695a      	ldr	r2, [r3, #20]
 800028a:	4b3e      	ldr	r3, [pc, #248]	; (8000384 <MX_GPIO_Init+0x168>)
 800028c:	2180      	movs	r1, #128	; 0x80
 800028e:	02c9      	lsls	r1, r1, #11
 8000290:	430a      	orrs	r2, r1
 8000292:	615a      	str	r2, [r3, #20]
 8000294:	4b3b      	ldr	r3, [pc, #236]	; (8000384 <MX_GPIO_Init+0x168>)
 8000296:	695a      	ldr	r2, [r3, #20]
 8000298:	2380      	movs	r3, #128	; 0x80
 800029a:	02db      	lsls	r3, r3, #11
 800029c:	4013      	ands	r3, r2
 800029e:	607b      	str	r3, [r7, #4]
 80002a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|LD2_Pin, GPIO_PIN_RESET);
 80002a2:	2390      	movs	r3, #144	; 0x90
 80002a4:	05db      	lsls	r3, r3, #23
 80002a6:	2200      	movs	r2, #0
 80002a8:	2130      	movs	r1, #48	; 0x30
 80002aa:	0018      	movs	r0, r3
 80002ac:	f001 fa45 	bl	800173a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ETH_NRST_GPIO_Port, ETH_NRST_Pin, GPIO_PIN_RESET);
 80002b0:	4b35      	ldr	r3, [pc, #212]	; (8000388 <MX_GPIO_Init+0x16c>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	2180      	movs	r1, #128	; 0x80
 80002b6:	0018      	movs	r0, r3
 80002b8:	f001 fa3f 	bl	800173a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80002bc:	193b      	adds	r3, r7, r4
 80002be:	2280      	movs	r2, #128	; 0x80
 80002c0:	0192      	lsls	r2, r2, #6
 80002c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80002c4:	193b      	adds	r3, r7, r4
 80002c6:	4a31      	ldr	r2, [pc, #196]	; (800038c <MX_GPIO_Init+0x170>)
 80002c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ca:	193b      	adds	r3, r7, r4
 80002cc:	2200      	movs	r2, #0
 80002ce:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80002d0:	193b      	adds	r3, r7, r4
 80002d2:	4a2d      	ldr	r2, [pc, #180]	; (8000388 <MX_GPIO_Init+0x16c>)
 80002d4:	0019      	movs	r1, r3
 80002d6:	0010      	movs	r0, r2
 80002d8:	f001 f89a 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80002dc:	193b      	adds	r3, r7, r4
 80002de:	220c      	movs	r2, #12
 80002e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80002e2:	193b      	adds	r3, r7, r4
 80002e4:	2202      	movs	r2, #2
 80002e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002e8:	193b      	adds	r3, r7, r4
 80002ea:	2200      	movs	r2, #0
 80002ec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002ee:	193b      	adds	r3, r7, r4
 80002f0:	2200      	movs	r2, #0
 80002f2:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80002f4:	193b      	adds	r3, r7, r4
 80002f6:	2201      	movs	r2, #1
 80002f8:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002fa:	193a      	adds	r2, r7, r4
 80002fc:	2390      	movs	r3, #144	; 0x90
 80002fe:	05db      	lsls	r3, r3, #23
 8000300:	0011      	movs	r1, r2
 8000302:	0018      	movs	r0, r3
 8000304:	f001 f884 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000308:	193b      	adds	r3, r7, r4
 800030a:	2210      	movs	r2, #16
 800030c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800030e:	193b      	adds	r3, r7, r4
 8000310:	2201      	movs	r2, #1
 8000312:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000314:	193b      	adds	r3, r7, r4
 8000316:	2200      	movs	r2, #0
 8000318:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800031a:	193b      	adds	r3, r7, r4
 800031c:	2203      	movs	r2, #3
 800031e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000320:	193a      	adds	r2, r7, r4
 8000322:	2390      	movs	r3, #144	; 0x90
 8000324:	05db      	lsls	r3, r3, #23
 8000326:	0011      	movs	r1, r2
 8000328:	0018      	movs	r0, r3
 800032a:	f001 f871 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800032e:	193b      	adds	r3, r7, r4
 8000330:	2220      	movs	r2, #32
 8000332:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000334:	193b      	adds	r3, r7, r4
 8000336:	2201      	movs	r2, #1
 8000338:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800033a:	193b      	adds	r3, r7, r4
 800033c:	2200      	movs	r2, #0
 800033e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000340:	193b      	adds	r3, r7, r4
 8000342:	2200      	movs	r2, #0
 8000344:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000346:	193a      	adds	r2, r7, r4
 8000348:	2390      	movs	r3, #144	; 0x90
 800034a:	05db      	lsls	r3, r3, #23
 800034c:	0011      	movs	r1, r2
 800034e:	0018      	movs	r0, r3
 8000350:	f001 f85e 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ETH_NRST_Pin;
 8000354:	0021      	movs	r1, r4
 8000356:	187b      	adds	r3, r7, r1
 8000358:	2280      	movs	r2, #128	; 0x80
 800035a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800035c:	187b      	adds	r3, r7, r1
 800035e:	2201      	movs	r2, #1
 8000360:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000362:	187b      	adds	r3, r7, r1
 8000364:	2200      	movs	r2, #0
 8000366:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000368:	187b      	adds	r3, r7, r1
 800036a:	2200      	movs	r2, #0
 800036c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ETH_NRST_GPIO_Port, &GPIO_InitStruct);
 800036e:	187b      	adds	r3, r7, r1
 8000370:	4a05      	ldr	r2, [pc, #20]	; (8000388 <MX_GPIO_Init+0x16c>)
 8000372:	0019      	movs	r1, r3
 8000374:	0010      	movs	r0, r2
 8000376:	f001 f84b 	bl	8001410 <HAL_GPIO_Init>

}
 800037a:	46c0      	nop			; (mov r8, r8)
 800037c:	46bd      	mov	sp, r7
 800037e:	b00b      	add	sp, #44	; 0x2c
 8000380:	bd90      	pop	{r4, r7, pc}
 8000382:	46c0      	nop			; (mov r8, r8)
 8000384:	40021000 	.word	0x40021000
 8000388:	48000800 	.word	0x48000800
 800038c:	10210000 	.word	0x10210000

08000390 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000392:	b087      	sub	sp, #28
 8000394:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000396:	f000 ff01 	bl	800119c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800039a:	f000 f94f 	bl	800063c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800039e:	f7ff ff3d 	bl	800021c <MX_GPIO_Init>
  MX_SPI1_Init();
 80003a2:	f000 fa95 	bl	80008d0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80003a6:	f000 fbfb 	bl	8000ba0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
//  printf("\e[94m\r\n");

  HAL_GPIO_WritePin(ETH_NRST_GPIO_Port, ETH_NRST_Pin, GPIO_PIN_RESET);
 80003aa:	4b8f      	ldr	r3, [pc, #572]	; (80005e8 <main+0x258>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	2180      	movs	r1, #128	; 0x80
 80003b0:	0018      	movs	r0, r3
 80003b2:	f001 f9c2 	bl	800173a <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80003b6:	23fa      	movs	r3, #250	; 0xfa
 80003b8:	005b      	lsls	r3, r3, #1
 80003ba:	0018      	movs	r0, r3
 80003bc:	f000 ff52 	bl	8001264 <HAL_Delay>
  HAL_GPIO_WritePin(ETH_NRST_GPIO_Port, ETH_NRST_Pin, GPIO_PIN_SET);
 80003c0:	4b89      	ldr	r3, [pc, #548]	; (80005e8 <main+0x258>)
 80003c2:	2201      	movs	r2, #1
 80003c4:	2180      	movs	r1, #128	; 0x80
 80003c6:	0018      	movs	r0, r3
 80003c8:	f001 f9b7 	bl	800173a <HAL_GPIO_WritePin>

//  HAL_SetTickFreq(HAL_TICK_FREQ_10HZ);

  ksz8851_init(&ksz8851, (uint32_t)SPI1_CS_GPIO_Port, SPI1_CS_Pin, (uint32_t)ETH_NRST_GPIO_Port, ETH_NRST_Pin, mac, callbacks);
 80003cc:	4c86      	ldr	r4, [pc, #536]	; (80005e8 <main+0x258>)
 80003ce:	2390      	movs	r3, #144	; 0x90
 80003d0:	05db      	lsls	r3, r3, #23
 80003d2:	469c      	mov	ip, r3
 80003d4:	4885      	ldr	r0, [pc, #532]	; (80005ec <main+0x25c>)
 80003d6:	4a86      	ldr	r2, [pc, #536]	; (80005f0 <main+0x260>)
 80003d8:	2308      	movs	r3, #8
 80003da:	446b      	add	r3, sp
 80003dc:	ca62      	ldmia	r2!, {r1, r5, r6}
 80003de:	c362      	stmia	r3!, {r1, r5, r6}
 80003e0:	6812      	ldr	r2, [r2, #0]
 80003e2:	601a      	str	r2, [r3, #0]
 80003e4:	4b83      	ldr	r3, [pc, #524]	; (80005f4 <main+0x264>)
 80003e6:	9301      	str	r3, [sp, #4]
 80003e8:	2380      	movs	r3, #128	; 0x80
 80003ea:	9300      	str	r3, [sp, #0]
 80003ec:	0023      	movs	r3, r4
 80003ee:	2210      	movs	r2, #16
 80003f0:	4661      	mov	r1, ip
 80003f2:	f000 fdc9 	bl	8000f88 <ksz8851_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == false)
 80003f6:	2380      	movs	r3, #128	; 0x80
 80003f8:	019b      	lsls	r3, r3, #6
 80003fa:	4a7b      	ldr	r2, [pc, #492]	; (80005e8 <main+0x258>)
 80003fc:	0019      	movs	r1, r3
 80003fe:	0010      	movs	r0, r2
 8000400:	f001 f97e 	bl	8001700 <HAL_GPIO_ReadPin>
 8000404:	1e03      	subs	r3, r0, #0
 8000406:	d000      	beq.n	800040a <main+0x7a>
 8000408:	e0e9      	b.n	80005de <main+0x24e>
	  {
		  if(ksz8851_read_register(&ksz8851, KSZ_REG_ADDR_CIDER0, &kszRegVal) == 0)
 800040a:	4a7b      	ldr	r2, [pc, #492]	; (80005f8 <main+0x268>)
 800040c:	4b77      	ldr	r3, [pc, #476]	; (80005ec <main+0x25c>)
 800040e:	21c0      	movs	r1, #192	; 0xc0
 8000410:	0018      	movs	r0, r3
 8000412:	f000 fc6c 	bl	8000cee <ksz8851_read_register>
 8000416:	1e03      	subs	r3, r0, #0
 8000418:	d000      	beq.n	800041c <main+0x8c>
 800041a:	e0c5      	b.n	80005a8 <main+0x218>
		  {

				  ksz8851_read_register(&ksz8851, KSZ_REG_ADDR_CIDER0, &kszRegVal);
 800041c:	4a76      	ldr	r2, [pc, #472]	; (80005f8 <main+0x268>)
 800041e:	4b73      	ldr	r3, [pc, #460]	; (80005ec <main+0x25c>)
 8000420:	21c0      	movs	r1, #192	; 0xc0
 8000422:	0018      	movs	r0, r3
 8000424:	f000 fc63 	bl	8000cee <ksz8851_read_register>
				  printf("\r\nKSZ8851 CHIP ID: %x\r\n", kszRegVal);
 8000428:	4b73      	ldr	r3, [pc, #460]	; (80005f8 <main+0x268>)
 800042a:	881b      	ldrh	r3, [r3, #0]
 800042c:	001a      	movs	r2, r3
 800042e:	4b73      	ldr	r3, [pc, #460]	; (80005fc <main+0x26c>)
 8000430:	0011      	movs	r1, r2
 8000432:	0018      	movs	r0, r3
 8000434:	f003 fa16 	bl	8003864 <iprintf>

				  printf("WRITE NEW MAC ADDRESSES: LOW: %x MIDDLE: %x HIGH: %x\r\n", ksz8851.MAC_Address.Group.low, ksz8851.MAC_Address.Group.middle, ksz8851.MAC_Address.Group.high);
 8000438:	4b6c      	ldr	r3, [pc, #432]	; (80005ec <main+0x25c>)
 800043a:	8c1b      	ldrh	r3, [r3, #32]
 800043c:	0019      	movs	r1, r3
 800043e:	4b6b      	ldr	r3, [pc, #428]	; (80005ec <main+0x25c>)
 8000440:	8bdb      	ldrh	r3, [r3, #30]
 8000442:	001a      	movs	r2, r3
 8000444:	4b69      	ldr	r3, [pc, #420]	; (80005ec <main+0x25c>)
 8000446:	8b9b      	ldrh	r3, [r3, #28]
 8000448:	486d      	ldr	r0, [pc, #436]	; (8000600 <main+0x270>)
 800044a:	f003 fa0b 	bl	8003864 <iprintf>
				  spi_status1 = ksz8851_write_register(&ksz8851, KSZ_REG_ADDR_MARL0, ksz8851.MAC_Address.Group.low);
 800044e:	4b67      	ldr	r3, [pc, #412]	; (80005ec <main+0x25c>)
 8000450:	8c1a      	ldrh	r2, [r3, #32]
 8000452:	4b66      	ldr	r3, [pc, #408]	; (80005ec <main+0x25c>)
 8000454:	2110      	movs	r1, #16
 8000456:	0018      	movs	r0, r3
 8000458:	f000 fcd6 	bl	8000e08 <ksz8851_write_register>
 800045c:	0003      	movs	r3, r0
 800045e:	001a      	movs	r2, r3
 8000460:	4b68      	ldr	r3, [pc, #416]	; (8000604 <main+0x274>)
 8000462:	701a      	strb	r2, [r3, #0]
				  spi_status1 = ksz8851_write_register(&ksz8851, KSZ_REG_ADDR_MARL0, ksz8851.MAC_Address.Group.low);
 8000464:	4b61      	ldr	r3, [pc, #388]	; (80005ec <main+0x25c>)
 8000466:	8c1a      	ldrh	r2, [r3, #32]
 8000468:	4b60      	ldr	r3, [pc, #384]	; (80005ec <main+0x25c>)
 800046a:	2110      	movs	r1, #16
 800046c:	0018      	movs	r0, r3
 800046e:	f000 fccb 	bl	8000e08 <ksz8851_write_register>
 8000472:	0003      	movs	r3, r0
 8000474:	001a      	movs	r2, r3
 8000476:	4b63      	ldr	r3, [pc, #396]	; (8000604 <main+0x274>)
 8000478:	701a      	strb	r2, [r3, #0]
				  spi_status2 = ksz8851_write_register(&ksz8851, KSZ_REG_ADDR_MARM0, ksz8851.MAC_Address.Group.middle);
 800047a:	4b5c      	ldr	r3, [pc, #368]	; (80005ec <main+0x25c>)
 800047c:	8bda      	ldrh	r2, [r3, #30]
 800047e:	4b5b      	ldr	r3, [pc, #364]	; (80005ec <main+0x25c>)
 8000480:	2112      	movs	r1, #18
 8000482:	0018      	movs	r0, r3
 8000484:	f000 fcc0 	bl	8000e08 <ksz8851_write_register>
 8000488:	0003      	movs	r3, r0
 800048a:	001a      	movs	r2, r3
 800048c:	4b5e      	ldr	r3, [pc, #376]	; (8000608 <main+0x278>)
 800048e:	701a      	strb	r2, [r3, #0]
				  spi_status3 = ksz8851_write_register(&ksz8851, KSZ_REG_ADDR_MARH0, ksz8851.MAC_Address.Group.high);
 8000490:	4b56      	ldr	r3, [pc, #344]	; (80005ec <main+0x25c>)
 8000492:	8b9a      	ldrh	r2, [r3, #28]
 8000494:	4b55      	ldr	r3, [pc, #340]	; (80005ec <main+0x25c>)
 8000496:	2114      	movs	r1, #20
 8000498:	0018      	movs	r0, r3
 800049a:	f000 fcb5 	bl	8000e08 <ksz8851_write_register>
 800049e:	0003      	movs	r3, r0
 80004a0:	001a      	movs	r2, r3
 80004a2:	4b5a      	ldr	r3, [pc, #360]	; (800060c <main+0x27c>)
 80004a4:	701a      	strb	r2, [r3, #0]

				  ksz8851_read_register(&ksz8851, KSZ_REG_ADDR_MARL0, &MAC_low);
 80004a6:	4a5a      	ldr	r2, [pc, #360]	; (8000610 <main+0x280>)
 80004a8:	4b50      	ldr	r3, [pc, #320]	; (80005ec <main+0x25c>)
 80004aa:	2110      	movs	r1, #16
 80004ac:	0018      	movs	r0, r3
 80004ae:	f000 fc1e 	bl	8000cee <ksz8851_read_register>
				  printf("NEW MAC ADDR LOW: %x, SPI STATUS: %d\r\n", MAC_low, spi_status1);
 80004b2:	4b57      	ldr	r3, [pc, #348]	; (8000610 <main+0x280>)
 80004b4:	881b      	ldrh	r3, [r3, #0]
 80004b6:	0019      	movs	r1, r3
 80004b8:	4b52      	ldr	r3, [pc, #328]	; (8000604 <main+0x274>)
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	001a      	movs	r2, r3
 80004be:	4b55      	ldr	r3, [pc, #340]	; (8000614 <main+0x284>)
 80004c0:	0018      	movs	r0, r3
 80004c2:	f003 f9cf 	bl	8003864 <iprintf>
				  ksz8851_read_register(&ksz8851, KSZ_REG_ADDR_MARM0, &MAC_mid);
 80004c6:	4a54      	ldr	r2, [pc, #336]	; (8000618 <main+0x288>)
 80004c8:	4b48      	ldr	r3, [pc, #288]	; (80005ec <main+0x25c>)
 80004ca:	2112      	movs	r1, #18
 80004cc:	0018      	movs	r0, r3
 80004ce:	f000 fc0e 	bl	8000cee <ksz8851_read_register>
				  printf("NEW MAC ADDR MIDDLE: %x, SPI STATUS: %d\r\n", MAC_mid, spi_status2);
 80004d2:	4b51      	ldr	r3, [pc, #324]	; (8000618 <main+0x288>)
 80004d4:	881b      	ldrh	r3, [r3, #0]
 80004d6:	0019      	movs	r1, r3
 80004d8:	4b4b      	ldr	r3, [pc, #300]	; (8000608 <main+0x278>)
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	001a      	movs	r2, r3
 80004de:	4b4f      	ldr	r3, [pc, #316]	; (800061c <main+0x28c>)
 80004e0:	0018      	movs	r0, r3
 80004e2:	f003 f9bf 	bl	8003864 <iprintf>
				  ksz8851_read_register(&ksz8851, KSZ_REG_ADDR_MARH0, &MAC_high);
 80004e6:	4a4e      	ldr	r2, [pc, #312]	; (8000620 <main+0x290>)
 80004e8:	4b40      	ldr	r3, [pc, #256]	; (80005ec <main+0x25c>)
 80004ea:	2114      	movs	r1, #20
 80004ec:	0018      	movs	r0, r3
 80004ee:	f000 fbfe 	bl	8000cee <ksz8851_read_register>
				  printf("NEW MAC ADDR HIGH: %x, SPI STATUS: %d\r\n", MAC_high, spi_status3);
 80004f2:	4b4b      	ldr	r3, [pc, #300]	; (8000620 <main+0x290>)
 80004f4:	881b      	ldrh	r3, [r3, #0]
 80004f6:	0019      	movs	r1, r3
 80004f8:	4b44      	ldr	r3, [pc, #272]	; (800060c <main+0x27c>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	001a      	movs	r2, r3
 80004fe:	4b49      	ldr	r3, [pc, #292]	; (8000624 <main+0x294>)
 8000500:	0018      	movs	r0, r3
 8000502:	f003 f9af 	bl	8003864 <iprintf>

				  if(ksz8851.MAC_Address.Group.low != MAC_low)
 8000506:	4b39      	ldr	r3, [pc, #228]	; (80005ec <main+0x25c>)
 8000508:	8c1a      	ldrh	r2, [r3, #32]
 800050a:	4b41      	ldr	r3, [pc, #260]	; (8000610 <main+0x280>)
 800050c:	881b      	ldrh	r3, [r3, #0]
 800050e:	429a      	cmp	r2, r3
 8000510:	d00a      	beq.n	8000528 <main+0x198>
				  {
					  printf("WRITING ERROR MAC ADDR LOW! Current: %x, Desired: %x , SPI Comm Status: %d\r\n", MAC_low, ksz8851.MAC_Address.Group.low, spi_status1);
 8000512:	4b3f      	ldr	r3, [pc, #252]	; (8000610 <main+0x280>)
 8000514:	881b      	ldrh	r3, [r3, #0]
 8000516:	0019      	movs	r1, r3
 8000518:	4b34      	ldr	r3, [pc, #208]	; (80005ec <main+0x25c>)
 800051a:	8c1b      	ldrh	r3, [r3, #32]
 800051c:	001a      	movs	r2, r3
 800051e:	4b39      	ldr	r3, [pc, #228]	; (8000604 <main+0x274>)
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	4841      	ldr	r0, [pc, #260]	; (8000628 <main+0x298>)
 8000524:	f003 f99e 	bl	8003864 <iprintf>
				  }

				  if(ksz8851.MAC_Address.Group.middle != MAC_mid)
 8000528:	4b30      	ldr	r3, [pc, #192]	; (80005ec <main+0x25c>)
 800052a:	8bda      	ldrh	r2, [r3, #30]
 800052c:	4b3a      	ldr	r3, [pc, #232]	; (8000618 <main+0x288>)
 800052e:	881b      	ldrh	r3, [r3, #0]
 8000530:	429a      	cmp	r2, r3
 8000532:	d00a      	beq.n	800054a <main+0x1ba>
				  {
					  printf("WRITING ERROR MAC ADDR MIDDLE! Current: %x, Desired: %x , SPI Comm Status: %d\r\n", MAC_mid, ksz8851.MAC_Address.Group.middle, spi_status2);
 8000534:	4b38      	ldr	r3, [pc, #224]	; (8000618 <main+0x288>)
 8000536:	881b      	ldrh	r3, [r3, #0]
 8000538:	0019      	movs	r1, r3
 800053a:	4b2c      	ldr	r3, [pc, #176]	; (80005ec <main+0x25c>)
 800053c:	8bdb      	ldrh	r3, [r3, #30]
 800053e:	001a      	movs	r2, r3
 8000540:	4b31      	ldr	r3, [pc, #196]	; (8000608 <main+0x278>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	4839      	ldr	r0, [pc, #228]	; (800062c <main+0x29c>)
 8000546:	f003 f98d 	bl	8003864 <iprintf>
				  }

				  if(ksz8851.MAC_Address.Group.high != MAC_high)
 800054a:	4b28      	ldr	r3, [pc, #160]	; (80005ec <main+0x25c>)
 800054c:	8b9a      	ldrh	r2, [r3, #28]
 800054e:	4b34      	ldr	r3, [pc, #208]	; (8000620 <main+0x290>)
 8000550:	881b      	ldrh	r3, [r3, #0]
 8000552:	429a      	cmp	r2, r3
 8000554:	d00a      	beq.n	800056c <main+0x1dc>
				  {
					  printf("WRITING ERROR MAC ADDR HIGH! Current: %x, Desired: %x , SPI Comm Status: %d\r\n", MAC_high, ksz8851.MAC_Address.Group.high, spi_status3);
 8000556:	4b32      	ldr	r3, [pc, #200]	; (8000620 <main+0x290>)
 8000558:	881b      	ldrh	r3, [r3, #0]
 800055a:	0019      	movs	r1, r3
 800055c:	4b23      	ldr	r3, [pc, #140]	; (80005ec <main+0x25c>)
 800055e:	8b9b      	ldrh	r3, [r3, #28]
 8000560:	001a      	movs	r2, r3
 8000562:	4b2a      	ldr	r3, [pc, #168]	; (800060c <main+0x27c>)
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	4832      	ldr	r0, [pc, #200]	; (8000630 <main+0x2a0>)
 8000568:	f003 f97c 	bl	8003864 <iprintf>
				  }

				  ksz8851.MAC_Address.Group.low += 1;
 800056c:	4b1f      	ldr	r3, [pc, #124]	; (80005ec <main+0x25c>)
 800056e:	8c1b      	ldrh	r3, [r3, #32]
 8000570:	3301      	adds	r3, #1
 8000572:	b29a      	uxth	r2, r3
 8000574:	4b1d      	ldr	r3, [pc, #116]	; (80005ec <main+0x25c>)
 8000576:	841a      	strh	r2, [r3, #32]
				  ksz8851.MAC_Address.Group.middle += 1;
 8000578:	4b1c      	ldr	r3, [pc, #112]	; (80005ec <main+0x25c>)
 800057a:	8bdb      	ldrh	r3, [r3, #30]
 800057c:	3301      	adds	r3, #1
 800057e:	b29a      	uxth	r2, r3
 8000580:	4b1a      	ldr	r3, [pc, #104]	; (80005ec <main+0x25c>)
 8000582:	83da      	strh	r2, [r3, #30]
				  ksz8851.MAC_Address.Group.high += 1;
 8000584:	4b19      	ldr	r3, [pc, #100]	; (80005ec <main+0x25c>)
 8000586:	8b9b      	ldrh	r3, [r3, #28]
 8000588:	3301      	adds	r3, #1
 800058a:	b29a      	uxth	r2, r3
 800058c:	4b17      	ldr	r3, [pc, #92]	; (80005ec <main+0x25c>)
 800058e:	839a      	strh	r2, [r3, #28]

				  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000590:	2390      	movs	r3, #144	; 0x90
 8000592:	05db      	lsls	r3, r3, #23
 8000594:	2120      	movs	r1, #32
 8000596:	0018      	movs	r0, r3
 8000598:	f001 f8ec 	bl	8001774 <HAL_GPIO_TogglePin>

				  HAL_Delay(500);
 800059c:	23fa      	movs	r3, #250	; 0xfa
 800059e:	005b      	lsls	r3, r3, #1
 80005a0:	0018      	movs	r0, r3
 80005a2:	f000 fe5f 	bl	8001264 <HAL_Delay>
 80005a6:	e003      	b.n	80005b0 <main+0x220>
		  }
		  else
		  {
			  printf("SPI MASTER TX COMM ERROR\r\n");
 80005a8:	4b22      	ldr	r3, [pc, #136]	; (8000634 <main+0x2a4>)
 80005aa:	0018      	movs	r0, r3
 80005ac:	f003 f9d4 	bl	8003958 <puts>
		  }

		  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80005b0:	2390      	movs	r3, #144	; 0x90
 80005b2:	05db      	lsls	r3, r3, #23
 80005b4:	2201      	movs	r2, #1
 80005b6:	2110      	movs	r1, #16
 80005b8:	0018      	movs	r0, r3
 80005ba:	f001 f8be 	bl	800173a <HAL_GPIO_WritePin>

		  while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == false);
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	2380      	movs	r3, #128	; 0x80
 80005c2:	019b      	lsls	r3, r3, #6
 80005c4:	4a08      	ldr	r2, [pc, #32]	; (80005e8 <main+0x258>)
 80005c6:	0019      	movs	r1, r3
 80005c8:	0010      	movs	r0, r2
 80005ca:	f001 f899 	bl	8001700 <HAL_GPIO_ReadPin>
 80005ce:	1e03      	subs	r3, r0, #0
 80005d0:	d0f6      	beq.n	80005c0 <main+0x230>
		  memset(spi_buffer_rx, 0, sizeof(spi_buffer_rx));
 80005d2:	4b19      	ldr	r3, [pc, #100]	; (8000638 <main+0x2a8>)
 80005d4:	2220      	movs	r2, #32
 80005d6:	2100      	movs	r1, #0
 80005d8:	0018      	movs	r0, r3
 80005da:	f003 f93a 	bl	8003852 <memset>
	  }

	  HAL_Delay(200);
 80005de:	20c8      	movs	r0, #200	; 0xc8
 80005e0:	f000 fe40 	bl	8001264 <HAL_Delay>
	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == false)
 80005e4:	e707      	b.n	80003f6 <main+0x66>
 80005e6:	46c0      	nop			; (mov r8, r8)
 80005e8:	48000800 	.word	0x48000800
 80005ec:	200000d8 	.word	0x200000d8
 80005f0:	20000008 	.word	0x20000008
 80005f4:	20000000 	.word	0x20000000
 80005f8:	200000a4 	.word	0x200000a4
 80005fc:	08004780 	.word	0x08004780
 8000600:	08004798 	.word	0x08004798
 8000604:	200000fd 	.word	0x200000fd
 8000608:	200000fe 	.word	0x200000fe
 800060c:	200000fc 	.word	0x200000fc
 8000610:	200000a6 	.word	0x200000a6
 8000614:	080047d0 	.word	0x080047d0
 8000618:	200000a8 	.word	0x200000a8
 800061c:	080047f8 	.word	0x080047f8
 8000620:	200000aa 	.word	0x200000aa
 8000624:	08004824 	.word	0x08004824
 8000628:	0800484c 	.word	0x0800484c
 800062c:	0800489c 	.word	0x0800489c
 8000630:	080048ec 	.word	0x080048ec
 8000634:	0800493c 	.word	0x0800493c
 8000638:	200000ac 	.word	0x200000ac

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b590      	push	{r4, r7, lr}
 800063e:	b099      	sub	sp, #100	; 0x64
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	242c      	movs	r4, #44	; 0x2c
 8000644:	193b      	adds	r3, r7, r4
 8000646:	0018      	movs	r0, r3
 8000648:	2334      	movs	r3, #52	; 0x34
 800064a:	001a      	movs	r2, r3
 800064c:	2100      	movs	r1, #0
 800064e:	f003 f900 	bl	8003852 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000652:	231c      	movs	r3, #28
 8000654:	18fb      	adds	r3, r7, r3
 8000656:	0018      	movs	r0, r3
 8000658:	2310      	movs	r3, #16
 800065a:	001a      	movs	r2, r3
 800065c:	2100      	movs	r1, #0
 800065e:	f003 f8f8 	bl	8003852 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000662:	003b      	movs	r3, r7
 8000664:	0018      	movs	r0, r3
 8000666:	231c      	movs	r3, #28
 8000668:	001a      	movs	r2, r3
 800066a:	2100      	movs	r1, #0
 800066c:	f003 f8f1 	bl	8003852 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000670:	0021      	movs	r1, r4
 8000672:	187b      	adds	r3, r7, r1
 8000674:	2202      	movs	r2, #2
 8000676:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000678:	187b      	adds	r3, r7, r1
 800067a:	2201      	movs	r2, #1
 800067c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800067e:	187b      	adds	r3, r7, r1
 8000680:	2210      	movs	r2, #16
 8000682:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000684:	187b      	adds	r3, r7, r1
 8000686:	2202      	movs	r2, #2
 8000688:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800068a:	187b      	adds	r3, r7, r1
 800068c:	2280      	movs	r2, #128	; 0x80
 800068e:	0212      	lsls	r2, r2, #8
 8000690:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000692:	187b      	adds	r3, r7, r1
 8000694:	22a0      	movs	r2, #160	; 0xa0
 8000696:	0392      	lsls	r2, r2, #14
 8000698:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 800069a:	187b      	adds	r3, r7, r1
 800069c:	2201      	movs	r2, #1
 800069e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a0:	187b      	adds	r3, r7, r1
 80006a2:	0018      	movs	r0, r3
 80006a4:	f001 f882 	bl	80017ac <HAL_RCC_OscConfig>
 80006a8:	1e03      	subs	r3, r0, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80006ac:	f000 f90a 	bl	80008c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b0:	211c      	movs	r1, #28
 80006b2:	187b      	adds	r3, r7, r1
 80006b4:	2207      	movs	r2, #7
 80006b6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b8:	187b      	adds	r3, r7, r1
 80006ba:	2202      	movs	r2, #2
 80006bc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006be:	187b      	adds	r3, r7, r1
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c4:	187b      	adds	r3, r7, r1
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006ca:	187b      	adds	r3, r7, r1
 80006cc:	2101      	movs	r1, #1
 80006ce:	0018      	movs	r0, r3
 80006d0:	f001 fbf2 	bl	8001eb8 <HAL_RCC_ClockConfig>
 80006d4:	1e03      	subs	r3, r0, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80006d8:	f000 f8f4 	bl	80008c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80006dc:	003b      	movs	r3, r7
 80006de:	2201      	movs	r2, #1
 80006e0:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80006e2:	003b      	movs	r3, r7
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006e8:	003b      	movs	r3, r7
 80006ea:	0018      	movs	r0, r3
 80006ec:	f001 fd5c 	bl	80021a8 <HAL_RCCEx_PeriphCLKConfig>
 80006f0:	1e03      	subs	r3, r0, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80006f4:	f000 f8e6 	bl	80008c4 <Error_Handler>
  }
}
 80006f8:	46c0      	nop			; (mov r8, r8)
 80006fa:	46bd      	mov	sp, r7
 80006fc:	b019      	add	sp, #100	; 0x64
 80006fe:	bd90      	pop	{r4, r7, pc}

08000700 <mcu_UartExt_Write>:

/* USER CODE BEGIN 4 */
uint8_t mcu_UartExt_Write(uint8_t* pData, uint16_t Size, uint32_t Timeout)
{
 8000700:	b590      	push	{r4, r7, lr}
 8000702:	b087      	sub	sp, #28
 8000704:	af00      	add	r7, sp, #0
 8000706:	60f8      	str	r0, [r7, #12]
 8000708:	607a      	str	r2, [r7, #4]
 800070a:	200a      	movs	r0, #10
 800070c:	183b      	adds	r3, r7, r0
 800070e:	1c0a      	adds	r2, r1, #0
 8000710:	801a      	strh	r2, [r3, #0]
	MCU_UART_CLK_ENABLE();
 8000712:	4b14      	ldr	r3, [pc, #80]	; (8000764 <mcu_UartExt_Write+0x64>)
 8000714:	699a      	ldr	r2, [r3, #24]
 8000716:	4b13      	ldr	r3, [pc, #76]	; (8000764 <mcu_UartExt_Write+0x64>)
 8000718:	2180      	movs	r1, #128	; 0x80
 800071a:	01c9      	lsls	r1, r1, #7
 800071c:	430a      	orrs	r2, r1
 800071e:	619a      	str	r2, [r3, #24]
 8000720:	4b10      	ldr	r3, [pc, #64]	; (8000764 <mcu_UartExt_Write+0x64>)
 8000722:	699a      	ldr	r2, [r3, #24]
 8000724:	2380      	movs	r3, #128	; 0x80
 8000726:	01db      	lsls	r3, r3, #7
 8000728:	4013      	ands	r3, r2
 800072a:	617b      	str	r3, [r7, #20]
 800072c:	697b      	ldr	r3, [r7, #20]
	MCU_UART_PORT_CLK_ENABLE();
 800072e:	4b0d      	ldr	r3, [pc, #52]	; (8000764 <mcu_UartExt_Write+0x64>)
 8000730:	695a      	ldr	r2, [r3, #20]
 8000732:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <mcu_UartExt_Write+0x64>)
 8000734:	2180      	movs	r1, #128	; 0x80
 8000736:	0289      	lsls	r1, r1, #10
 8000738:	430a      	orrs	r2, r1
 800073a:	615a      	str	r2, [r3, #20]
 800073c:	4b09      	ldr	r3, [pc, #36]	; (8000764 <mcu_UartExt_Write+0x64>)
 800073e:	695a      	ldr	r2, [r3, #20]
 8000740:	2380      	movs	r3, #128	; 0x80
 8000742:	029b      	lsls	r3, r3, #10
 8000744:	4013      	ands	r3, r2
 8000746:	613b      	str	r3, [r7, #16]
 8000748:	693b      	ldr	r3, [r7, #16]
//	return 1;
	return (uint8_t)HAL_UART_Transmit(&huart1, pData, Size, Timeout);
 800074a:	687c      	ldr	r4, [r7, #4]
 800074c:	183b      	adds	r3, r7, r0
 800074e:	881a      	ldrh	r2, [r3, #0]
 8000750:	68f9      	ldr	r1, [r7, #12]
 8000752:	4805      	ldr	r0, [pc, #20]	; (8000768 <mcu_UartExt_Write+0x68>)
 8000754:	0023      	movs	r3, r4
 8000756:	f002 fbfd 	bl	8002f54 <HAL_UART_Transmit>
 800075a:	0003      	movs	r3, r0
}
 800075c:	0018      	movs	r0, r3
 800075e:	46bd      	mov	sp, r7
 8000760:	b007      	add	sp, #28
 8000762:	bd90      	pop	{r4, r7, pc}
 8000764:	40021000 	.word	0x40021000
 8000768:	20000164 	.word	0x20000164

0800076c <_write>:


int _write(int file, char *data, int len)
{
 800076c:	b5b0      	push	{r4, r5, r7, lr}
 800076e:	b086      	sub	sp, #24
 8000770:	af00      	add	r7, sp, #0
 8000772:	60f8      	str	r0, [r7, #12]
 8000774:	60b9      	str	r1, [r7, #8]
 8000776:	607a      	str	r2, [r7, #4]
	UNUSED(file);
	uint8_t status = mcu_UartExt_Write((uint8_t*)data, len, 300);
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	b299      	uxth	r1, r3
 800077c:	2517      	movs	r5, #23
 800077e:	197c      	adds	r4, r7, r5
 8000780:	2396      	movs	r3, #150	; 0x96
 8000782:	005a      	lsls	r2, r3, #1
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	0018      	movs	r0, r3
 8000788:	f7ff ffba 	bl	8000700 <mcu_UartExt_Write>
 800078c:	0003      	movs	r3, r0
 800078e:	7023      	strb	r3, [r4, #0]
	// return # of bytes written - as best we can tell
	return (status == HAL_OK ? len : 0);
 8000790:	197b      	adds	r3, r7, r5
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d101      	bne.n	800079c <_write+0x30>
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	e000      	b.n	800079e <_write+0x32>
 800079c:	2300      	movs	r3, #0
}
 800079e:	0018      	movs	r0, r3
 80007a0:	46bd      	mov	sp, r7
 80007a2:	b006      	add	sp, #24
 80007a4:	bdb0      	pop	{r4, r5, r7, pc}

080007a6 <callback_ksz8851_GetTick>:
//	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
//	printf("RECEIVED SPI DATA [MASTER]: %x %x %x %x\r\n", spi_buffer_rx[3], spi_buffer_rx[2], spi_buffer_rx[1], spi_buffer_rx[0]);
//}

uint32_t callback_ksz8851_GetTick(void)
{
 80007a6:	b580      	push	{r7, lr}
 80007a8:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80007aa:	f000 fd51 	bl	8001250 <HAL_GetTick>
 80007ae:	0003      	movs	r3, r0
}
 80007b0:	0018      	movs	r0, r3
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
	...

080007b8 <callback_ksz8851_SPI_Transmit>:

uint8_t callback_ksz8851_SPI_Transmit(uint8_t *pTxBuffer, uint16_t dataLenght)
{
 80007b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ba:	b087      	sub	sp, #28
 80007bc:	af02      	add	r7, sp, #8
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	000a      	movs	r2, r1
 80007c2:	1cbb      	adds	r3, r7, #2
 80007c4:	801a      	strh	r2, [r3, #0]
	uint8_t retStatus = HAL_SPI_Transmit(&hspi1, pTxBuffer, dataLenght, 4000);
 80007c6:	260f      	movs	r6, #15
 80007c8:	19bc      	adds	r4, r7, r6
 80007ca:	23fa      	movs	r3, #250	; 0xfa
 80007cc:	011d      	lsls	r5, r3, #4
 80007ce:	1cbb      	adds	r3, r7, #2
 80007d0:	881a      	ldrh	r2, [r3, #0]
 80007d2:	6879      	ldr	r1, [r7, #4]
 80007d4:	4811      	ldr	r0, [pc, #68]	; (800081c <callback_ksz8851_SPI_Transmit+0x64>)
 80007d6:	002b      	movs	r3, r5
 80007d8:	f001 fe82 	bl	80024e0 <HAL_SPI_Transmit>
 80007dc:	0003      	movs	r3, r0
 80007de:	7023      	strb	r3, [r4, #0]
//	HAL_Delay(1);
	printf("callback_ksz8851_transmit(txBuff: %x %x %x %x, length: %d)\r\n", *(pTxBuffer), *(pTxBuffer+1), *(pTxBuffer+2), *(pTxBuffer+3), dataLenght);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	0019      	movs	r1, r3
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	3301      	adds	r3, #1
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	001c      	movs	r4, r3
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	3302      	adds	r3, #2
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	001d      	movs	r5, r3
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	3303      	adds	r3, #3
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	001a      	movs	r2, r3
 80007fe:	1cbb      	adds	r3, r7, #2
 8000800:	881b      	ldrh	r3, [r3, #0]
 8000802:	4807      	ldr	r0, [pc, #28]	; (8000820 <callback_ksz8851_SPI_Transmit+0x68>)
 8000804:	9301      	str	r3, [sp, #4]
 8000806:	9200      	str	r2, [sp, #0]
 8000808:	002b      	movs	r3, r5
 800080a:	0022      	movs	r2, r4
 800080c:	f003 f82a 	bl	8003864 <iprintf>
	return retStatus;
 8000810:	19bb      	adds	r3, r7, r6
 8000812:	781b      	ldrb	r3, [r3, #0]
}
 8000814:	0018      	movs	r0, r3
 8000816:	46bd      	mov	sp, r7
 8000818:	b005      	add	sp, #20
 800081a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800081c:	20000100 	.word	0x20000100
 8000820:	08004958 	.word	0x08004958

08000824 <callback_ksz8851_SPI_TransmitReceive>:

uint8_t callback_ksz8851_SPI_TransmitReceive(uint8_t *pTxBuffer, uint8_t *pRxBuffer, uint16_t dataLenght)
{
 8000824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000826:	b089      	sub	sp, #36	; 0x24
 8000828:	af02      	add	r7, sp, #8
 800082a:	60f8      	str	r0, [r7, #12]
 800082c:	60b9      	str	r1, [r7, #8]
 800082e:	1dbb      	adds	r3, r7, #6
 8000830:	801a      	strh	r2, [r3, #0]
	uint8_t retStatus = HAL_SPI_TransmitReceive(&hspi1, pTxBuffer, pRxBuffer, dataLenght, 4000);
 8000832:	2617      	movs	r6, #23
 8000834:	19bc      	adds	r4, r7, r6
 8000836:	1dbb      	adds	r3, r7, #6
 8000838:	881d      	ldrh	r5, [r3, #0]
 800083a:	68ba      	ldr	r2, [r7, #8]
 800083c:	68f9      	ldr	r1, [r7, #12]
 800083e:	4813      	ldr	r0, [pc, #76]	; (800088c <callback_ksz8851_SPI_TransmitReceive+0x68>)
 8000840:	23fa      	movs	r3, #250	; 0xfa
 8000842:	011b      	lsls	r3, r3, #4
 8000844:	9300      	str	r3, [sp, #0]
 8000846:	002b      	movs	r3, r5
 8000848:	f001 ffcc 	bl	80027e4 <HAL_SPI_TransmitReceive>
 800084c:	0003      	movs	r3, r0
 800084e:	7023      	strb	r3, [r4, #0]
	printf("callback_ksz8851_transmitReceive(rxBuff: %x %x %x %x, length: %d)\r\n", *(pRxBuffer), *(pRxBuffer+1), *(pRxBuffer+2), *(pRxBuffer+3), dataLenght);
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	0019      	movs	r1, r3
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	3301      	adds	r3, #1
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	001c      	movs	r4, r3
 800085e:	68bb      	ldr	r3, [r7, #8]
 8000860:	3302      	adds	r3, #2
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	001d      	movs	r5, r3
 8000866:	68bb      	ldr	r3, [r7, #8]
 8000868:	3303      	adds	r3, #3
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	001a      	movs	r2, r3
 800086e:	1dbb      	adds	r3, r7, #6
 8000870:	881b      	ldrh	r3, [r3, #0]
 8000872:	4807      	ldr	r0, [pc, #28]	; (8000890 <callback_ksz8851_SPI_TransmitReceive+0x6c>)
 8000874:	9301      	str	r3, [sp, #4]
 8000876:	9200      	str	r2, [sp, #0]
 8000878:	002b      	movs	r3, r5
 800087a:	0022      	movs	r2, r4
 800087c:	f002 fff2 	bl	8003864 <iprintf>
//	HAL_Delay(1);
	return retStatus;
 8000880:	19bb      	adds	r3, r7, r6
 8000882:	781b      	ldrb	r3, [r3, #0]
}
 8000884:	0018      	movs	r0, r3
 8000886:	46bd      	mov	sp, r7
 8000888:	b007      	add	sp, #28
 800088a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800088c:	20000100 	.word	0x20000100
 8000890:	08004998 	.word	0x08004998

08000894 <callback_ksz8851_GPIO_Control>:

void callback_ksz8851_GPIO_Control(uint32_t port, uint16_t pin, uint8_t pinStatus)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	0008      	movs	r0, r1
 800089e:	0011      	movs	r1, r2
 80008a0:	1cbb      	adds	r3, r7, #2
 80008a2:	1c02      	adds	r2, r0, #0
 80008a4:	801a      	strh	r2, [r3, #0]
 80008a6:	1c7b      	adds	r3, r7, #1
 80008a8:	1c0a      	adds	r2, r1, #0
 80008aa:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin((GPIO_TypeDef *)port, pin, pinStatus);
 80008ac:	6878      	ldr	r0, [r7, #4]
 80008ae:	1c7b      	adds	r3, r7, #1
 80008b0:	781a      	ldrb	r2, [r3, #0]
 80008b2:	1cbb      	adds	r3, r7, #2
 80008b4:	881b      	ldrh	r3, [r3, #0]
 80008b6:	0019      	movs	r1, r3
 80008b8:	f000 ff3f 	bl	800173a <HAL_GPIO_WritePin>
}
 80008bc:	46c0      	nop			; (mov r8, r8)
 80008be:	46bd      	mov	sp, r7
 80008c0:	b002      	add	sp, #8
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80008c8:	46c0      	nop			; (mov r8, r8)
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
	...

080008d0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80008d4:	4b1b      	ldr	r3, [pc, #108]	; (8000944 <MX_SPI1_Init+0x74>)
 80008d6:	4a1c      	ldr	r2, [pc, #112]	; (8000948 <MX_SPI1_Init+0x78>)
 80008d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_SPI1_Init+0x74>)
 80008dc:	2282      	movs	r2, #130	; 0x82
 80008de:	0052      	lsls	r2, r2, #1
 80008e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008e2:	4b18      	ldr	r3, [pc, #96]	; (8000944 <MX_SPI1_Init+0x74>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008e8:	4b16      	ldr	r3, [pc, #88]	; (8000944 <MX_SPI1_Init+0x74>)
 80008ea:	22e0      	movs	r2, #224	; 0xe0
 80008ec:	00d2      	lsls	r2, r2, #3
 80008ee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008f0:	4b14      	ldr	r3, [pc, #80]	; (8000944 <MX_SPI1_Init+0x74>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008f6:	4b13      	ldr	r3, [pc, #76]	; (8000944 <MX_SPI1_Init+0x74>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008fc:	4b11      	ldr	r3, [pc, #68]	; (8000944 <MX_SPI1_Init+0x74>)
 80008fe:	2280      	movs	r2, #128	; 0x80
 8000900:	0092      	lsls	r2, r2, #2
 8000902:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000904:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <MX_SPI1_Init+0x74>)
 8000906:	2208      	movs	r2, #8
 8000908:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <MX_SPI1_Init+0x74>)
 800090c:	2200      	movs	r2, #0
 800090e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000910:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <MX_SPI1_Init+0x74>)
 8000912:	2200      	movs	r2, #0
 8000914:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000916:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <MX_SPI1_Init+0x74>)
 8000918:	2200      	movs	r2, #0
 800091a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800091c:	4b09      	ldr	r3, [pc, #36]	; (8000944 <MX_SPI1_Init+0x74>)
 800091e:	2207      	movs	r2, #7
 8000920:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000922:	4b08      	ldr	r3, [pc, #32]	; (8000944 <MX_SPI1_Init+0x74>)
 8000924:	2200      	movs	r2, #0
 8000926:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000928:	4b06      	ldr	r3, [pc, #24]	; (8000944 <MX_SPI1_Init+0x74>)
 800092a:	2200      	movs	r2, #0
 800092c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800092e:	4b05      	ldr	r3, [pc, #20]	; (8000944 <MX_SPI1_Init+0x74>)
 8000930:	0018      	movs	r0, r3
 8000932:	f001 fd3b 	bl	80023ac <HAL_SPI_Init>
 8000936:	1e03      	subs	r3, r0, #0
 8000938:	d001      	beq.n	800093e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800093a:	f7ff ffc3 	bl	80008c4 <Error_Handler>
  }

}
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	20000100 	.word	0x20000100
 8000948:	40013000 	.word	0x40013000

0800094c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800094c:	b590      	push	{r4, r7, lr}
 800094e:	b08b      	sub	sp, #44	; 0x2c
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	2314      	movs	r3, #20
 8000956:	18fb      	adds	r3, r7, r3
 8000958:	0018      	movs	r0, r3
 800095a:	2314      	movs	r3, #20
 800095c:	001a      	movs	r2, r3
 800095e:	2100      	movs	r1, #0
 8000960:	f002 ff77 	bl	8003852 <memset>
  if(spiHandle->Instance==SPI1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a2e      	ldr	r2, [pc, #184]	; (8000a24 <HAL_SPI_MspInit+0xd8>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d156      	bne.n	8000a1c <HAL_SPI_MspInit+0xd0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800096e:	4b2e      	ldr	r3, [pc, #184]	; (8000a28 <HAL_SPI_MspInit+0xdc>)
 8000970:	699a      	ldr	r2, [r3, #24]
 8000972:	4b2d      	ldr	r3, [pc, #180]	; (8000a28 <HAL_SPI_MspInit+0xdc>)
 8000974:	2180      	movs	r1, #128	; 0x80
 8000976:	0149      	lsls	r1, r1, #5
 8000978:	430a      	orrs	r2, r1
 800097a:	619a      	str	r2, [r3, #24]
 800097c:	4b2a      	ldr	r3, [pc, #168]	; (8000a28 <HAL_SPI_MspInit+0xdc>)
 800097e:	699a      	ldr	r2, [r3, #24]
 8000980:	2380      	movs	r3, #128	; 0x80
 8000982:	015b      	lsls	r3, r3, #5
 8000984:	4013      	ands	r3, r2
 8000986:	613b      	str	r3, [r7, #16]
 8000988:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800098a:	4b27      	ldr	r3, [pc, #156]	; (8000a28 <HAL_SPI_MspInit+0xdc>)
 800098c:	695a      	ldr	r2, [r3, #20]
 800098e:	4b26      	ldr	r3, [pc, #152]	; (8000a28 <HAL_SPI_MspInit+0xdc>)
 8000990:	2180      	movs	r1, #128	; 0x80
 8000992:	0289      	lsls	r1, r1, #10
 8000994:	430a      	orrs	r2, r1
 8000996:	615a      	str	r2, [r3, #20]
 8000998:	4b23      	ldr	r3, [pc, #140]	; (8000a28 <HAL_SPI_MspInit+0xdc>)
 800099a:	695a      	ldr	r2, [r3, #20]
 800099c:	2380      	movs	r3, #128	; 0x80
 800099e:	029b      	lsls	r3, r3, #10
 80009a0:	4013      	ands	r3, r2
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a6:	4b20      	ldr	r3, [pc, #128]	; (8000a28 <HAL_SPI_MspInit+0xdc>)
 80009a8:	695a      	ldr	r2, [r3, #20]
 80009aa:	4b1f      	ldr	r3, [pc, #124]	; (8000a28 <HAL_SPI_MspInit+0xdc>)
 80009ac:	2180      	movs	r1, #128	; 0x80
 80009ae:	02c9      	lsls	r1, r1, #11
 80009b0:	430a      	orrs	r2, r1
 80009b2:	615a      	str	r2, [r3, #20]
 80009b4:	4b1c      	ldr	r3, [pc, #112]	; (8000a28 <HAL_SPI_MspInit+0xdc>)
 80009b6:	695a      	ldr	r2, [r3, #20]
 80009b8:	2380      	movs	r3, #128	; 0x80
 80009ba:	02db      	lsls	r3, r3, #11
 80009bc:	4013      	ands	r3, r2
 80009be:	60bb      	str	r3, [r7, #8]
 80009c0:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = SP1_MISO_Pin|SPI1_MOSI_Pin;
 80009c2:	2414      	movs	r4, #20
 80009c4:	193b      	adds	r3, r7, r4
 80009c6:	22c0      	movs	r2, #192	; 0xc0
 80009c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ca:	193b      	adds	r3, r7, r4
 80009cc:	2202      	movs	r2, #2
 80009ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	193b      	adds	r3, r7, r4
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009d6:	193b      	adds	r3, r7, r4
 80009d8:	2203      	movs	r2, #3
 80009da:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80009dc:	193b      	adds	r3, r7, r4
 80009de:	2200      	movs	r2, #0
 80009e0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e2:	193a      	adds	r2, r7, r4
 80009e4:	2390      	movs	r3, #144	; 0x90
 80009e6:	05db      	lsls	r3, r3, #23
 80009e8:	0011      	movs	r1, r2
 80009ea:	0018      	movs	r0, r3
 80009ec:	f000 fd10 	bl	8001410 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_SCK_Pin;
 80009f0:	0021      	movs	r1, r4
 80009f2:	187b      	adds	r3, r7, r1
 80009f4:	2208      	movs	r2, #8
 80009f6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f8:	187b      	adds	r3, r7, r1
 80009fa:	2202      	movs	r2, #2
 80009fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	187b      	adds	r3, r7, r1
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a04:	187b      	adds	r3, r7, r1
 8000a06:	2203      	movs	r2, #3
 8000a08:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000a0a:	187b      	adds	r3, r7, r1
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SPI1_SCK_GPIO_Port, &GPIO_InitStruct);
 8000a10:	187b      	adds	r3, r7, r1
 8000a12:	4a06      	ldr	r2, [pc, #24]	; (8000a2c <HAL_SPI_MspInit+0xe0>)
 8000a14:	0019      	movs	r1, r3
 8000a16:	0010      	movs	r0, r2
 8000a18:	f000 fcfa 	bl	8001410 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000a1c:	46c0      	nop			; (mov r8, r8)
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	b00b      	add	sp, #44	; 0x2c
 8000a22:	bd90      	pop	{r4, r7, pc}
 8000a24:	40013000 	.word	0x40013000
 8000a28:	40021000 	.word	0x40021000
 8000a2c:	48000400 	.word	0x48000400

08000a30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a36:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <HAL_MspInit+0x44>)
 8000a38:	699a      	ldr	r2, [r3, #24]
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <HAL_MspInit+0x44>)
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	430a      	orrs	r2, r1
 8000a40:	619a      	str	r2, [r3, #24]
 8000a42:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <HAL_MspInit+0x44>)
 8000a44:	699b      	ldr	r3, [r3, #24]
 8000a46:	2201      	movs	r2, #1
 8000a48:	4013      	ands	r3, r2
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4e:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <HAL_MspInit+0x44>)
 8000a50:	69da      	ldr	r2, [r3, #28]
 8000a52:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <HAL_MspInit+0x44>)
 8000a54:	2180      	movs	r1, #128	; 0x80
 8000a56:	0549      	lsls	r1, r1, #21
 8000a58:	430a      	orrs	r2, r1
 8000a5a:	61da      	str	r2, [r3, #28]
 8000a5c:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <HAL_MspInit+0x44>)
 8000a5e:	69da      	ldr	r2, [r3, #28]
 8000a60:	2380      	movs	r3, #128	; 0x80
 8000a62:	055b      	lsls	r3, r3, #21
 8000a64:	4013      	ands	r3, r2
 8000a66:	603b      	str	r3, [r7, #0]
 8000a68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a6a:	46c0      	nop			; (mov r8, r8)
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	b002      	add	sp, #8
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	46c0      	nop			; (mov r8, r8)
 8000a74:	40021000 	.word	0x40021000

08000a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a7c:	46c0      	nop			; (mov r8, r8)
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <HardFault_Handler+0x4>

08000a88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a8c:	46c0      	nop			; (mov r8, r8)
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a92:	b580      	push	{r7, lr}
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aa0:	f000 fbc4 	bl	800122c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa4:	46c0      	nop			; (mov r8, r8)
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b086      	sub	sp, #24
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	60f8      	str	r0, [r7, #12]
 8000ab2:	60b9      	str	r1, [r7, #8]
 8000ab4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	617b      	str	r3, [r7, #20]
 8000aba:	e00a      	b.n	8000ad2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000abc:	e000      	b.n	8000ac0 <_read+0x16>
 8000abe:	bf00      	nop
 8000ac0:	0001      	movs	r1, r0
 8000ac2:	68bb      	ldr	r3, [r7, #8]
 8000ac4:	1c5a      	adds	r2, r3, #1
 8000ac6:	60ba      	str	r2, [r7, #8]
 8000ac8:	b2ca      	uxtb	r2, r1
 8000aca:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	3301      	adds	r3, #1
 8000ad0:	617b      	str	r3, [r7, #20]
 8000ad2:	697a      	ldr	r2, [r7, #20]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	dbf0      	blt.n	8000abc <_read+0x12>
	}

return len;
 8000ada:	687b      	ldr	r3, [r7, #4]
}
 8000adc:	0018      	movs	r0, r3
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	b006      	add	sp, #24
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
	return -1;
 8000aec:	2301      	movs	r3, #1
 8000aee:	425b      	negs	r3, r3
}
 8000af0:	0018      	movs	r0, r3
 8000af2:	46bd      	mov	sp, r7
 8000af4:	b002      	add	sp, #8
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	2280      	movs	r2, #128	; 0x80
 8000b06:	0192      	lsls	r2, r2, #6
 8000b08:	605a      	str	r2, [r3, #4]
	return 0;
 8000b0a:	2300      	movs	r3, #0
}
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	b002      	add	sp, #8
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <_isatty>:

int _isatty(int file)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
	return 1;
 8000b1c:	2301      	movs	r3, #1
}
 8000b1e:	0018      	movs	r0, r3
 8000b20:	46bd      	mov	sp, r7
 8000b22:	b002      	add	sp, #8
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b084      	sub	sp, #16
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	60f8      	str	r0, [r7, #12]
 8000b2e:	60b9      	str	r1, [r7, #8]
 8000b30:	607a      	str	r2, [r7, #4]
	return 0;
 8000b32:	2300      	movs	r3, #0
}
 8000b34:	0018      	movs	r0, r3
 8000b36:	46bd      	mov	sp, r7
 8000b38:	b004      	add	sp, #16
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000b44:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <_sbrk+0x50>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d102      	bne.n	8000b52 <_sbrk+0x16>
		heap_end = &end;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <_sbrk+0x50>)
 8000b4e:	4a10      	ldr	r2, [pc, #64]	; (8000b90 <_sbrk+0x54>)
 8000b50:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <_sbrk+0x50>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <_sbrk+0x50>)
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	18d3      	adds	r3, r2, r3
 8000b60:	466a      	mov	r2, sp
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d907      	bls.n	8000b76 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000b66:	f002 fe41 	bl	80037ec <__errno>
 8000b6a:	0003      	movs	r3, r0
 8000b6c:	220c      	movs	r2, #12
 8000b6e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000b70:	2301      	movs	r3, #1
 8000b72:	425b      	negs	r3, r3
 8000b74:	e006      	b.n	8000b84 <_sbrk+0x48>
	}

	heap_end += incr;
 8000b76:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <_sbrk+0x50>)
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	18d2      	adds	r2, r2, r3
 8000b7e:	4b03      	ldr	r3, [pc, #12]	; (8000b8c <_sbrk+0x50>)
 8000b80:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8000b82:	68fb      	ldr	r3, [r7, #12]
}
 8000b84:	0018      	movs	r0, r3
 8000b86:	46bd      	mov	sp, r7
 8000b88:	b004      	add	sp, #16
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	200000cc 	.word	0x200000cc
 8000b90:	200001f0 	.word	0x200001f0

08000b94 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000b98:	46c0      	nop			; (mov r8, r8)
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
	...

08000ba0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000ba4:	4b14      	ldr	r3, [pc, #80]	; (8000bf8 <MX_USART1_UART_Init+0x58>)
 8000ba6:	4a15      	ldr	r2, [pc, #84]	; (8000bfc <MX_USART1_UART_Init+0x5c>)
 8000ba8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000baa:	4b13      	ldr	r3, [pc, #76]	; (8000bf8 <MX_USART1_UART_Init+0x58>)
 8000bac:	22e1      	movs	r2, #225	; 0xe1
 8000bae:	0252      	lsls	r2, r2, #9
 8000bb0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bb2:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <MX_USART1_UART_Init+0x58>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bb8:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <MX_USART1_UART_Init+0x58>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <MX_USART1_UART_Init+0x58>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <MX_USART1_UART_Init+0x58>)
 8000bc6:	220c      	movs	r2, #12
 8000bc8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bca:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <MX_USART1_UART_Init+0x58>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd0:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <MX_USART1_UART_Init+0x58>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bd6:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <MX_USART1_UART_Init+0x58>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bdc:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <MX_USART1_UART_Init+0x58>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000be2:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <MX_USART1_UART_Init+0x58>)
 8000be4:	0018      	movs	r0, r3
 8000be6:	f002 f961 	bl	8002eac <HAL_UART_Init>
 8000bea:	1e03      	subs	r3, r0, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000bee:	f7ff fe69 	bl	80008c4 <Error_Handler>
  }

}
 8000bf2:	46c0      	nop			; (mov r8, r8)
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000164 	.word	0x20000164
 8000bfc:	40013800 	.word	0x40013800

08000c00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08a      	sub	sp, #40	; 0x28
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c08:	2314      	movs	r3, #20
 8000c0a:	18fb      	adds	r3, r7, r3
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	2314      	movs	r3, #20
 8000c10:	001a      	movs	r2, r3
 8000c12:	2100      	movs	r1, #0
 8000c14:	f002 fe1d 	bl	8003852 <memset>
  if(uartHandle->Instance==USART1)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a1d      	ldr	r2, [pc, #116]	; (8000c94 <HAL_UART_MspInit+0x94>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d133      	bne.n	8000c8a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c22:	4b1d      	ldr	r3, [pc, #116]	; (8000c98 <HAL_UART_MspInit+0x98>)
 8000c24:	699a      	ldr	r2, [r3, #24]
 8000c26:	4b1c      	ldr	r3, [pc, #112]	; (8000c98 <HAL_UART_MspInit+0x98>)
 8000c28:	2180      	movs	r1, #128	; 0x80
 8000c2a:	01c9      	lsls	r1, r1, #7
 8000c2c:	430a      	orrs	r2, r1
 8000c2e:	619a      	str	r2, [r3, #24]
 8000c30:	4b19      	ldr	r3, [pc, #100]	; (8000c98 <HAL_UART_MspInit+0x98>)
 8000c32:	699a      	ldr	r2, [r3, #24]
 8000c34:	2380      	movs	r3, #128	; 0x80
 8000c36:	01db      	lsls	r3, r3, #7
 8000c38:	4013      	ands	r3, r2
 8000c3a:	613b      	str	r3, [r7, #16]
 8000c3c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3e:	4b16      	ldr	r3, [pc, #88]	; (8000c98 <HAL_UART_MspInit+0x98>)
 8000c40:	695a      	ldr	r2, [r3, #20]
 8000c42:	4b15      	ldr	r3, [pc, #84]	; (8000c98 <HAL_UART_MspInit+0x98>)
 8000c44:	2180      	movs	r1, #128	; 0x80
 8000c46:	0289      	lsls	r1, r1, #10
 8000c48:	430a      	orrs	r2, r1
 8000c4a:	615a      	str	r2, [r3, #20]
 8000c4c:	4b12      	ldr	r3, [pc, #72]	; (8000c98 <HAL_UART_MspInit+0x98>)
 8000c4e:	695a      	ldr	r2, [r3, #20]
 8000c50:	2380      	movs	r3, #128	; 0x80
 8000c52:	029b      	lsls	r3, r3, #10
 8000c54:	4013      	ands	r3, r2
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c5a:	2114      	movs	r1, #20
 8000c5c:	187b      	adds	r3, r7, r1
 8000c5e:	22c0      	movs	r2, #192	; 0xc0
 8000c60:	00d2      	lsls	r2, r2, #3
 8000c62:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c64:	187b      	adds	r3, r7, r1
 8000c66:	2202      	movs	r2, #2
 8000c68:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	187b      	adds	r3, r7, r1
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c70:	187b      	adds	r3, r7, r1
 8000c72:	2203      	movs	r2, #3
 8000c74:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000c76:	187b      	adds	r3, r7, r1
 8000c78:	2201      	movs	r2, #1
 8000c7a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7c:	187a      	adds	r2, r7, r1
 8000c7e:	2390      	movs	r3, #144	; 0x90
 8000c80:	05db      	lsls	r3, r3, #23
 8000c82:	0011      	movs	r1, r2
 8000c84:	0018      	movs	r0, r3
 8000c86:	f000 fbc3 	bl	8001410 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000c8a:	46c0      	nop			; (mov r8, r8)
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	b00a      	add	sp, #40	; 0x28
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	40013800 	.word	0x40013800
 8000c98:	40021000 	.word	0x40021000

08000c9c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c9c:	480d      	ldr	r0, [pc, #52]	; (8000cd4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c9e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ca0:	480d      	ldr	r0, [pc, #52]	; (8000cd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ca2:	490e      	ldr	r1, [pc, #56]	; (8000cdc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ca4:	4a0e      	ldr	r2, [pc, #56]	; (8000ce0 <LoopForever+0xe>)
  movs r3, #0
 8000ca6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca8:	e002      	b.n	8000cb0 <LoopCopyDataInit>

08000caa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000caa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cae:	3304      	adds	r3, #4

08000cb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb4:	d3f9      	bcc.n	8000caa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cb6:	4a0b      	ldr	r2, [pc, #44]	; (8000ce4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cb8:	4c0b      	ldr	r4, [pc, #44]	; (8000ce8 <LoopForever+0x16>)
  movs r3, #0
 8000cba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cbc:	e001      	b.n	8000cc2 <LoopFillZerobss>

08000cbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc0:	3204      	adds	r2, #4

08000cc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc4:	d3fb      	bcc.n	8000cbe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000cc6:	f7ff ff65 	bl	8000b94 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000cca:	f002 fd95 	bl	80037f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cce:	f7ff fb5f 	bl	8000390 <main>

08000cd2 <LoopForever>:

LoopForever:
    b LoopForever
 8000cd2:	e7fe      	b.n	8000cd2 <LoopForever>
  ldr   r0, =_estack
 8000cd4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000cd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cdc:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000ce0:	08004ab4 	.word	0x08004ab4
  ldr r2, =_sbss
 8000ce4:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000ce8:	200001ec 	.word	0x200001ec

08000cec <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cec:	e7fe      	b.n	8000cec <ADC1_COMP_IRQHandler>

08000cee <ksz8851_read_register>:
* @param registerValue:
* @return status of process
*/
//static uint8_t ksz8851_read_register(KSZ8851_t *driver, KSZ8851_Registers_t registerAddr, uint16_t *registerValue)
uint8_t ksz8851_read_register(KSZ8851_t *driver, KSZ8851_Registers_t registerAddr, uint16_t *registerValue)
{
 8000cee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cf0:	b089      	sub	sp, #36	; 0x24
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	60f8      	str	r0, [r7, #12]
 8000cf6:	607a      	str	r2, [r7, #4]
 8000cf8:	250b      	movs	r5, #11
 8000cfa:	197b      	adds	r3, r7, r5
 8000cfc:	1c0a      	adds	r2, r1, #0
 8000cfe:	701a      	strb	r2, [r3, #0]
	uint32_t tickStart;
	uint16_t frameBuff = 0;
 8000d00:	261e      	movs	r6, #30
 8000d02:	19bb      	adds	r3, r7, r6
 8000d04:	2200      	movs	r2, #0
 8000d06:	801a      	strh	r2, [r3, #0]
	uint8_t  cmdBuff[KSZ_REG_CMD_BUFF_SIZE] = {0};
 8000d08:	2314      	movs	r3, #20
 8000d0a:	18fb      	adds	r3, r7, r3
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
	uint8_t  dataBuff[KSZ_REG_DATA_BUFF_SIZE] = {0};
 8000d10:	2310      	movs	r3, #16
 8000d12:	18fb      	adds	r3, r7, r3
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
	uint8_t  returnStatus;

	/*Make chip select output (NSS) pin low before SPI operation*/
	driver->functions.GPIO_Control(driver->interface.cs_port, driver->interface.cs_pin, KSZ_GPIO_PIN_RESET);
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	699c      	ldr	r4, [r3, #24]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	6818      	ldr	r0, [r3, #0]
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	891b      	ldrh	r3, [r3, #8]
 8000d24:	2200      	movs	r2, #0
 8000d26:	0019      	movs	r1, r3
 8000d28:	47a0      	blx	r4

	/*Shift register addr to bits 9-2 and mask it to make 0 don't care bits*/
	KSZ_MAKE_FRAME_REG_ADDR(frameBuff, registerAddr);
 8000d2a:	0029      	movs	r1, r5
 8000d2c:	187b      	adds	r3, r7, r1
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	b21a      	sxth	r2, r3
 8000d38:	23fc      	movs	r3, #252	; 0xfc
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	b21a      	sxth	r2, r3
 8000d40:	19bb      	adds	r3, r7, r6
 8000d42:	2000      	movs	r0, #0
 8000d44:	5e1b      	ldrsh	r3, [r3, r0]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	b21a      	sxth	r2, r3
 8000d4a:	19bb      	adds	r3, r7, r6
 8000d4c:	801a      	strh	r2, [r3, #0]

	/* Checks register address whether odd or even and if it's even selects byte 0-1 */
	KSZ_MAKE_FRAME_REG_BYTES(frameBuff, registerAddr);
 8000d4e:	187b      	adds	r3, r7, r1
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	2202      	movs	r2, #2
 8000d54:	4013      	ands	r3, r2
 8000d56:	d008      	beq.n	8000d6a <ksz8851_read_register+0x7c>
 8000d58:	221e      	movs	r2, #30
 8000d5a:	18bb      	adds	r3, r7, r2
 8000d5c:	18ba      	adds	r2, r7, r2
 8000d5e:	8812      	ldrh	r2, [r2, #0]
 8000d60:	21c0      	movs	r1, #192	; 0xc0
 8000d62:	0189      	lsls	r1, r1, #6
 8000d64:	430a      	orrs	r2, r1
 8000d66:	801a      	strh	r2, [r3, #0]
 8000d68:	e007      	b.n	8000d7a <ksz8851_read_register+0x8c>
 8000d6a:	221e      	movs	r2, #30
 8000d6c:	18bb      	adds	r3, r7, r2
 8000d6e:	18ba      	adds	r2, r7, r2
 8000d70:	8812      	ldrh	r2, [r2, #0]
 8000d72:	21c0      	movs	r1, #192	; 0xc0
 8000d74:	0109      	lsls	r1, r1, #4
 8000d76:	430a      	orrs	r2, r1
 8000d78:	801a      	strh	r2, [r3, #0]

	/* Shifts cmd to frame bits 14-15 */
	KSZ_MAKE_FRAME_CMD(frameBuff, KSZ8851_READ_REG);
 8000d7a:	211e      	movs	r1, #30
 8000d7c:	187b      	adds	r3, r7, r1
 8000d7e:	187a      	adds	r2, r7, r1
 8000d80:	8812      	ldrh	r2, [r2, #0]
 8000d82:	801a      	strh	r2, [r3, #0]

	/*Copy the read register frame to buffer*/
	cmdBuff[KSZ_REG_BUFF_BYTE0] = (uint8_t)((frameBuff & KSZ_REG_CMD_BYTE0_MASK) >> KSZ_1BYTE_SHIFTING_VALUE);			//fit MSB byte of cmd (16 bit) variable to one byte
 8000d84:	187b      	adds	r3, r7, r1
 8000d86:	881b      	ldrh	r3, [r3, #0]
 8000d88:	0a1b      	lsrs	r3, r3, #8
 8000d8a:	b29b      	uxth	r3, r3
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	2014      	movs	r0, #20
 8000d90:	183b      	adds	r3, r7, r0
 8000d92:	701a      	strb	r2, [r3, #0]
	cmdBuff[KSZ_REG_BUFF_BYTE1] = (uint8_t)(frameBuff & KSZ_REG_CMD_BYTE1_MASK);										//fit LSB byte of cmd (16 bit) variable to one byte
 8000d94:	187b      	adds	r3, r7, r1
 8000d96:	881b      	ldrh	r3, [r3, #0]
 8000d98:	b2da      	uxtb	r2, r3
 8000d9a:	183b      	adds	r3, r7, r0
 8000d9c:	705a      	strb	r2, [r3, #1]

	/*Call spi callback function to start spi tx/rx operation*/
	returnStatus = driver->functions.SPI_TransmitReceiveData(cmdBuff, dataBuff, KSZ_REG_CMD_BUFF_SIZE);
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	695b      	ldr	r3, [r3, #20]
 8000da2:	221d      	movs	r2, #29
 8000da4:	18bc      	adds	r4, r7, r2
 8000da6:	2210      	movs	r2, #16
 8000da8:	18b9      	adds	r1, r7, r2
 8000daa:	1838      	adds	r0, r7, r0
 8000dac:	2204      	movs	r2, #4
 8000dae:	4798      	blx	r3
 8000db0:	0003      	movs	r3, r0
 8000db2:	7023      	strb	r3, [r4, #0]

	/*Wait 1mS to be sure SPI packets send and receive completely */
	tickStart = driver->functions.TIME_GetTick();
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	4798      	blx	r3
 8000dba:	0003      	movs	r3, r0
 8000dbc:	61bb      	str	r3, [r7, #24]
	while(driver->functions.TIME_GetTick() - tickStart < KSZ_TIME_WAIT_1MS);
 8000dbe:	46c0      	nop			; (mov r8, r8)
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	4798      	blx	r3
 8000dc6:	0002      	movs	r2, r0
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d0f8      	beq.n	8000dc0 <ksz8851_read_register+0xd2>

	/*Make chip select output (NSS) pin low before SPI operation*/
	driver->functions.GPIO_Control(driver->interface.cs_port, driver->interface.cs_pin, KSZ_GPIO_PIN_SET);
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	699c      	ldr	r4, [r3, #24]
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	6818      	ldr	r0, [r3, #0]
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	891b      	ldrh	r3, [r3, #8]
 8000dda:	2201      	movs	r2, #1
 8000ddc:	0019      	movs	r1, r3
 8000dde:	47a0      	blx	r4

	/*Order data. While data is transferred in the MSB first mode in the SPI cycle, byte0 is the first byte to appear and the byte 3 is the last byte for the data phase.*/
	*registerValue = (uint16_t)((dataBuff[KSZ_REG_BUFF_BYTE3] << KSZ_1BYTE_SHIFTING_VALUE) | dataBuff[KSZ_REG_BUFF_BYTE2]);
 8000de0:	2110      	movs	r1, #16
 8000de2:	187b      	adds	r3, r7, r1
 8000de4:	78db      	ldrb	r3, [r3, #3]
 8000de6:	021b      	lsls	r3, r3, #8
 8000de8:	b21a      	sxth	r2, r3
 8000dea:	187b      	adds	r3, r7, r1
 8000dec:	789b      	ldrb	r3, [r3, #2]
 8000dee:	b21b      	sxth	r3, r3
 8000df0:	4313      	orrs	r3, r2
 8000df2:	b21b      	sxth	r3, r3
 8000df4:	b29a      	uxth	r2, r3
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	801a      	strh	r2, [r3, #0]

	return returnStatus;
 8000dfa:	231d      	movs	r3, #29
 8000dfc:	18fb      	adds	r3, r7, r3
 8000dfe:	781b      	ldrb	r3, [r3, #0]
}
 8000e00:	0018      	movs	r0, r3
 8000e02:	46bd      	mov	sp, r7
 8000e04:	b009      	add	sp, #36	; 0x24
 8000e06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000e08 <ksz8851_write_register>:
* @param  register: address of internal register.
* @retval status of process
*/
//static uint8_t ksz8851_write_register(KSZ8851_t *driver, KSZ8851_Registers_t registerAddr, uint16_t registerValue)
uint8_t ksz8851_write_register(KSZ8851_t *driver, KSZ8851_Registers_t registerAddr, uint16_t registerValue)
{
 8000e08:	b5b0      	push	{r4, r5, r7, lr}
 8000e0a:	b086      	sub	sp, #24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	0008      	movs	r0, r1
 8000e12:	0011      	movs	r1, r2
 8000e14:	1cfb      	adds	r3, r7, #3
 8000e16:	1c02      	adds	r2, r0, #0
 8000e18:	701a      	strb	r2, [r3, #0]
 8000e1a:	003b      	movs	r3, r7
 8000e1c:	1c0a      	adds	r2, r1, #0
 8000e1e:	801a      	strh	r2, [r3, #0]
	uint32_t tickStart;
	uint16_t frameBuff = 0;
 8000e20:	2516      	movs	r5, #22
 8000e22:	197b      	adds	r3, r7, r5
 8000e24:	2200      	movs	r2, #0
 8000e26:	801a      	strh	r2, [r3, #0]
	uint8_t  cmdBuff[KSZ_REG_CMD_BUFF_SIZE] = {0};
 8000e28:	230c      	movs	r3, #12
 8000e2a:	18fb      	adds	r3, r7, r3
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
	uint8_t  returnStatus;

	/*Make chip select output (NSS) pin low before SPI operation*/
	driver->functions.GPIO_Control(driver->interface.cs_port, driver->interface.cs_pin, KSZ_GPIO_PIN_RESET);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	699c      	ldr	r4, [r3, #24]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6818      	ldr	r0, [r3, #0]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	891b      	ldrh	r3, [r3, #8]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	0019      	movs	r1, r3
 8000e40:	47a0      	blx	r4

	/*Shift register addr to bits 9-2 and mask it to make 0 don't care bits*/
	KSZ_MAKE_FRAME_REG_ADDR(frameBuff, registerAddr);
 8000e42:	1cfb      	adds	r3, r7, #3
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	b29b      	uxth	r3, r3
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	b29b      	uxth	r3, r3
 8000e4c:	b21a      	sxth	r2, r3
 8000e4e:	23fc      	movs	r3, #252	; 0xfc
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	4013      	ands	r3, r2
 8000e54:	b21a      	sxth	r2, r3
 8000e56:	197b      	adds	r3, r7, r5
 8000e58:	2100      	movs	r1, #0
 8000e5a:	5e5b      	ldrsh	r3, [r3, r1]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	b21a      	sxth	r2, r3
 8000e60:	197b      	adds	r3, r7, r5
 8000e62:	801a      	strh	r2, [r3, #0]

	/* Checks register address whether odd or even and if it's even selects byte 0-1 */
	KSZ_MAKE_FRAME_REG_BYTES(frameBuff, registerAddr);
 8000e64:	1cfb      	adds	r3, r7, #3
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	2202      	movs	r2, #2
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	d008      	beq.n	8000e80 <ksz8851_write_register+0x78>
 8000e6e:	2216      	movs	r2, #22
 8000e70:	18bb      	adds	r3, r7, r2
 8000e72:	18ba      	adds	r2, r7, r2
 8000e74:	8812      	ldrh	r2, [r2, #0]
 8000e76:	21c0      	movs	r1, #192	; 0xc0
 8000e78:	0189      	lsls	r1, r1, #6
 8000e7a:	430a      	orrs	r2, r1
 8000e7c:	801a      	strh	r2, [r3, #0]
 8000e7e:	e007      	b.n	8000e90 <ksz8851_write_register+0x88>
 8000e80:	2216      	movs	r2, #22
 8000e82:	18bb      	adds	r3, r7, r2
 8000e84:	18ba      	adds	r2, r7, r2
 8000e86:	8812      	ldrh	r2, [r2, #0]
 8000e88:	21c0      	movs	r1, #192	; 0xc0
 8000e8a:	0109      	lsls	r1, r1, #4
 8000e8c:	430a      	orrs	r2, r1
 8000e8e:	801a      	strh	r2, [r3, #0]

	/* Shifts cmd to frame bits 14-15 */
	KSZ_MAKE_FRAME_CMD(frameBuff, KSZ8851_WRITE_REG);
 8000e90:	2016      	movs	r0, #22
 8000e92:	183b      	adds	r3, r7, r0
 8000e94:	183a      	adds	r2, r7, r0
 8000e96:	8812      	ldrh	r2, [r2, #0]
 8000e98:	2180      	movs	r1, #128	; 0x80
 8000e9a:	01c9      	lsls	r1, r1, #7
 8000e9c:	430a      	orrs	r2, r1
 8000e9e:	801a      	strh	r2, [r3, #0]

	/*Copy the read register frame to buffer*/
	cmdBuff[KSZ_REG_BUFF_BYTE0] = (uint8_t)((frameBuff & KSZ_REG_CMD_BYTE0_MASK) >> KSZ_1BYTE_SHIFTING_VALUE);			//fit MSB byte of cmd (16 bit) variable to one byte
 8000ea0:	183b      	adds	r3, r7, r0
 8000ea2:	881b      	ldrh	r3, [r3, #0]
 8000ea4:	0a1b      	lsrs	r3, r3, #8
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	b2da      	uxtb	r2, r3
 8000eaa:	210c      	movs	r1, #12
 8000eac:	187b      	adds	r3, r7, r1
 8000eae:	701a      	strb	r2, [r3, #0]
	cmdBuff[KSZ_REG_BUFF_BYTE1] = (uint8_t)(frameBuff & KSZ_REG_CMD_BYTE1_MASK);										//fit LSB byte of cmd (16 bit) variable to one byte
 8000eb0:	183b      	adds	r3, r7, r0
 8000eb2:	881b      	ldrh	r3, [r3, #0]
 8000eb4:	b2da      	uxtb	r2, r3
 8000eb6:	187b      	adds	r3, r7, r1
 8000eb8:	705a      	strb	r2, [r3, #1]
	cmdBuff[KSZ_REG_BUFF_BYTE2] = (uint8_t)(registerValue & KSZ_REG_CMD_BYTE1_MASK);									//fit LSB byte of data (16 bit) variable to one byte
 8000eba:	003b      	movs	r3, r7
 8000ebc:	881b      	ldrh	r3, [r3, #0]
 8000ebe:	b2da      	uxtb	r2, r3
 8000ec0:	187b      	adds	r3, r7, r1
 8000ec2:	709a      	strb	r2, [r3, #2]
	cmdBuff[KSZ_REG_BUFF_BYTE3] = (uint8_t)((registerValue & KSZ_REG_CMD_BYTE0_MASK) >> KSZ_1BYTE_SHIFTING_VALUE);		//fit MSB byte of data (16 bit) variable to one byte
 8000ec4:	003b      	movs	r3, r7
 8000ec6:	881b      	ldrh	r3, [r3, #0]
 8000ec8:	0a1b      	lsrs	r3, r3, #8
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	b2da      	uxtb	r2, r3
 8000ece:	187b      	adds	r3, r7, r1
 8000ed0:	70da      	strb	r2, [r3, #3]

	/*Call spi callback function to start spi tx operation*/
	returnStatus = driver->functions.SPI_TransmitData(cmdBuff, KSZ_REG_CMD_BUFF_SIZE);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	691b      	ldr	r3, [r3, #16]
 8000ed6:	2215      	movs	r2, #21
 8000ed8:	18bc      	adds	r4, r7, r2
 8000eda:	187a      	adds	r2, r7, r1
 8000edc:	2104      	movs	r1, #4
 8000ede:	0010      	movs	r0, r2
 8000ee0:	4798      	blx	r3
 8000ee2:	0003      	movs	r3, r0
 8000ee4:	7023      	strb	r3, [r4, #0]

	/*Wait 1mS to be sure SPI packets send completely */
	tickStart = driver->functions.TIME_GetTick();
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	68db      	ldr	r3, [r3, #12]
 8000eea:	4798      	blx	r3
 8000eec:	0003      	movs	r3, r0
 8000eee:	613b      	str	r3, [r7, #16]
	while(driver->functions.TIME_GetTick() - tickStart < KSZ_TIME_WAIT_1MS);
 8000ef0:	46c0      	nop			; (mov r8, r8)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	68db      	ldr	r3, [r3, #12]
 8000ef6:	4798      	blx	r3
 8000ef8:	0002      	movs	r2, r0
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d0f8      	beq.n	8000ef2 <ksz8851_write_register+0xea>

	/*Make chip select output (NSS) pin low before SPI operation*/
	driver->functions.GPIO_Control(driver->interface.cs_port, driver->interface.cs_pin, KSZ_GPIO_PIN_SET);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	699c      	ldr	r4, [r3, #24]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6818      	ldr	r0, [r3, #0]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	891b      	ldrh	r3, [r3, #8]
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	0019      	movs	r1, r3
 8000f10:	47a0      	blx	r4

	return returnStatus;
 8000f12:	2315      	movs	r3, #21
 8000f14:	18fb      	adds	r3, r7, r3
 8000f16:	781b      	ldrb	r3, [r3, #0]
}
 8000f18:	0018      	movs	r0, r3
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	b006      	add	sp, #24
 8000f1e:	bdb0      	pop	{r4, r5, r7, pc}

08000f20 <ksz8851_hard_reset>:
/**
 * @brief Perform KSZ8851 hardware reset
 * @param driver
 */
void ksz8851_hard_reset(KSZ8851_t *driver)
{
 8000f20:	b590      	push	{r4, r7, lr}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
	uint32_t tickStart;
	/*Pull reset output of mcu LOW state. KSZ reset input is active low logic*/
	driver->functions.GPIO_Control(driver->interface.rst_port, driver->interface.rst_pin, KSZ_GPIO_PIN_RESET);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	699c      	ldr	r4, [r3, #24]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6858      	ldr	r0, [r3, #4]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	895b      	ldrh	r3, [r3, #10]
 8000f34:	2200      	movs	r2, #0
 8000f36:	0019      	movs	r1, r3
 8000f38:	47a0      	blx	r4

	/*Wait 1mS to be sure SPI packets send completely */
	tickStart = driver->functions.TIME_GetTick();
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	68db      	ldr	r3, [r3, #12]
 8000f3e:	4798      	blx	r3
 8000f40:	0003      	movs	r3, r0
 8000f42:	60fb      	str	r3, [r7, #12]
	while(driver->functions.TIME_GetTick() - tickStart < KSZ_TIME_WAIT_1MS);
 8000f44:	46c0      	nop			; (mov r8, r8)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	68db      	ldr	r3, [r3, #12]
 8000f4a:	4798      	blx	r3
 8000f4c:	0002      	movs	r2, r0
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d0f8      	beq.n	8000f46 <ksz8851_hard_reset+0x26>

	/*Make output HIGH*/
	driver->functions.GPIO_Control(driver->interface.rst_port, driver->interface.rst_pin, KSZ_GPIO_PIN_SET);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	699c      	ldr	r4, [r3, #24]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6858      	ldr	r0, [r3, #4]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	895b      	ldrh	r3, [r3, #10]
 8000f60:	2201      	movs	r2, #1
 8000f62:	0019      	movs	r1, r3
 8000f64:	47a0      	blx	r4

	tickStart = driver->functions.TIME_GetTick();
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	68db      	ldr	r3, [r3, #12]
 8000f6a:	4798      	blx	r3
 8000f6c:	0003      	movs	r3, r0
 8000f6e:	60fb      	str	r3, [r7, #12]
	while(driver->functions.TIME_GetTick() - tickStart < KSZ_TIME_WAIT_1MS);
 8000f70:	46c0      	nop			; (mov r8, r8)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	68db      	ldr	r3, [r3, #12]
 8000f76:	4798      	blx	r3
 8000f78:	0002      	movs	r2, r0
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d0f8      	beq.n	8000f72 <ksz8851_hard_reset+0x52>
}
 8000f80:	46c0      	nop			; (mov r8, r8)
 8000f82:	46bd      	mov	sp, r7
 8000f84:	b005      	add	sp, #20
 8000f86:	bd90      	pop	{r4, r7, pc}

08000f88 <ksz8851_init>:
* @param  MAC_address: Ethernet MAC address of the device.
* @param  callbacks: the callback functions defined by user in MCU layer to send data over SPI and to control MCU GPIO's (chip select and hardware reset)
* @retval status of init process
*/
uint8_t ksz8851_init(KSZ8851_t *driver, uint32_t cs_port, uint16_t cs_pin, uint32_t rst_port, uint16_t rst_pin, uint8_t *MAC_address, KSZ8851_Callbacks_t callbacks)
{
 8000f88:	b590      	push	{r4, r7, lr}
 8000f8a:	46c6      	mov	lr, r8
 8000f8c:	b500      	push	{lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	603b      	str	r3, [r7, #0]
 8000f98:	1dbb      	adds	r3, r7, #6
 8000f9a:	801a      	strh	r2, [r3, #0]
	uint16_t deviceID = 0;
 8000f9c:	2314      	movs	r3, #20
 8000f9e:	18fb      	adds	r3, r7, r3
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	801a      	strh	r2, [r3, #0]
	uint16_t tmpReadRegister;
	uint8_t tryCounter = 0;
 8000fa4:	2317      	movs	r3, #23
 8000fa6:	18fb      	adds	r3, r7, r3
 8000fa8:	2200      	movs	r2, #0
 8000faa:	701a      	strb	r2, [r3, #0]
	uint8_t returnValue = false;
 8000fac:	2316      	movs	r3, #22
 8000fae:	18fb      	adds	r3, r7, r3
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	701a      	strb	r2, [r3, #0]

	/* SPI's slave select GPIO parameters */
	driver->interface.cs_port 	= cs_port;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	68ba      	ldr	r2, [r7, #8]
 8000fb8:	601a      	str	r2, [r3, #0]
	driver->interface.cs_pin 	= cs_pin;
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	1dba      	adds	r2, r7, #6
 8000fbe:	8812      	ldrh	r2, [r2, #0]
 8000fc0:	811a      	strh	r2, [r3, #8]

	/* KSZ8851 NRST (hard reset) input's GPIO parameters */
	driver->interface.rst_port	= rst_port;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	683a      	ldr	r2, [r7, #0]
 8000fc6:	605a      	str	r2, [r3, #4]
	driver->interface.rst_pin	= rst_pin;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	2220      	movs	r2, #32
 8000fcc:	2108      	movs	r1, #8
 8000fce:	468c      	mov	ip, r1
 8000fd0:	44bc      	add	ip, r7
 8000fd2:	4462      	add	r2, ip
 8000fd4:	8812      	ldrh	r2, [r2, #0]
 8000fd6:	815a      	strh	r2, [r3, #10]

	/* Addresses of user callback functions to control SPI and GPIO */
	driver->functions 			= callbacks;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	2208      	movs	r2, #8
 8000fdc:	2120      	movs	r1, #32
 8000fde:	468c      	mov	ip, r1
 8000fe0:	2108      	movs	r1, #8
 8000fe2:	4688      	mov	r8, r1
 8000fe4:	44b8      	add	r8, r7
 8000fe6:	44c4      	add	ip, r8
 8000fe8:	4462      	add	r2, ip
 8000fea:	330c      	adds	r3, #12
 8000fec:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000fee:	c313      	stmia	r3!, {r0, r1, r4}
 8000ff0:	6812      	ldr	r2, [r2, #0]
 8000ff2:	601a      	str	r2, [r3, #0]

	memcpy((uint8_t*)driver->MAC_Address.bytes, (uint8_t*)MAC_address, KSZ_MAC_ADDRR_LEN);
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	331c      	adds	r3, #28
 8000ff8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000ffa:	2206      	movs	r2, #6
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	f002 fc1f 	bl	8003840 <memcpy>

	do
	{
		/* Step 1: Perform hard reset to KSZ8851SNL */
		ksz8851_hard_reset(driver);
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	0018      	movs	r0, r3
 8001006:	f7ff ff8b 	bl	8000f20 <ksz8851_hard_reset>

		/* Step 2: Perform global soft reset */

		/* Step 3: Read device ID to be sure device is KSZ8851SNL */
		ksz8851_read_register(driver, KSZ_REG_ADDR_CIDER0, &deviceID);
 800100a:	2414      	movs	r4, #20
 800100c:	193a      	adds	r2, r7, r4
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	21c0      	movs	r1, #192	; 0xc0
 8001012:	0018      	movs	r0, r3
 8001014:	f7ff fe6b 	bl	8000cee <ksz8851_read_register>

		tryCounter++;
 8001018:	2117      	movs	r1, #23
 800101a:	187b      	adds	r3, r7, r1
 800101c:	781a      	ldrb	r2, [r3, #0]
 800101e:	187b      	adds	r3, r7, r1
 8001020:	3201      	adds	r2, #1
 8001022:	701a      	strb	r2, [r3, #0]

	/* if received value don't match, do this 3 time */
	}while(((deviceID & KSZ_CHIP_ID_MASK) != KSZ_CHIP_ID) && tryCounter <= KSZ_PROCESS_TRY_LIMIT);
 8001024:	193b      	adds	r3, r7, r4
 8001026:	881b      	ldrh	r3, [r3, #0]
 8001028:	001a      	movs	r2, r3
 800102a:	4b58      	ldr	r3, [pc, #352]	; (800118c <ksz8851_init+0x204>)
 800102c:	4013      	ands	r3, r2
 800102e:	4a58      	ldr	r2, [pc, #352]	; (8001190 <ksz8851_init+0x208>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d004      	beq.n	800103e <ksz8851_init+0xb6>
 8001034:	2317      	movs	r3, #23
 8001036:	18fb      	adds	r3, r7, r3
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	2b03      	cmp	r3, #3
 800103c:	d9e1      	bls.n	8001002 <ksz8851_init+0x7a>

	tryCounter = 0;
 800103e:	2317      	movs	r3, #23
 8001040:	18fb      	adds	r3, r7, r3
 8001042:	2200      	movs	r2, #0
 8001044:	701a      	strb	r2, [r3, #0]

	/* Step 4: Write QMU MAC_Addres (low, middle, high) */
	ksz8851_write_register(driver, KSZ_REG_ADDR_MARL0, KSZ_BYTE_SWAP_U16(driver->MAC_Address.Group.low));
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	8c1b      	ldrh	r3, [r3, #32]
 800104a:	0a1b      	lsrs	r3, r3, #8
 800104c:	b29b      	uxth	r3, r3
 800104e:	b21a      	sxth	r2, r3
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	8c1b      	ldrh	r3, [r3, #32]
 8001054:	021b      	lsls	r3, r3, #8
 8001056:	b21b      	sxth	r3, r3
 8001058:	4313      	orrs	r3, r2
 800105a:	b21b      	sxth	r3, r3
 800105c:	b29a      	uxth	r2, r3
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	2110      	movs	r1, #16
 8001062:	0018      	movs	r0, r3
 8001064:	f7ff fed0 	bl	8000e08 <ksz8851_write_register>
	ksz8851_write_register(driver, KSZ_REG_ADDR_MARM0, KSZ_BYTE_SWAP_U16(driver->MAC_Address.Group.middle));
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	8bdb      	ldrh	r3, [r3, #30]
 800106c:	0a1b      	lsrs	r3, r3, #8
 800106e:	b29b      	uxth	r3, r3
 8001070:	b21a      	sxth	r2, r3
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	8bdb      	ldrh	r3, [r3, #30]
 8001076:	021b      	lsls	r3, r3, #8
 8001078:	b21b      	sxth	r3, r3
 800107a:	4313      	orrs	r3, r2
 800107c:	b21b      	sxth	r3, r3
 800107e:	b29a      	uxth	r2, r3
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	2112      	movs	r1, #18
 8001084:	0018      	movs	r0, r3
 8001086:	f7ff febf 	bl	8000e08 <ksz8851_write_register>
	ksz8851_write_register(driver, KSZ_REG_ADDR_MARH0, KSZ_BYTE_SWAP_U16(driver->MAC_Address.Group.high));
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	8b9b      	ldrh	r3, [r3, #28]
 800108e:	0a1b      	lsrs	r3, r3, #8
 8001090:	b29b      	uxth	r3, r3
 8001092:	b21a      	sxth	r2, r3
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	8b9b      	ldrh	r3, [r3, #28]
 8001098:	021b      	lsls	r3, r3, #8
 800109a:	b21b      	sxth	r3, r3
 800109c:	4313      	orrs	r3, r2
 800109e:	b21b      	sxth	r3, r3
 80010a0:	b29a      	uxth	r2, r3
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	2114      	movs	r1, #20
 80010a6:	0018      	movs	r0, r3
 80010a8:	f7ff feae 	bl	8000e08 <ksz8851_write_register>

	/* Step 5: Enable QMU transmit frame data pointer auto increment in TXFDPR */
	ksz8851_write_register(driver, KSZ_REG_ADDR_TXFDPR0, KSZ_CONFIG_TX_FR_DPOINTER_AUTO_INC);
 80010ac:	2380      	movs	r3, #128	; 0x80
 80010ae:	01da      	lsls	r2, r3, #7
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	2184      	movs	r1, #132	; 0x84
 80010b4:	0018      	movs	r0, r3
 80010b6:	f7ff fea7 	bl	8000e08 <ksz8851_write_register>

	/* Step 6: Enable QMU Transmit flow control / Transmit padding / Transmit CRC and IP/TCP/UDP checksum generation. */
	ksz8851_write_register(driver, KSZ_REG_ADDR_TXCR0,
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	22ee      	movs	r2, #238	; 0xee
 80010be:	2170      	movs	r1, #112	; 0x70
 80010c0:	0018      	movs	r0, r3
 80010c2:	f7ff fea1 	bl	8000e08 <ksz8851_write_register>
			KSZ_CONFIG_TX_CTRL_IP_CHECKSUM |
			KSZ_CONFIG_TX_CTRL_TCP_CHECKSUM |
			KSZ_CONFIG_TX_CTRL_UDP_CHECKSUM);

	/* Step 7: Enable QMU Receive Frame Data Pointer Auto Increment. */
	ksz8851_write_register(driver, KSZ_REG_ADDR_RXFDPR0, KSZ_CONFIG_RX_FR_DPOINTER_AUTO_INC);
 80010c6:	2380      	movs	r3, #128	; 0x80
 80010c8:	01da      	lsls	r2, r3, #7
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	2186      	movs	r1, #134	; 0x86
 80010ce:	0018      	movs	r0, r3
 80010d0:	f7ff fe9a 	bl	8000e08 <ksz8851_write_register>

	/* Step 8: Configure QMU Receive Frame Threshold for one frame. */
	ksz8851_write_register(driver, KSZ_REG_ADDR_RXFCTR0, KSZ_CONFIG_RX_FR_CTRL_THRESHOLD_1FR);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	2201      	movs	r2, #1
 80010d8:	219c      	movs	r1, #156	; 0x9c
 80010da:	0018      	movs	r0, r3
 80010dc:	f7ff fe94 	bl	8000e08 <ksz8851_write_register>

	/* Step 9: Receive unicast/multicast(all)/broadcast frames, enable rx flow control, MAC address filter, IP/TCP/UDP checksum verification */
	ksz8851_write_register(driver, KSZ_REG_ADDR_RXCR1_0,
 80010e0:	4a2c      	ldr	r2, [pc, #176]	; (8001194 <ksz8851_init+0x20c>)
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	2174      	movs	r1, #116	; 0x74
 80010e6:	0018      	movs	r0, r3
 80010e8:	f7ff fe8e 	bl	8000e08 <ksz8851_write_register>
			KSZ_CONFIG_RX_CTRL1_IP_CHECKSUM |
			KSZ_CONFIG_RX_CTRL1_TCP_CHECKSUM |
			KSZ_CONFIG_RX_CTRL1_UDP_CHECKSUM);

	/* Step 10: Enable QMU Receive UDP Lite frame checksum verification, UDP Lite frame checksum generation, IPv4/IPv6 UDP fragment frame pass, IPv4/IPv6 UDP UDP checksum field is zero pass, and single frame data burst */
	ksz8851_write_register(driver, KSZ_REG_ADDR_RXCR2_0,
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	229e      	movs	r2, #158	; 0x9e
 80010f0:	2176      	movs	r1, #118	; 0x76
 80010f2:	0018      	movs	r0, r3
 80010f4:	f7ff fe88 	bl	8000e08 <ksz8851_write_register>
			KSZ_CONFIG_RX_CTRL2_IPV6_UDP_CHECKSUM |
			KSZ_CONFIG_RX_CTRL2_IPV6_UDP_NOCHECKSUM |
			KSZ_CONFIG_RX_CTRL2_DATA_BURST_FR_LEN);

	/* Step 11: Enable QMU Receive IP Header Two-Byte Offset /Receive Frame Count Threshold/RXQ Auto-Dequeue frame */
	ksz8851_write_register(driver, KSZ_REG_ADDR_RXQCR0,
 80010f8:	238c      	movs	r3, #140	; 0x8c
 80010fa:	009a      	lsls	r2, r3, #2
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	2182      	movs	r1, #130	; 0x82
 8001100:	0018      	movs	r0, r3
 8001102:	f7ff fe81 	bl	8000e08 <ksz8851_write_register>
			KSZ_CONFIG_RX_CMD_AUTO_DEQUEUE_RXQ |
			KSZ_CONFIG_RX_CMD_FR_COUNT_THR_INT_ENABLE |
			KSZ_CONFIG_RX_CMD_IP_TWOBYTE_OFFSET_ENABLE);

	/* Step 12: Adjusts SPI Data Output (SO) Delay according to SPI master controller configuration. Adjust pin strength */
	ksz8851_write_register(driver, KSZ_REG_ADDR_OBCR0,
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	2200      	movs	r2, #0
 800110a:	2120      	movs	r1, #32
 800110c:	0018      	movs	r0, r3
 800110e:	f7ff fe7b 	bl	8000e08 <ksz8851_write_register>
			KSZ_CONFIG_ONCHIP_BUS_CLK_DIVIDEBY_1 |
			KSZ_CONFIG_ONCHIP_BUS_CLK_125MHZ |
			KSZ_CONFIG_ONCHIP_BUS_PIN_STRENG_8MA);

	/* Step 13: Restart Port 1 auto-negotiation */
	ksz8851_write_register(driver, KSZ_REG_ADDR_P1CR0, KSZ_CONFIG_PORT_AUTO_NEG_RESTART);
 8001112:	2380      	movs	r3, #128	; 0x80
 8001114:	019a      	lsls	r2, r3, #6
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	21f6      	movs	r1, #246	; 0xf6
 800111a:	0018      	movs	r0, r3
 800111c:	f7ff fe74 	bl	8000e08 <ksz8851_write_register>

	/* Step 13.1: Force link in half duplex if auto-negotiation is failed (e.g. KSZ8851 is connected to the Hub) */
	ksz8851_read_register(driver, KSZ_REG_ADDR_P1CR0, &tmpReadRegister);
 8001120:	2412      	movs	r4, #18
 8001122:	193a      	adds	r2, r7, r4
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	21f6      	movs	r1, #246	; 0xf6
 8001128:	0018      	movs	r0, r3
 800112a:	f7ff fde0 	bl	8000cee <ksz8851_read_register>

	if((tmpReadRegister & KSZ_CONFIG_PORT_AUTO_NEG_RESTART) != KSZ_CONFIG_PORT_AUTO_NEG_RESTART)
 800112e:	193b      	adds	r3, r7, r4
 8001130:	881b      	ldrh	r3, [r3, #0]
 8001132:	001a      	movs	r2, r3
 8001134:	2380      	movs	r3, #128	; 0x80
 8001136:	019b      	lsls	r3, r3, #6
 8001138:	4013      	ands	r3, r2
 800113a:	d10a      	bne.n	8001152 <ksz8851_init+0x1ca>
	{
		ksz8851_write_register(driver, KSZ_REG_ADDR_P1CR0, (tmpReadRegister | KSZ_CONFIG_PORT_FORCE_FULL_DUPLEX));		// force PHY in full duplex mdoe
 800113c:	2312      	movs	r3, #18
 800113e:	18fb      	adds	r3, r7, r3
 8001140:	881b      	ldrh	r3, [r3, #0]
 8001142:	2220      	movs	r2, #32
 8001144:	4313      	orrs	r3, r2
 8001146:	b29a      	uxth	r2, r3
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	21f6      	movs	r1, #246	; 0xf6
 800114c:	0018      	movs	r0, r3
 800114e:	f7ff fe5b 	bl	8000e08 <ksz8851_write_register>
	}

	/* Step 14: Clear the interrupts status */
	ksz8851_write_register(driver, KSZ_REG_ADDR_ISR0, KSZ_FLAGS_INTERRUPTS_ALL_CLEAR);
 8001152:	4a11      	ldr	r2, [pc, #68]	; (8001198 <ksz8851_init+0x210>)
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	2192      	movs	r1, #146	; 0x92
 8001158:	0018      	movs	r0, r3
 800115a:	f7ff fe55 	bl	8000e08 <ksz8851_write_register>

	/* Step 14.1: */
	ksz8851_write_register(driver, KSZ_REG_ADDR_FCLWR0, KSZ_CONFIG_WATERMARK_4KB);
 800115e:	2380      	movs	r3, #128	; 0x80
 8001160:	00da      	lsls	r2, r3, #3
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	21b0      	movs	r1, #176	; 0xb0
 8001166:	0018      	movs	r0, r3
 8001168:	f7ff fe4e 	bl	8000e08 <ksz8851_write_register>

	/* Step 14.2: */
	ksz8851_write_register(driver, KSZ_REG_ADDR_FCHWR0, KSZ_CONFIG_WATERMARK_6KB);
 800116c:	23c0      	movs	r3, #192	; 0xc0
 800116e:	00da      	lsls	r2, r3, #3
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	21b2      	movs	r1, #178	; 0xb2
 8001174:	0018      	movs	r0, r3
 8001176:	f7ff fe47 	bl	8000e08 <ksz8851_write_register>
	/* Step 22: */




	return returnValue;
 800117a:	2316      	movs	r3, #22
 800117c:	18fb      	adds	r3, r7, r3
 800117e:	781b      	ldrb	r3, [r3, #0]
}
 8001180:	0018      	movs	r0, r3
 8001182:	46bd      	mov	sp, r7
 8001184:	b006      	add	sp, #24
 8001186:	bc04      	pop	{r2}
 8001188:	4690      	mov	r8, r2
 800118a:	bd90      	pop	{r4, r7, pc}
 800118c:	0000fff0 	.word	0x0000fff0
 8001190:	00008870 	.word	0x00008870
 8001194:	00007ce0 	.word	0x00007ce0
 8001198:	0000ffff 	.word	0x0000ffff

0800119c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011a0:	4b07      	ldr	r3, [pc, #28]	; (80011c0 <HAL_Init+0x24>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <HAL_Init+0x24>)
 80011a6:	2110      	movs	r1, #16
 80011a8:	430a      	orrs	r2, r1
 80011aa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80011ac:	2000      	movs	r0, #0
 80011ae:	f000 f809 	bl	80011c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011b2:	f7ff fc3d 	bl	8000a30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011b6:	2300      	movs	r3, #0
}
 80011b8:	0018      	movs	r0, r3
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	46c0      	nop			; (mov r8, r8)
 80011c0:	40022000 	.word	0x40022000

080011c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c4:	b590      	push	{r4, r7, lr}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011cc:	4b14      	ldr	r3, [pc, #80]	; (8001220 <HAL_InitTick+0x5c>)
 80011ce:	681c      	ldr	r4, [r3, #0]
 80011d0:	4b14      	ldr	r3, [pc, #80]	; (8001224 <HAL_InitTick+0x60>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	0019      	movs	r1, r3
 80011d6:	23fa      	movs	r3, #250	; 0xfa
 80011d8:	0098      	lsls	r0, r3, #2
 80011da:	f7fe ff93 	bl	8000104 <__udivsi3>
 80011de:	0003      	movs	r3, r0
 80011e0:	0019      	movs	r1, r3
 80011e2:	0020      	movs	r0, r4
 80011e4:	f7fe ff8e 	bl	8000104 <__udivsi3>
 80011e8:	0003      	movs	r3, r0
 80011ea:	0018      	movs	r0, r3
 80011ec:	f000 f903 	bl	80013f6 <HAL_SYSTICK_Config>
 80011f0:	1e03      	subs	r3, r0, #0
 80011f2:	d001      	beq.n	80011f8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	e00f      	b.n	8001218 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2b03      	cmp	r3, #3
 80011fc:	d80b      	bhi.n	8001216 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011fe:	6879      	ldr	r1, [r7, #4]
 8001200:	2301      	movs	r3, #1
 8001202:	425b      	negs	r3, r3
 8001204:	2200      	movs	r2, #0
 8001206:	0018      	movs	r0, r3
 8001208:	f000 f8e0 	bl	80013cc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800120c:	4b06      	ldr	r3, [pc, #24]	; (8001228 <HAL_InitTick+0x64>)
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001212:	2300      	movs	r3, #0
 8001214:	e000      	b.n	8001218 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
}
 8001218:	0018      	movs	r0, r3
 800121a:	46bd      	mov	sp, r7
 800121c:	b003      	add	sp, #12
 800121e:	bd90      	pop	{r4, r7, pc}
 8001220:	20000018 	.word	0x20000018
 8001224:	20000020 	.word	0x20000020
 8001228:	2000001c 	.word	0x2000001c

0800122c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001230:	4b05      	ldr	r3, [pc, #20]	; (8001248 <HAL_IncTick+0x1c>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	001a      	movs	r2, r3
 8001236:	4b05      	ldr	r3, [pc, #20]	; (800124c <HAL_IncTick+0x20>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	18d2      	adds	r2, r2, r3
 800123c:	4b03      	ldr	r3, [pc, #12]	; (800124c <HAL_IncTick+0x20>)
 800123e:	601a      	str	r2, [r3, #0]
}
 8001240:	46c0      	nop			; (mov r8, r8)
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	46c0      	nop			; (mov r8, r8)
 8001248:	20000020 	.word	0x20000020
 800124c:	200001e4 	.word	0x200001e4

08001250 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  return uwTick;
 8001254:	4b02      	ldr	r3, [pc, #8]	; (8001260 <HAL_GetTick+0x10>)
 8001256:	681b      	ldr	r3, [r3, #0]
}
 8001258:	0018      	movs	r0, r3
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	46c0      	nop			; (mov r8, r8)
 8001260:	200001e4 	.word	0x200001e4

08001264 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800126c:	f7ff fff0 	bl	8001250 <HAL_GetTick>
 8001270:	0003      	movs	r3, r0
 8001272:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	3301      	adds	r3, #1
 800127c:	d005      	beq.n	800128a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800127e:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <HAL_Delay+0x40>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	001a      	movs	r2, r3
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	189b      	adds	r3, r3, r2
 8001288:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800128a:	46c0      	nop			; (mov r8, r8)
 800128c:	f7ff ffe0 	bl	8001250 <HAL_GetTick>
 8001290:	0002      	movs	r2, r0
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	68fa      	ldr	r2, [r7, #12]
 8001298:	429a      	cmp	r2, r3
 800129a:	d8f7      	bhi.n	800128c <HAL_Delay+0x28>
  {
  }
}
 800129c:	46c0      	nop			; (mov r8, r8)
 800129e:	46bd      	mov	sp, r7
 80012a0:	b004      	add	sp, #16
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20000020 	.word	0x20000020

080012a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012a8:	b590      	push	{r4, r7, lr}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	0002      	movs	r2, r0
 80012b0:	6039      	str	r1, [r7, #0]
 80012b2:	1dfb      	adds	r3, r7, #7
 80012b4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80012b6:	1dfb      	adds	r3, r7, #7
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2b7f      	cmp	r3, #127	; 0x7f
 80012bc:	d828      	bhi.n	8001310 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012be:	4a2f      	ldr	r2, [pc, #188]	; (800137c <__NVIC_SetPriority+0xd4>)
 80012c0:	1dfb      	adds	r3, r7, #7
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	b25b      	sxtb	r3, r3
 80012c6:	089b      	lsrs	r3, r3, #2
 80012c8:	33c0      	adds	r3, #192	; 0xc0
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	589b      	ldr	r3, [r3, r2]
 80012ce:	1dfa      	adds	r2, r7, #7
 80012d0:	7812      	ldrb	r2, [r2, #0]
 80012d2:	0011      	movs	r1, r2
 80012d4:	2203      	movs	r2, #3
 80012d6:	400a      	ands	r2, r1
 80012d8:	00d2      	lsls	r2, r2, #3
 80012da:	21ff      	movs	r1, #255	; 0xff
 80012dc:	4091      	lsls	r1, r2
 80012de:	000a      	movs	r2, r1
 80012e0:	43d2      	mvns	r2, r2
 80012e2:	401a      	ands	r2, r3
 80012e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	019b      	lsls	r3, r3, #6
 80012ea:	22ff      	movs	r2, #255	; 0xff
 80012ec:	401a      	ands	r2, r3
 80012ee:	1dfb      	adds	r3, r7, #7
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	0018      	movs	r0, r3
 80012f4:	2303      	movs	r3, #3
 80012f6:	4003      	ands	r3, r0
 80012f8:	00db      	lsls	r3, r3, #3
 80012fa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012fc:	481f      	ldr	r0, [pc, #124]	; (800137c <__NVIC_SetPriority+0xd4>)
 80012fe:	1dfb      	adds	r3, r7, #7
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	b25b      	sxtb	r3, r3
 8001304:	089b      	lsrs	r3, r3, #2
 8001306:	430a      	orrs	r2, r1
 8001308:	33c0      	adds	r3, #192	; 0xc0
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800130e:	e031      	b.n	8001374 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001310:	4a1b      	ldr	r2, [pc, #108]	; (8001380 <__NVIC_SetPriority+0xd8>)
 8001312:	1dfb      	adds	r3, r7, #7
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	0019      	movs	r1, r3
 8001318:	230f      	movs	r3, #15
 800131a:	400b      	ands	r3, r1
 800131c:	3b08      	subs	r3, #8
 800131e:	089b      	lsrs	r3, r3, #2
 8001320:	3306      	adds	r3, #6
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	18d3      	adds	r3, r2, r3
 8001326:	3304      	adds	r3, #4
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	1dfa      	adds	r2, r7, #7
 800132c:	7812      	ldrb	r2, [r2, #0]
 800132e:	0011      	movs	r1, r2
 8001330:	2203      	movs	r2, #3
 8001332:	400a      	ands	r2, r1
 8001334:	00d2      	lsls	r2, r2, #3
 8001336:	21ff      	movs	r1, #255	; 0xff
 8001338:	4091      	lsls	r1, r2
 800133a:	000a      	movs	r2, r1
 800133c:	43d2      	mvns	r2, r2
 800133e:	401a      	ands	r2, r3
 8001340:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	019b      	lsls	r3, r3, #6
 8001346:	22ff      	movs	r2, #255	; 0xff
 8001348:	401a      	ands	r2, r3
 800134a:	1dfb      	adds	r3, r7, #7
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	0018      	movs	r0, r3
 8001350:	2303      	movs	r3, #3
 8001352:	4003      	ands	r3, r0
 8001354:	00db      	lsls	r3, r3, #3
 8001356:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001358:	4809      	ldr	r0, [pc, #36]	; (8001380 <__NVIC_SetPriority+0xd8>)
 800135a:	1dfb      	adds	r3, r7, #7
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	001c      	movs	r4, r3
 8001360:	230f      	movs	r3, #15
 8001362:	4023      	ands	r3, r4
 8001364:	3b08      	subs	r3, #8
 8001366:	089b      	lsrs	r3, r3, #2
 8001368:	430a      	orrs	r2, r1
 800136a:	3306      	adds	r3, #6
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	18c3      	adds	r3, r0, r3
 8001370:	3304      	adds	r3, #4
 8001372:	601a      	str	r2, [r3, #0]
}
 8001374:	46c0      	nop			; (mov r8, r8)
 8001376:	46bd      	mov	sp, r7
 8001378:	b003      	add	sp, #12
 800137a:	bd90      	pop	{r4, r7, pc}
 800137c:	e000e100 	.word	0xe000e100
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	3b01      	subs	r3, #1
 8001390:	4a0c      	ldr	r2, [pc, #48]	; (80013c4 <SysTick_Config+0x40>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d901      	bls.n	800139a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001396:	2301      	movs	r3, #1
 8001398:	e010      	b.n	80013bc <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800139a:	4b0b      	ldr	r3, [pc, #44]	; (80013c8 <SysTick_Config+0x44>)
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	3a01      	subs	r2, #1
 80013a0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013a2:	2301      	movs	r3, #1
 80013a4:	425b      	negs	r3, r3
 80013a6:	2103      	movs	r1, #3
 80013a8:	0018      	movs	r0, r3
 80013aa:	f7ff ff7d 	bl	80012a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013ae:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <SysTick_Config+0x44>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013b4:	4b04      	ldr	r3, [pc, #16]	; (80013c8 <SysTick_Config+0x44>)
 80013b6:	2207      	movs	r2, #7
 80013b8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013ba:	2300      	movs	r3, #0
}
 80013bc:	0018      	movs	r0, r3
 80013be:	46bd      	mov	sp, r7
 80013c0:	b002      	add	sp, #8
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	00ffffff 	.word	0x00ffffff
 80013c8:	e000e010 	.word	0xe000e010

080013cc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60b9      	str	r1, [r7, #8]
 80013d4:	607a      	str	r2, [r7, #4]
 80013d6:	210f      	movs	r1, #15
 80013d8:	187b      	adds	r3, r7, r1
 80013da:	1c02      	adds	r2, r0, #0
 80013dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80013de:	68ba      	ldr	r2, [r7, #8]
 80013e0:	187b      	adds	r3, r7, r1
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	b25b      	sxtb	r3, r3
 80013e6:	0011      	movs	r1, r2
 80013e8:	0018      	movs	r0, r3
 80013ea:	f7ff ff5d 	bl	80012a8 <__NVIC_SetPriority>
}
 80013ee:	46c0      	nop			; (mov r8, r8)
 80013f0:	46bd      	mov	sp, r7
 80013f2:	b004      	add	sp, #16
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b082      	sub	sp, #8
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	0018      	movs	r0, r3
 8001402:	f7ff ffbf 	bl	8001384 <SysTick_Config>
 8001406:	0003      	movs	r3, r0
}
 8001408:	0018      	movs	r0, r3
 800140a:	46bd      	mov	sp, r7
 800140c:	b002      	add	sp, #8
 800140e:	bd80      	pop	{r7, pc}

08001410 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800141a:	2300      	movs	r3, #0
 800141c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800141e:	e155      	b.n	80016cc <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2101      	movs	r1, #1
 8001426:	697a      	ldr	r2, [r7, #20]
 8001428:	4091      	lsls	r1, r2
 800142a:	000a      	movs	r2, r1
 800142c:	4013      	ands	r3, r2
 800142e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d100      	bne.n	8001438 <HAL_GPIO_Init+0x28>
 8001436:	e146      	b.n	80016c6 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	2b02      	cmp	r3, #2
 800143e:	d003      	beq.n	8001448 <HAL_GPIO_Init+0x38>
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	2b12      	cmp	r3, #18
 8001446:	d123      	bne.n	8001490 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	08da      	lsrs	r2, r3, #3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	3208      	adds	r2, #8
 8001450:	0092      	lsls	r2, r2, #2
 8001452:	58d3      	ldr	r3, [r2, r3]
 8001454:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	2207      	movs	r2, #7
 800145a:	4013      	ands	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	220f      	movs	r2, #15
 8001460:	409a      	lsls	r2, r3
 8001462:	0013      	movs	r3, r2
 8001464:	43da      	mvns	r2, r3
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	4013      	ands	r3, r2
 800146a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	691a      	ldr	r2, [r3, #16]
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	2107      	movs	r1, #7
 8001474:	400b      	ands	r3, r1
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	409a      	lsls	r2, r3
 800147a:	0013      	movs	r3, r2
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	4313      	orrs	r3, r2
 8001480:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	08da      	lsrs	r2, r3, #3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	3208      	adds	r2, #8
 800148a:	0092      	lsls	r2, r2, #2
 800148c:	6939      	ldr	r1, [r7, #16]
 800148e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	2203      	movs	r2, #3
 800149c:	409a      	lsls	r2, r3
 800149e:	0013      	movs	r3, r2
 80014a0:	43da      	mvns	r2, r3
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	4013      	ands	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	2203      	movs	r2, #3
 80014ae:	401a      	ands	r2, r3
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	409a      	lsls	r2, r3
 80014b6:	0013      	movs	r3, r2
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d00b      	beq.n	80014e4 <HAL_GPIO_Init+0xd4>
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d007      	beq.n	80014e4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014d8:	2b11      	cmp	r3, #17
 80014da:	d003      	beq.n	80014e4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	2b12      	cmp	r3, #18
 80014e2:	d130      	bne.n	8001546 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	2203      	movs	r2, #3
 80014f0:	409a      	lsls	r2, r3
 80014f2:	0013      	movs	r3, r2
 80014f4:	43da      	mvns	r2, r3
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	4013      	ands	r3, r2
 80014fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	68da      	ldr	r2, [r3, #12]
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	409a      	lsls	r2, r3
 8001506:	0013      	movs	r3, r2
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	4313      	orrs	r3, r2
 800150c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800151a:	2201      	movs	r2, #1
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	409a      	lsls	r2, r3
 8001520:	0013      	movs	r3, r2
 8001522:	43da      	mvns	r2, r3
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	4013      	ands	r3, r2
 8001528:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	091b      	lsrs	r3, r3, #4
 8001530:	2201      	movs	r2, #1
 8001532:	401a      	ands	r2, r3
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	409a      	lsls	r2, r3
 8001538:	0013      	movs	r3, r2
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	4313      	orrs	r3, r2
 800153e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	2203      	movs	r2, #3
 8001552:	409a      	lsls	r2, r3
 8001554:	0013      	movs	r3, r2
 8001556:	43da      	mvns	r2, r3
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	4013      	ands	r3, r2
 800155c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	689a      	ldr	r2, [r3, #8]
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	409a      	lsls	r2, r3
 8001568:	0013      	movs	r3, r2
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	4313      	orrs	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685a      	ldr	r2, [r3, #4]
 800157a:	2380      	movs	r3, #128	; 0x80
 800157c:	055b      	lsls	r3, r3, #21
 800157e:	4013      	ands	r3, r2
 8001580:	d100      	bne.n	8001584 <HAL_GPIO_Init+0x174>
 8001582:	e0a0      	b.n	80016c6 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001584:	4b57      	ldr	r3, [pc, #348]	; (80016e4 <HAL_GPIO_Init+0x2d4>)
 8001586:	699a      	ldr	r2, [r3, #24]
 8001588:	4b56      	ldr	r3, [pc, #344]	; (80016e4 <HAL_GPIO_Init+0x2d4>)
 800158a:	2101      	movs	r1, #1
 800158c:	430a      	orrs	r2, r1
 800158e:	619a      	str	r2, [r3, #24]
 8001590:	4b54      	ldr	r3, [pc, #336]	; (80016e4 <HAL_GPIO_Init+0x2d4>)
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	2201      	movs	r2, #1
 8001596:	4013      	ands	r3, r2
 8001598:	60bb      	str	r3, [r7, #8]
 800159a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800159c:	4a52      	ldr	r2, [pc, #328]	; (80016e8 <HAL_GPIO_Init+0x2d8>)
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	089b      	lsrs	r3, r3, #2
 80015a2:	3302      	adds	r3, #2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	589b      	ldr	r3, [r3, r2]
 80015a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	2203      	movs	r2, #3
 80015ae:	4013      	ands	r3, r2
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	220f      	movs	r2, #15
 80015b4:	409a      	lsls	r2, r3
 80015b6:	0013      	movs	r3, r2
 80015b8:	43da      	mvns	r2, r3
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	4013      	ands	r3, r2
 80015be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	2390      	movs	r3, #144	; 0x90
 80015c4:	05db      	lsls	r3, r3, #23
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d019      	beq.n	80015fe <HAL_GPIO_Init+0x1ee>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a47      	ldr	r2, [pc, #284]	; (80016ec <HAL_GPIO_Init+0x2dc>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d013      	beq.n	80015fa <HAL_GPIO_Init+0x1ea>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a46      	ldr	r2, [pc, #280]	; (80016f0 <HAL_GPIO_Init+0x2e0>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d00d      	beq.n	80015f6 <HAL_GPIO_Init+0x1e6>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a45      	ldr	r2, [pc, #276]	; (80016f4 <HAL_GPIO_Init+0x2e4>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d007      	beq.n	80015f2 <HAL_GPIO_Init+0x1e2>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a44      	ldr	r2, [pc, #272]	; (80016f8 <HAL_GPIO_Init+0x2e8>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d101      	bne.n	80015ee <HAL_GPIO_Init+0x1de>
 80015ea:	2304      	movs	r3, #4
 80015ec:	e008      	b.n	8001600 <HAL_GPIO_Init+0x1f0>
 80015ee:	2305      	movs	r3, #5
 80015f0:	e006      	b.n	8001600 <HAL_GPIO_Init+0x1f0>
 80015f2:	2303      	movs	r3, #3
 80015f4:	e004      	b.n	8001600 <HAL_GPIO_Init+0x1f0>
 80015f6:	2302      	movs	r3, #2
 80015f8:	e002      	b.n	8001600 <HAL_GPIO_Init+0x1f0>
 80015fa:	2301      	movs	r3, #1
 80015fc:	e000      	b.n	8001600 <HAL_GPIO_Init+0x1f0>
 80015fe:	2300      	movs	r3, #0
 8001600:	697a      	ldr	r2, [r7, #20]
 8001602:	2103      	movs	r1, #3
 8001604:	400a      	ands	r2, r1
 8001606:	0092      	lsls	r2, r2, #2
 8001608:	4093      	lsls	r3, r2
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	4313      	orrs	r3, r2
 800160e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001610:	4935      	ldr	r1, [pc, #212]	; (80016e8 <HAL_GPIO_Init+0x2d8>)
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	089b      	lsrs	r3, r3, #2
 8001616:	3302      	adds	r3, #2
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800161e:	4b37      	ldr	r3, [pc, #220]	; (80016fc <HAL_GPIO_Init+0x2ec>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	43da      	mvns	r2, r3
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	4013      	ands	r3, r2
 800162c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685a      	ldr	r2, [r3, #4]
 8001632:	2380      	movs	r3, #128	; 0x80
 8001634:	025b      	lsls	r3, r3, #9
 8001636:	4013      	ands	r3, r2
 8001638:	d003      	beq.n	8001642 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	4313      	orrs	r3, r2
 8001640:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001642:	4b2e      	ldr	r3, [pc, #184]	; (80016fc <HAL_GPIO_Init+0x2ec>)
 8001644:	693a      	ldr	r2, [r7, #16]
 8001646:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001648:	4b2c      	ldr	r3, [pc, #176]	; (80016fc <HAL_GPIO_Init+0x2ec>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	43da      	mvns	r2, r3
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	4013      	ands	r3, r2
 8001656:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685a      	ldr	r2, [r3, #4]
 800165c:	2380      	movs	r3, #128	; 0x80
 800165e:	029b      	lsls	r3, r3, #10
 8001660:	4013      	ands	r3, r2
 8001662:	d003      	beq.n	800166c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	4313      	orrs	r3, r2
 800166a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800166c:	4b23      	ldr	r3, [pc, #140]	; (80016fc <HAL_GPIO_Init+0x2ec>)
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001672:	4b22      	ldr	r3, [pc, #136]	; (80016fc <HAL_GPIO_Init+0x2ec>)
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	43da      	mvns	r2, r3
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	4013      	ands	r3, r2
 8001680:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685a      	ldr	r2, [r3, #4]
 8001686:	2380      	movs	r3, #128	; 0x80
 8001688:	035b      	lsls	r3, r3, #13
 800168a:	4013      	ands	r3, r2
 800168c:	d003      	beq.n	8001696 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	4313      	orrs	r3, r2
 8001694:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001696:	4b19      	ldr	r3, [pc, #100]	; (80016fc <HAL_GPIO_Init+0x2ec>)
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800169c:	4b17      	ldr	r3, [pc, #92]	; (80016fc <HAL_GPIO_Init+0x2ec>)
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	43da      	mvns	r2, r3
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	4013      	ands	r3, r2
 80016aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685a      	ldr	r2, [r3, #4]
 80016b0:	2380      	movs	r3, #128	; 0x80
 80016b2:	039b      	lsls	r3, r3, #14
 80016b4:	4013      	ands	r3, r2
 80016b6:	d003      	beq.n	80016c0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80016b8:	693a      	ldr	r2, [r7, #16]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	4313      	orrs	r3, r2
 80016be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80016c0:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <HAL_GPIO_Init+0x2ec>)
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	3301      	adds	r3, #1
 80016ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	40da      	lsrs	r2, r3
 80016d4:	1e13      	subs	r3, r2, #0
 80016d6:	d000      	beq.n	80016da <HAL_GPIO_Init+0x2ca>
 80016d8:	e6a2      	b.n	8001420 <HAL_GPIO_Init+0x10>
  } 
}
 80016da:	46c0      	nop			; (mov r8, r8)
 80016dc:	46bd      	mov	sp, r7
 80016de:	b006      	add	sp, #24
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	46c0      	nop			; (mov r8, r8)
 80016e4:	40021000 	.word	0x40021000
 80016e8:	40010000 	.word	0x40010000
 80016ec:	48000400 	.word	0x48000400
 80016f0:	48000800 	.word	0x48000800
 80016f4:	48000c00 	.word	0x48000c00
 80016f8:	48001000 	.word	0x48001000
 80016fc:	40010400 	.word	0x40010400

08001700 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	000a      	movs	r2, r1
 800170a:	1cbb      	adds	r3, r7, #2
 800170c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	691b      	ldr	r3, [r3, #16]
 8001712:	1cba      	adds	r2, r7, #2
 8001714:	8812      	ldrh	r2, [r2, #0]
 8001716:	4013      	ands	r3, r2
 8001718:	d004      	beq.n	8001724 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800171a:	230f      	movs	r3, #15
 800171c:	18fb      	adds	r3, r7, r3
 800171e:	2201      	movs	r2, #1
 8001720:	701a      	strb	r2, [r3, #0]
 8001722:	e003      	b.n	800172c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001724:	230f      	movs	r3, #15
 8001726:	18fb      	adds	r3, r7, r3
 8001728:	2200      	movs	r2, #0
 800172a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800172c:	230f      	movs	r3, #15
 800172e:	18fb      	adds	r3, r7, r3
 8001730:	781b      	ldrb	r3, [r3, #0]
  }
 8001732:	0018      	movs	r0, r3
 8001734:	46bd      	mov	sp, r7
 8001736:	b004      	add	sp, #16
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b082      	sub	sp, #8
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
 8001742:	0008      	movs	r0, r1
 8001744:	0011      	movs	r1, r2
 8001746:	1cbb      	adds	r3, r7, #2
 8001748:	1c02      	adds	r2, r0, #0
 800174a:	801a      	strh	r2, [r3, #0]
 800174c:	1c7b      	adds	r3, r7, #1
 800174e:	1c0a      	adds	r2, r1, #0
 8001750:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001752:	1c7b      	adds	r3, r7, #1
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d004      	beq.n	8001764 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800175a:	1cbb      	adds	r3, r7, #2
 800175c:	881a      	ldrh	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001762:	e003      	b.n	800176c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001764:	1cbb      	adds	r3, r7, #2
 8001766:	881a      	ldrh	r2, [r3, #0]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800176c:	46c0      	nop			; (mov r8, r8)
 800176e:	46bd      	mov	sp, r7
 8001770:	b002      	add	sp, #8
 8001772:	bd80      	pop	{r7, pc}

08001774 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	000a      	movs	r2, r1
 800177e:	1cbb      	adds	r3, r7, #2
 8001780:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	695b      	ldr	r3, [r3, #20]
 8001786:	1cba      	adds	r2, r7, #2
 8001788:	8812      	ldrh	r2, [r2, #0]
 800178a:	4013      	ands	r3, r2
 800178c:	d005      	beq.n	800179a <HAL_GPIO_TogglePin+0x26>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800178e:	1cbb      	adds	r3, r7, #2
 8001790:	881b      	ldrh	r3, [r3, #0]
 8001792:	041a      	lsls	r2, r3, #16
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001798:	e003      	b.n	80017a2 <HAL_GPIO_TogglePin+0x2e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800179a:	1cbb      	adds	r3, r7, #2
 800179c:	881a      	ldrh	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	619a      	str	r2, [r3, #24]
}
 80017a2:	46c0      	nop			; (mov r8, r8)
 80017a4:	46bd      	mov	sp, r7
 80017a6:	b002      	add	sp, #8
 80017a8:	bd80      	pop	{r7, pc}
	...

080017ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b088      	sub	sp, #32
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d102      	bne.n	80017c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	f000 fb76 	bl	8001eac <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2201      	movs	r2, #1
 80017c6:	4013      	ands	r3, r2
 80017c8:	d100      	bne.n	80017cc <HAL_RCC_OscConfig+0x20>
 80017ca:	e08e      	b.n	80018ea <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80017cc:	4bc5      	ldr	r3, [pc, #788]	; (8001ae4 <HAL_RCC_OscConfig+0x338>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	220c      	movs	r2, #12
 80017d2:	4013      	ands	r3, r2
 80017d4:	2b04      	cmp	r3, #4
 80017d6:	d00e      	beq.n	80017f6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017d8:	4bc2      	ldr	r3, [pc, #776]	; (8001ae4 <HAL_RCC_OscConfig+0x338>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	220c      	movs	r2, #12
 80017de:	4013      	ands	r3, r2
 80017e0:	2b08      	cmp	r3, #8
 80017e2:	d117      	bne.n	8001814 <HAL_RCC_OscConfig+0x68>
 80017e4:	4bbf      	ldr	r3, [pc, #764]	; (8001ae4 <HAL_RCC_OscConfig+0x338>)
 80017e6:	685a      	ldr	r2, [r3, #4]
 80017e8:	23c0      	movs	r3, #192	; 0xc0
 80017ea:	025b      	lsls	r3, r3, #9
 80017ec:	401a      	ands	r2, r3
 80017ee:	2380      	movs	r3, #128	; 0x80
 80017f0:	025b      	lsls	r3, r3, #9
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d10e      	bne.n	8001814 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017f6:	4bbb      	ldr	r3, [pc, #748]	; (8001ae4 <HAL_RCC_OscConfig+0x338>)
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	2380      	movs	r3, #128	; 0x80
 80017fc:	029b      	lsls	r3, r3, #10
 80017fe:	4013      	ands	r3, r2
 8001800:	d100      	bne.n	8001804 <HAL_RCC_OscConfig+0x58>
 8001802:	e071      	b.n	80018e8 <HAL_RCC_OscConfig+0x13c>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d000      	beq.n	800180e <HAL_RCC_OscConfig+0x62>
 800180c:	e06c      	b.n	80018e8 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	f000 fb4c 	bl	8001eac <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d107      	bne.n	800182c <HAL_RCC_OscConfig+0x80>
 800181c:	4bb1      	ldr	r3, [pc, #708]	; (8001ae4 <HAL_RCC_OscConfig+0x338>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	4bb0      	ldr	r3, [pc, #704]	; (8001ae4 <HAL_RCC_OscConfig+0x338>)
 8001822:	2180      	movs	r1, #128	; 0x80
 8001824:	0249      	lsls	r1, r1, #9
 8001826:	430a      	orrs	r2, r1
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	e02f      	b.n	800188c <HAL_RCC_OscConfig+0xe0>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d10c      	bne.n	800184e <HAL_RCC_OscConfig+0xa2>
 8001834:	4bab      	ldr	r3, [pc, #684]	; (8001ae4 <HAL_RCC_OscConfig+0x338>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	4baa      	ldr	r3, [pc, #680]	; (8001ae4 <HAL_RCC_OscConfig+0x338>)
 800183a:	49ab      	ldr	r1, [pc, #684]	; (8001ae8 <HAL_RCC_OscConfig+0x33c>)
 800183c:	400a      	ands	r2, r1
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	4ba8      	ldr	r3, [pc, #672]	; (8001ae4 <HAL_RCC_OscConfig+0x338>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	4ba7      	ldr	r3, [pc, #668]	; (8001ae4 <HAL_RCC_OscConfig+0x338>)
 8001846:	49a9      	ldr	r1, [pc, #676]	; (8001aec <HAL_RCC_OscConfig+0x340>)
 8001848:	400a      	ands	r2, r1
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	e01e      	b.n	800188c <HAL_RCC_OscConfig+0xe0>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	2b05      	cmp	r3, #5
 8001854:	d10e      	bne.n	8001874 <HAL_RCC_OscConfig+0xc8>
 8001856:	4ba3      	ldr	r3, [pc, #652]	; (8001ae4 <HAL_RCC_OscConfig+0x338>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	4ba2      	ldr	r3, [pc, #648]	; (8001ae4 <HAL_RCC_OscConfig+0x338>)
 800185c:	2180      	movs	r1, #128	; 0x80
 800185e:	02c9      	lsls	r1, r1, #11
 8001860:	430a      	orrs	r2, r1
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	4b9f      	ldr	r3, [pc, #636]	; (8001ae4 <HAL_RCC_OscConfig+0x338>)
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	4b9e      	ldr	r3, [pc, #632]	; (8001ae4 <HAL_RCC_OscConfig+0x338>)
 800186a:	2180      	movs	r1, #128	; 0x80
 800186c:	0249      	lsls	r1, r1, #9
 800186e:	430a      	orrs	r2, r1
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	e00b      	b.n	800188c <HAL_RCC_OscConfig+0xe0>
 8001874:	4b9b      	ldr	r3, [pc, #620]	; (8001ae4 <HAL_RCC_OscConfig+0x338>)
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	4b9a      	ldr	r3, [pc, #616]	; (8001ae4 <HAL_RCC_OscConfig+0x338>)
 800187a:	499b      	ldr	r1, [pc, #620]	; (8001ae8 <HAL_RCC_OscConfig+0x33c>)
 800187c:	400a      	ands	r2, r1
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	4b98      	ldr	r3, [pc, #608]	; (8001ae4 <HAL_RCC_OscConfig+0x338>)
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	4b97      	ldr	r3, [pc, #604]	; (8001ae4 <HAL_RCC_OscConfig+0x338>)
 8001886:	4999      	ldr	r1, [pc, #612]	; (8001aec <HAL_RCC_OscConfig+0x340>)
 8001888:	400a      	ands	r2, r1
 800188a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d014      	beq.n	80018be <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001894:	f7ff fcdc 	bl	8001250 <HAL_GetTick>
 8001898:	0003      	movs	r3, r0
 800189a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800189c:	e008      	b.n	80018b0 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800189e:	f7ff fcd7 	bl	8001250 <HAL_GetTick>
 80018a2:	0002      	movs	r2, r0
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b64      	cmp	r3, #100	; 0x64
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e2fd      	b.n	8001eac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018b0:	4b8c      	ldr	r3, [pc, #560]	; (8001ae4 <HAL_RCC_OscConfig+0x338>)
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	2380      	movs	r3, #128	; 0x80
 80018b6:	029b      	lsls	r3, r3, #10
 80018b8:	4013      	ands	r3, r2
 80018ba:	d0f0      	beq.n	800189e <HAL_RCC_OscConfig+0xf2>
 80018bc:	e015      	b.n	80018ea <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018be:	f7ff fcc7 	bl	8001250 <HAL_GetTick>
 80018c2:	0003      	movs	r3, r0
 80018c4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018c6:	e008      	b.n	80018da <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018c8:	f7ff fcc2 	bl	8001250 <HAL_GetTick>
 80018cc:	0002      	movs	r2, r0
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b64      	cmp	r3, #100	; 0x64
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e2e8      	b.n	8001eac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018da:	4b82      	ldr	r3, [pc, #520]	; (8001ae4 <HAL_RCC_OscConfig+0x338>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	2380      	movs	r3, #128	; 0x80
 80018e0:	029b      	lsls	r3, r3, #10
 80018e2:	4013      	ands	r3, r2
 80018e4:	d1f0      	bne.n	80018c8 <HAL_RCC_OscConfig+0x11c>
 80018e6:	e000      	b.n	80018ea <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018e8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2202      	movs	r2, #2
 80018f0:	4013      	ands	r3, r2
 80018f2:	d100      	bne.n	80018f6 <HAL_RCC_OscConfig+0x14a>
 80018f4:	e06c      	b.n	80019d0 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80018f6:	4b7b      	ldr	r3, [pc, #492]	; (8001ae4 <HAL_RCC_OscConfig+0x338>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	220c      	movs	r2, #12
 80018fc:	4013      	ands	r3, r2
 80018fe:	d00e      	beq.n	800191e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001900:	4b78      	ldr	r3, [pc, #480]	; (8001ae4 <HAL_RCC_OscConfig+0x338>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	220c      	movs	r2, #12
 8001906:	4013      	ands	r3, r2
 8001908:	2b08      	cmp	r3, #8
 800190a:	d11f      	bne.n	800194c <HAL_RCC_OscConfig+0x1a0>
 800190c:	4b75      	ldr	r3, [pc, #468]	; (8001ae4 <HAL_RCC_OscConfig+0x338>)
 800190e:	685a      	ldr	r2, [r3, #4]
 8001910:	23c0      	movs	r3, #192	; 0xc0
 8001912:	025b      	lsls	r3, r3, #9
 8001914:	401a      	ands	r2, r3
 8001916:	2380      	movs	r3, #128	; 0x80
 8001918:	021b      	lsls	r3, r3, #8
 800191a:	429a      	cmp	r2, r3
 800191c:	d116      	bne.n	800194c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800191e:	4b71      	ldr	r3, [pc, #452]	; (8001ae4 <HAL_RCC_OscConfig+0x338>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2202      	movs	r2, #2
 8001924:	4013      	ands	r3, r2
 8001926:	d005      	beq.n	8001934 <HAL_RCC_OscConfig+0x188>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	2b01      	cmp	r3, #1
 800192e:	d001      	beq.n	8001934 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e2bb      	b.n	8001eac <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001934:	4b6b      	ldr	r3, [pc, #428]	; (8001ae4 <HAL_RCC_OscConfig+0x338>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	22f8      	movs	r2, #248	; 0xf8
 800193a:	4393      	bics	r3, r2
 800193c:	0019      	movs	r1, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	691b      	ldr	r3, [r3, #16]
 8001942:	00da      	lsls	r2, r3, #3
 8001944:	4b67      	ldr	r3, [pc, #412]	; (8001ae4 <HAL_RCC_OscConfig+0x338>)
 8001946:	430a      	orrs	r2, r1
 8001948:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800194a:	e041      	b.n	80019d0 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d024      	beq.n	800199e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001954:	4b63      	ldr	r3, [pc, #396]	; (8001ae4 <HAL_RCC_OscConfig+0x338>)
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	4b62      	ldr	r3, [pc, #392]	; (8001ae4 <HAL_RCC_OscConfig+0x338>)
 800195a:	2101      	movs	r1, #1
 800195c:	430a      	orrs	r2, r1
 800195e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001960:	f7ff fc76 	bl	8001250 <HAL_GetTick>
 8001964:	0003      	movs	r3, r0
 8001966:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001968:	e008      	b.n	800197c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800196a:	f7ff fc71 	bl	8001250 <HAL_GetTick>
 800196e:	0002      	movs	r2, r0
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	2b02      	cmp	r3, #2
 8001976:	d901      	bls.n	800197c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001978:	2303      	movs	r3, #3
 800197a:	e297      	b.n	8001eac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800197c:	4b59      	ldr	r3, [pc, #356]	; (8001ae4 <HAL_RCC_OscConfig+0x338>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2202      	movs	r2, #2
 8001982:	4013      	ands	r3, r2
 8001984:	d0f1      	beq.n	800196a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001986:	4b57      	ldr	r3, [pc, #348]	; (8001ae4 <HAL_RCC_OscConfig+0x338>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	22f8      	movs	r2, #248	; 0xf8
 800198c:	4393      	bics	r3, r2
 800198e:	0019      	movs	r1, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	691b      	ldr	r3, [r3, #16]
 8001994:	00da      	lsls	r2, r3, #3
 8001996:	4b53      	ldr	r3, [pc, #332]	; (8001ae4 <HAL_RCC_OscConfig+0x338>)
 8001998:	430a      	orrs	r2, r1
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	e018      	b.n	80019d0 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800199e:	4b51      	ldr	r3, [pc, #324]	; (8001ae4 <HAL_RCC_OscConfig+0x338>)
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	4b50      	ldr	r3, [pc, #320]	; (8001ae4 <HAL_RCC_OscConfig+0x338>)
 80019a4:	2101      	movs	r1, #1
 80019a6:	438a      	bics	r2, r1
 80019a8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019aa:	f7ff fc51 	bl	8001250 <HAL_GetTick>
 80019ae:	0003      	movs	r3, r0
 80019b0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019b2:	e008      	b.n	80019c6 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019b4:	f7ff fc4c 	bl	8001250 <HAL_GetTick>
 80019b8:	0002      	movs	r2, r0
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e272      	b.n	8001eac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019c6:	4b47      	ldr	r3, [pc, #284]	; (8001ae4 <HAL_RCC_OscConfig+0x338>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2202      	movs	r2, #2
 80019cc:	4013      	ands	r3, r2
 80019ce:	d1f1      	bne.n	80019b4 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2208      	movs	r2, #8
 80019d6:	4013      	ands	r3, r2
 80019d8:	d036      	beq.n	8001a48 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	69db      	ldr	r3, [r3, #28]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d019      	beq.n	8001a16 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019e2:	4b40      	ldr	r3, [pc, #256]	; (8001ae4 <HAL_RCC_OscConfig+0x338>)
 80019e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019e6:	4b3f      	ldr	r3, [pc, #252]	; (8001ae4 <HAL_RCC_OscConfig+0x338>)
 80019e8:	2101      	movs	r1, #1
 80019ea:	430a      	orrs	r2, r1
 80019ec:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ee:	f7ff fc2f 	bl	8001250 <HAL_GetTick>
 80019f2:	0003      	movs	r3, r0
 80019f4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019f8:	f7ff fc2a 	bl	8001250 <HAL_GetTick>
 80019fc:	0002      	movs	r2, r0
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e250      	b.n	8001eac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a0a:	4b36      	ldr	r3, [pc, #216]	; (8001ae4 <HAL_RCC_OscConfig+0x338>)
 8001a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0e:	2202      	movs	r2, #2
 8001a10:	4013      	ands	r3, r2
 8001a12:	d0f1      	beq.n	80019f8 <HAL_RCC_OscConfig+0x24c>
 8001a14:	e018      	b.n	8001a48 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a16:	4b33      	ldr	r3, [pc, #204]	; (8001ae4 <HAL_RCC_OscConfig+0x338>)
 8001a18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a1a:	4b32      	ldr	r3, [pc, #200]	; (8001ae4 <HAL_RCC_OscConfig+0x338>)
 8001a1c:	2101      	movs	r1, #1
 8001a1e:	438a      	bics	r2, r1
 8001a20:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a22:	f7ff fc15 	bl	8001250 <HAL_GetTick>
 8001a26:	0003      	movs	r3, r0
 8001a28:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a2a:	e008      	b.n	8001a3e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a2c:	f7ff fc10 	bl	8001250 <HAL_GetTick>
 8001a30:	0002      	movs	r2, r0
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e236      	b.n	8001eac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a3e:	4b29      	ldr	r3, [pc, #164]	; (8001ae4 <HAL_RCC_OscConfig+0x338>)
 8001a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a42:	2202      	movs	r2, #2
 8001a44:	4013      	ands	r3, r2
 8001a46:	d1f1      	bne.n	8001a2c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2204      	movs	r2, #4
 8001a4e:	4013      	ands	r3, r2
 8001a50:	d100      	bne.n	8001a54 <HAL_RCC_OscConfig+0x2a8>
 8001a52:	e0b5      	b.n	8001bc0 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a54:	231f      	movs	r3, #31
 8001a56:	18fb      	adds	r3, r7, r3
 8001a58:	2200      	movs	r2, #0
 8001a5a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a5c:	4b21      	ldr	r3, [pc, #132]	; (8001ae4 <HAL_RCC_OscConfig+0x338>)
 8001a5e:	69da      	ldr	r2, [r3, #28]
 8001a60:	2380      	movs	r3, #128	; 0x80
 8001a62:	055b      	lsls	r3, r3, #21
 8001a64:	4013      	ands	r3, r2
 8001a66:	d111      	bne.n	8001a8c <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a68:	4b1e      	ldr	r3, [pc, #120]	; (8001ae4 <HAL_RCC_OscConfig+0x338>)
 8001a6a:	69da      	ldr	r2, [r3, #28]
 8001a6c:	4b1d      	ldr	r3, [pc, #116]	; (8001ae4 <HAL_RCC_OscConfig+0x338>)
 8001a6e:	2180      	movs	r1, #128	; 0x80
 8001a70:	0549      	lsls	r1, r1, #21
 8001a72:	430a      	orrs	r2, r1
 8001a74:	61da      	str	r2, [r3, #28]
 8001a76:	4b1b      	ldr	r3, [pc, #108]	; (8001ae4 <HAL_RCC_OscConfig+0x338>)
 8001a78:	69da      	ldr	r2, [r3, #28]
 8001a7a:	2380      	movs	r3, #128	; 0x80
 8001a7c:	055b      	lsls	r3, r3, #21
 8001a7e:	4013      	ands	r3, r2
 8001a80:	60fb      	str	r3, [r7, #12]
 8001a82:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001a84:	231f      	movs	r3, #31
 8001a86:	18fb      	adds	r3, r7, r3
 8001a88:	2201      	movs	r2, #1
 8001a8a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a8c:	4b18      	ldr	r3, [pc, #96]	; (8001af0 <HAL_RCC_OscConfig+0x344>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	2380      	movs	r3, #128	; 0x80
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	4013      	ands	r3, r2
 8001a96:	d11a      	bne.n	8001ace <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a98:	4b15      	ldr	r3, [pc, #84]	; (8001af0 <HAL_RCC_OscConfig+0x344>)
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	4b14      	ldr	r3, [pc, #80]	; (8001af0 <HAL_RCC_OscConfig+0x344>)
 8001a9e:	2180      	movs	r1, #128	; 0x80
 8001aa0:	0049      	lsls	r1, r1, #1
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aa6:	f7ff fbd3 	bl	8001250 <HAL_GetTick>
 8001aaa:	0003      	movs	r3, r0
 8001aac:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aae:	e008      	b.n	8001ac2 <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ab0:	f7ff fbce 	bl	8001250 <HAL_GetTick>
 8001ab4:	0002      	movs	r2, r0
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b64      	cmp	r3, #100	; 0x64
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e1f4      	b.n	8001eac <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ac2:	4b0b      	ldr	r3, [pc, #44]	; (8001af0 <HAL_RCC_OscConfig+0x344>)
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	2380      	movs	r3, #128	; 0x80
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	4013      	ands	r3, r2
 8001acc:	d0f0      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d10e      	bne.n	8001af4 <HAL_RCC_OscConfig+0x348>
 8001ad6:	4b03      	ldr	r3, [pc, #12]	; (8001ae4 <HAL_RCC_OscConfig+0x338>)
 8001ad8:	6a1a      	ldr	r2, [r3, #32]
 8001ada:	4b02      	ldr	r3, [pc, #8]	; (8001ae4 <HAL_RCC_OscConfig+0x338>)
 8001adc:	2101      	movs	r1, #1
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	621a      	str	r2, [r3, #32]
 8001ae2:	e035      	b.n	8001b50 <HAL_RCC_OscConfig+0x3a4>
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	fffeffff 	.word	0xfffeffff
 8001aec:	fffbffff 	.word	0xfffbffff
 8001af0:	40007000 	.word	0x40007000
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d10c      	bne.n	8001b16 <HAL_RCC_OscConfig+0x36a>
 8001afc:	4bca      	ldr	r3, [pc, #808]	; (8001e28 <HAL_RCC_OscConfig+0x67c>)
 8001afe:	6a1a      	ldr	r2, [r3, #32]
 8001b00:	4bc9      	ldr	r3, [pc, #804]	; (8001e28 <HAL_RCC_OscConfig+0x67c>)
 8001b02:	2101      	movs	r1, #1
 8001b04:	438a      	bics	r2, r1
 8001b06:	621a      	str	r2, [r3, #32]
 8001b08:	4bc7      	ldr	r3, [pc, #796]	; (8001e28 <HAL_RCC_OscConfig+0x67c>)
 8001b0a:	6a1a      	ldr	r2, [r3, #32]
 8001b0c:	4bc6      	ldr	r3, [pc, #792]	; (8001e28 <HAL_RCC_OscConfig+0x67c>)
 8001b0e:	2104      	movs	r1, #4
 8001b10:	438a      	bics	r2, r1
 8001b12:	621a      	str	r2, [r3, #32]
 8001b14:	e01c      	b.n	8001b50 <HAL_RCC_OscConfig+0x3a4>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	2b05      	cmp	r3, #5
 8001b1c:	d10c      	bne.n	8001b38 <HAL_RCC_OscConfig+0x38c>
 8001b1e:	4bc2      	ldr	r3, [pc, #776]	; (8001e28 <HAL_RCC_OscConfig+0x67c>)
 8001b20:	6a1a      	ldr	r2, [r3, #32]
 8001b22:	4bc1      	ldr	r3, [pc, #772]	; (8001e28 <HAL_RCC_OscConfig+0x67c>)
 8001b24:	2104      	movs	r1, #4
 8001b26:	430a      	orrs	r2, r1
 8001b28:	621a      	str	r2, [r3, #32]
 8001b2a:	4bbf      	ldr	r3, [pc, #764]	; (8001e28 <HAL_RCC_OscConfig+0x67c>)
 8001b2c:	6a1a      	ldr	r2, [r3, #32]
 8001b2e:	4bbe      	ldr	r3, [pc, #760]	; (8001e28 <HAL_RCC_OscConfig+0x67c>)
 8001b30:	2101      	movs	r1, #1
 8001b32:	430a      	orrs	r2, r1
 8001b34:	621a      	str	r2, [r3, #32]
 8001b36:	e00b      	b.n	8001b50 <HAL_RCC_OscConfig+0x3a4>
 8001b38:	4bbb      	ldr	r3, [pc, #748]	; (8001e28 <HAL_RCC_OscConfig+0x67c>)
 8001b3a:	6a1a      	ldr	r2, [r3, #32]
 8001b3c:	4bba      	ldr	r3, [pc, #744]	; (8001e28 <HAL_RCC_OscConfig+0x67c>)
 8001b3e:	2101      	movs	r1, #1
 8001b40:	438a      	bics	r2, r1
 8001b42:	621a      	str	r2, [r3, #32]
 8001b44:	4bb8      	ldr	r3, [pc, #736]	; (8001e28 <HAL_RCC_OscConfig+0x67c>)
 8001b46:	6a1a      	ldr	r2, [r3, #32]
 8001b48:	4bb7      	ldr	r3, [pc, #732]	; (8001e28 <HAL_RCC_OscConfig+0x67c>)
 8001b4a:	2104      	movs	r1, #4
 8001b4c:	438a      	bics	r2, r1
 8001b4e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d014      	beq.n	8001b82 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b58:	f7ff fb7a 	bl	8001250 <HAL_GetTick>
 8001b5c:	0003      	movs	r3, r0
 8001b5e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b60:	e009      	b.n	8001b76 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b62:	f7ff fb75 	bl	8001250 <HAL_GetTick>
 8001b66:	0002      	movs	r2, r0
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	4aaf      	ldr	r2, [pc, #700]	; (8001e2c <HAL_RCC_OscConfig+0x680>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e19a      	b.n	8001eac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b76:	4bac      	ldr	r3, [pc, #688]	; (8001e28 <HAL_RCC_OscConfig+0x67c>)
 8001b78:	6a1b      	ldr	r3, [r3, #32]
 8001b7a:	2202      	movs	r2, #2
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	d0f0      	beq.n	8001b62 <HAL_RCC_OscConfig+0x3b6>
 8001b80:	e013      	b.n	8001baa <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b82:	f7ff fb65 	bl	8001250 <HAL_GetTick>
 8001b86:	0003      	movs	r3, r0
 8001b88:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b8a:	e009      	b.n	8001ba0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b8c:	f7ff fb60 	bl	8001250 <HAL_GetTick>
 8001b90:	0002      	movs	r2, r0
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	4aa5      	ldr	r2, [pc, #660]	; (8001e2c <HAL_RCC_OscConfig+0x680>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d901      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e185      	b.n	8001eac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ba0:	4ba1      	ldr	r3, [pc, #644]	; (8001e28 <HAL_RCC_OscConfig+0x67c>)
 8001ba2:	6a1b      	ldr	r3, [r3, #32]
 8001ba4:	2202      	movs	r2, #2
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	d1f0      	bne.n	8001b8c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001baa:	231f      	movs	r3, #31
 8001bac:	18fb      	adds	r3, r7, r3
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d105      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bb4:	4b9c      	ldr	r3, [pc, #624]	; (8001e28 <HAL_RCC_OscConfig+0x67c>)
 8001bb6:	69da      	ldr	r2, [r3, #28]
 8001bb8:	4b9b      	ldr	r3, [pc, #620]	; (8001e28 <HAL_RCC_OscConfig+0x67c>)
 8001bba:	499d      	ldr	r1, [pc, #628]	; (8001e30 <HAL_RCC_OscConfig+0x684>)
 8001bbc:	400a      	ands	r2, r1
 8001bbe:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2210      	movs	r2, #16
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	d063      	beq.n	8001c92 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d12a      	bne.n	8001c28 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001bd2:	4b95      	ldr	r3, [pc, #596]	; (8001e28 <HAL_RCC_OscConfig+0x67c>)
 8001bd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bd6:	4b94      	ldr	r3, [pc, #592]	; (8001e28 <HAL_RCC_OscConfig+0x67c>)
 8001bd8:	2104      	movs	r1, #4
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001bde:	4b92      	ldr	r3, [pc, #584]	; (8001e28 <HAL_RCC_OscConfig+0x67c>)
 8001be0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001be2:	4b91      	ldr	r3, [pc, #580]	; (8001e28 <HAL_RCC_OscConfig+0x67c>)
 8001be4:	2101      	movs	r1, #1
 8001be6:	430a      	orrs	r2, r1
 8001be8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bea:	f7ff fb31 	bl	8001250 <HAL_GetTick>
 8001bee:	0003      	movs	r3, r0
 8001bf0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001bf2:	e008      	b.n	8001c06 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001bf4:	f7ff fb2c 	bl	8001250 <HAL_GetTick>
 8001bf8:	0002      	movs	r2, r0
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e152      	b.n	8001eac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001c06:	4b88      	ldr	r3, [pc, #544]	; (8001e28 <HAL_RCC_OscConfig+0x67c>)
 8001c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c0a:	2202      	movs	r2, #2
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	d0f1      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001c10:	4b85      	ldr	r3, [pc, #532]	; (8001e28 <HAL_RCC_OscConfig+0x67c>)
 8001c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c14:	22f8      	movs	r2, #248	; 0xf8
 8001c16:	4393      	bics	r3, r2
 8001c18:	0019      	movs	r1, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	699b      	ldr	r3, [r3, #24]
 8001c1e:	00da      	lsls	r2, r3, #3
 8001c20:	4b81      	ldr	r3, [pc, #516]	; (8001e28 <HAL_RCC_OscConfig+0x67c>)
 8001c22:	430a      	orrs	r2, r1
 8001c24:	635a      	str	r2, [r3, #52]	; 0x34
 8001c26:	e034      	b.n	8001c92 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	695b      	ldr	r3, [r3, #20]
 8001c2c:	3305      	adds	r3, #5
 8001c2e:	d111      	bne.n	8001c54 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001c30:	4b7d      	ldr	r3, [pc, #500]	; (8001e28 <HAL_RCC_OscConfig+0x67c>)
 8001c32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c34:	4b7c      	ldr	r3, [pc, #496]	; (8001e28 <HAL_RCC_OscConfig+0x67c>)
 8001c36:	2104      	movs	r1, #4
 8001c38:	438a      	bics	r2, r1
 8001c3a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001c3c:	4b7a      	ldr	r3, [pc, #488]	; (8001e28 <HAL_RCC_OscConfig+0x67c>)
 8001c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c40:	22f8      	movs	r2, #248	; 0xf8
 8001c42:	4393      	bics	r3, r2
 8001c44:	0019      	movs	r1, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	00da      	lsls	r2, r3, #3
 8001c4c:	4b76      	ldr	r3, [pc, #472]	; (8001e28 <HAL_RCC_OscConfig+0x67c>)
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	635a      	str	r2, [r3, #52]	; 0x34
 8001c52:	e01e      	b.n	8001c92 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001c54:	4b74      	ldr	r3, [pc, #464]	; (8001e28 <HAL_RCC_OscConfig+0x67c>)
 8001c56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c58:	4b73      	ldr	r3, [pc, #460]	; (8001e28 <HAL_RCC_OscConfig+0x67c>)
 8001c5a:	2104      	movs	r1, #4
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001c60:	4b71      	ldr	r3, [pc, #452]	; (8001e28 <HAL_RCC_OscConfig+0x67c>)
 8001c62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c64:	4b70      	ldr	r3, [pc, #448]	; (8001e28 <HAL_RCC_OscConfig+0x67c>)
 8001c66:	2101      	movs	r1, #1
 8001c68:	438a      	bics	r2, r1
 8001c6a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c6c:	f7ff faf0 	bl	8001250 <HAL_GetTick>
 8001c70:	0003      	movs	r3, r0
 8001c72:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001c74:	e008      	b.n	8001c88 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001c76:	f7ff faeb 	bl	8001250 <HAL_GetTick>
 8001c7a:	0002      	movs	r2, r0
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d901      	bls.n	8001c88 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e111      	b.n	8001eac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001c88:	4b67      	ldr	r3, [pc, #412]	; (8001e28 <HAL_RCC_OscConfig+0x67c>)
 8001c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c8c:	2202      	movs	r2, #2
 8001c8e:	4013      	ands	r3, r2
 8001c90:	d1f1      	bne.n	8001c76 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2220      	movs	r2, #32
 8001c98:	4013      	ands	r3, r2
 8001c9a:	d05c      	beq.n	8001d56 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001c9c:	4b62      	ldr	r3, [pc, #392]	; (8001e28 <HAL_RCC_OscConfig+0x67c>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	220c      	movs	r2, #12
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	2b0c      	cmp	r3, #12
 8001ca6:	d00e      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001ca8:	4b5f      	ldr	r3, [pc, #380]	; (8001e28 <HAL_RCC_OscConfig+0x67c>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	220c      	movs	r2, #12
 8001cae:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001cb0:	2b08      	cmp	r3, #8
 8001cb2:	d114      	bne.n	8001cde <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001cb4:	4b5c      	ldr	r3, [pc, #368]	; (8001e28 <HAL_RCC_OscConfig+0x67c>)
 8001cb6:	685a      	ldr	r2, [r3, #4]
 8001cb8:	23c0      	movs	r3, #192	; 0xc0
 8001cba:	025b      	lsls	r3, r3, #9
 8001cbc:	401a      	ands	r2, r3
 8001cbe:	23c0      	movs	r3, #192	; 0xc0
 8001cc0:	025b      	lsls	r3, r3, #9
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d10b      	bne.n	8001cde <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001cc6:	4b58      	ldr	r3, [pc, #352]	; (8001e28 <HAL_RCC_OscConfig+0x67c>)
 8001cc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cca:	2380      	movs	r3, #128	; 0x80
 8001ccc:	025b      	lsls	r3, r3, #9
 8001cce:	4013      	ands	r3, r2
 8001cd0:	d040      	beq.n	8001d54 <HAL_RCC_OscConfig+0x5a8>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a1b      	ldr	r3, [r3, #32]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d03c      	beq.n	8001d54 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e0e6      	b.n	8001eac <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a1b      	ldr	r3, [r3, #32]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d01b      	beq.n	8001d1e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001ce6:	4b50      	ldr	r3, [pc, #320]	; (8001e28 <HAL_RCC_OscConfig+0x67c>)
 8001ce8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cea:	4b4f      	ldr	r3, [pc, #316]	; (8001e28 <HAL_RCC_OscConfig+0x67c>)
 8001cec:	2180      	movs	r1, #128	; 0x80
 8001cee:	0249      	lsls	r1, r1, #9
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf4:	f7ff faac 	bl	8001250 <HAL_GetTick>
 8001cf8:	0003      	movs	r3, r0
 8001cfa:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001cfc:	e008      	b.n	8001d10 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cfe:	f7ff faa7 	bl	8001250 <HAL_GetTick>
 8001d02:	0002      	movs	r2, r0
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e0cd      	b.n	8001eac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001d10:	4b45      	ldr	r3, [pc, #276]	; (8001e28 <HAL_RCC_OscConfig+0x67c>)
 8001d12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d14:	2380      	movs	r3, #128	; 0x80
 8001d16:	025b      	lsls	r3, r3, #9
 8001d18:	4013      	ands	r3, r2
 8001d1a:	d0f0      	beq.n	8001cfe <HAL_RCC_OscConfig+0x552>
 8001d1c:	e01b      	b.n	8001d56 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001d1e:	4b42      	ldr	r3, [pc, #264]	; (8001e28 <HAL_RCC_OscConfig+0x67c>)
 8001d20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d22:	4b41      	ldr	r3, [pc, #260]	; (8001e28 <HAL_RCC_OscConfig+0x67c>)
 8001d24:	4943      	ldr	r1, [pc, #268]	; (8001e34 <HAL_RCC_OscConfig+0x688>)
 8001d26:	400a      	ands	r2, r1
 8001d28:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d2a:	f7ff fa91 	bl	8001250 <HAL_GetTick>
 8001d2e:	0003      	movs	r3, r0
 8001d30:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001d32:	e008      	b.n	8001d46 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d34:	f7ff fa8c 	bl	8001250 <HAL_GetTick>
 8001d38:	0002      	movs	r2, r0
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e0b2      	b.n	8001eac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001d46:	4b38      	ldr	r3, [pc, #224]	; (8001e28 <HAL_RCC_OscConfig+0x67c>)
 8001d48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d4a:	2380      	movs	r3, #128	; 0x80
 8001d4c:	025b      	lsls	r3, r3, #9
 8001d4e:	4013      	ands	r3, r2
 8001d50:	d1f0      	bne.n	8001d34 <HAL_RCC_OscConfig+0x588>
 8001d52:	e000      	b.n	8001d56 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001d54:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d100      	bne.n	8001d60 <HAL_RCC_OscConfig+0x5b4>
 8001d5e:	e0a4      	b.n	8001eaa <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d60:	4b31      	ldr	r3, [pc, #196]	; (8001e28 <HAL_RCC_OscConfig+0x67c>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	220c      	movs	r2, #12
 8001d66:	4013      	ands	r3, r2
 8001d68:	2b08      	cmp	r3, #8
 8001d6a:	d100      	bne.n	8001d6e <HAL_RCC_OscConfig+0x5c2>
 8001d6c:	e078      	b.n	8001e60 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d14c      	bne.n	8001e10 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d76:	4b2c      	ldr	r3, [pc, #176]	; (8001e28 <HAL_RCC_OscConfig+0x67c>)
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	4b2b      	ldr	r3, [pc, #172]	; (8001e28 <HAL_RCC_OscConfig+0x67c>)
 8001d7c:	492e      	ldr	r1, [pc, #184]	; (8001e38 <HAL_RCC_OscConfig+0x68c>)
 8001d7e:	400a      	ands	r2, r1
 8001d80:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d82:	f7ff fa65 	bl	8001250 <HAL_GetTick>
 8001d86:	0003      	movs	r3, r0
 8001d88:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d8a:	e008      	b.n	8001d9e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d8c:	f7ff fa60 	bl	8001250 <HAL_GetTick>
 8001d90:	0002      	movs	r2, r0
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e086      	b.n	8001eac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d9e:	4b22      	ldr	r3, [pc, #136]	; (8001e28 <HAL_RCC_OscConfig+0x67c>)
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	2380      	movs	r3, #128	; 0x80
 8001da4:	049b      	lsls	r3, r3, #18
 8001da6:	4013      	ands	r3, r2
 8001da8:	d1f0      	bne.n	8001d8c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001daa:	4b1f      	ldr	r3, [pc, #124]	; (8001e28 <HAL_RCC_OscConfig+0x67c>)
 8001dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dae:	220f      	movs	r2, #15
 8001db0:	4393      	bics	r3, r2
 8001db2:	0019      	movs	r1, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001db8:	4b1b      	ldr	r3, [pc, #108]	; (8001e28 <HAL_RCC_OscConfig+0x67c>)
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	62da      	str	r2, [r3, #44]	; 0x2c
 8001dbe:	4b1a      	ldr	r3, [pc, #104]	; (8001e28 <HAL_RCC_OscConfig+0x67c>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	4a1e      	ldr	r2, [pc, #120]	; (8001e3c <HAL_RCC_OscConfig+0x690>)
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	0019      	movs	r1, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd0:	431a      	orrs	r2, r3
 8001dd2:	4b15      	ldr	r3, [pc, #84]	; (8001e28 <HAL_RCC_OscConfig+0x67c>)
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dd8:	4b13      	ldr	r3, [pc, #76]	; (8001e28 <HAL_RCC_OscConfig+0x67c>)
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	4b12      	ldr	r3, [pc, #72]	; (8001e28 <HAL_RCC_OscConfig+0x67c>)
 8001dde:	2180      	movs	r1, #128	; 0x80
 8001de0:	0449      	lsls	r1, r1, #17
 8001de2:	430a      	orrs	r2, r1
 8001de4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de6:	f7ff fa33 	bl	8001250 <HAL_GetTick>
 8001dea:	0003      	movs	r3, r0
 8001dec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001df0:	f7ff fa2e 	bl	8001250 <HAL_GetTick>
 8001df4:	0002      	movs	r2, r0
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e054      	b.n	8001eac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e02:	4b09      	ldr	r3, [pc, #36]	; (8001e28 <HAL_RCC_OscConfig+0x67c>)
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	2380      	movs	r3, #128	; 0x80
 8001e08:	049b      	lsls	r3, r3, #18
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	d0f0      	beq.n	8001df0 <HAL_RCC_OscConfig+0x644>
 8001e0e:	e04c      	b.n	8001eaa <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e10:	4b05      	ldr	r3, [pc, #20]	; (8001e28 <HAL_RCC_OscConfig+0x67c>)
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	4b04      	ldr	r3, [pc, #16]	; (8001e28 <HAL_RCC_OscConfig+0x67c>)
 8001e16:	4908      	ldr	r1, [pc, #32]	; (8001e38 <HAL_RCC_OscConfig+0x68c>)
 8001e18:	400a      	ands	r2, r1
 8001e1a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1c:	f7ff fa18 	bl	8001250 <HAL_GetTick>
 8001e20:	0003      	movs	r3, r0
 8001e22:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e24:	e015      	b.n	8001e52 <HAL_RCC_OscConfig+0x6a6>
 8001e26:	46c0      	nop			; (mov r8, r8)
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	00001388 	.word	0x00001388
 8001e30:	efffffff 	.word	0xefffffff
 8001e34:	fffeffff 	.word	0xfffeffff
 8001e38:	feffffff 	.word	0xfeffffff
 8001e3c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e40:	f7ff fa06 	bl	8001250 <HAL_GetTick>
 8001e44:	0002      	movs	r2, r0
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e02c      	b.n	8001eac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e52:	4b18      	ldr	r3, [pc, #96]	; (8001eb4 <HAL_RCC_OscConfig+0x708>)
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	2380      	movs	r3, #128	; 0x80
 8001e58:	049b      	lsls	r3, r3, #18
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	d1f0      	bne.n	8001e40 <HAL_RCC_OscConfig+0x694>
 8001e5e:	e024      	b.n	8001eaa <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d101      	bne.n	8001e6c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e01f      	b.n	8001eac <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001e6c:	4b11      	ldr	r3, [pc, #68]	; (8001eb4 <HAL_RCC_OscConfig+0x708>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001e72:	4b10      	ldr	r3, [pc, #64]	; (8001eb4 <HAL_RCC_OscConfig+0x708>)
 8001e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e76:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e78:	697a      	ldr	r2, [r7, #20]
 8001e7a:	23c0      	movs	r3, #192	; 0xc0
 8001e7c:	025b      	lsls	r3, r3, #9
 8001e7e:	401a      	ands	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d10e      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	220f      	movs	r2, #15
 8001e8c:	401a      	ands	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d107      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001e96:	697a      	ldr	r2, [r7, #20]
 8001e98:	23f0      	movs	r3, #240	; 0xf0
 8001e9a:	039b      	lsls	r3, r3, #14
 8001e9c:	401a      	ands	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d001      	beq.n	8001eaa <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e000      	b.n	8001eac <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	0018      	movs	r0, r3
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	b008      	add	sp, #32
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40021000 	.word	0x40021000

08001eb8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d101      	bne.n	8001ecc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e0bf      	b.n	800204c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ecc:	4b61      	ldr	r3, [pc, #388]	; (8002054 <HAL_RCC_ClockConfig+0x19c>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	683a      	ldr	r2, [r7, #0]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d911      	bls.n	8001efe <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eda:	4b5e      	ldr	r3, [pc, #376]	; (8002054 <HAL_RCC_ClockConfig+0x19c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	4393      	bics	r3, r2
 8001ee2:	0019      	movs	r1, r3
 8001ee4:	4b5b      	ldr	r3, [pc, #364]	; (8002054 <HAL_RCC_ClockConfig+0x19c>)
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eec:	4b59      	ldr	r3, [pc, #356]	; (8002054 <HAL_RCC_ClockConfig+0x19c>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d001      	beq.n	8001efe <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e0a6      	b.n	800204c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2202      	movs	r2, #2
 8001f04:	4013      	ands	r3, r2
 8001f06:	d015      	beq.n	8001f34 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2204      	movs	r2, #4
 8001f0e:	4013      	ands	r3, r2
 8001f10:	d006      	beq.n	8001f20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001f12:	4b51      	ldr	r3, [pc, #324]	; (8002058 <HAL_RCC_ClockConfig+0x1a0>)
 8001f14:	685a      	ldr	r2, [r3, #4]
 8001f16:	4b50      	ldr	r3, [pc, #320]	; (8002058 <HAL_RCC_ClockConfig+0x1a0>)
 8001f18:	21e0      	movs	r1, #224	; 0xe0
 8001f1a:	00c9      	lsls	r1, r1, #3
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f20:	4b4d      	ldr	r3, [pc, #308]	; (8002058 <HAL_RCC_ClockConfig+0x1a0>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	22f0      	movs	r2, #240	; 0xf0
 8001f26:	4393      	bics	r3, r2
 8001f28:	0019      	movs	r1, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	689a      	ldr	r2, [r3, #8]
 8001f2e:	4b4a      	ldr	r3, [pc, #296]	; (8002058 <HAL_RCC_ClockConfig+0x1a0>)
 8001f30:	430a      	orrs	r2, r1
 8001f32:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	d04c      	beq.n	8001fd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d107      	bne.n	8001f56 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f46:	4b44      	ldr	r3, [pc, #272]	; (8002058 <HAL_RCC_ClockConfig+0x1a0>)
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	2380      	movs	r3, #128	; 0x80
 8001f4c:	029b      	lsls	r3, r3, #10
 8001f4e:	4013      	ands	r3, r2
 8001f50:	d120      	bne.n	8001f94 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e07a      	b.n	800204c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d107      	bne.n	8001f6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f5e:	4b3e      	ldr	r3, [pc, #248]	; (8002058 <HAL_RCC_ClockConfig+0x1a0>)
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	2380      	movs	r3, #128	; 0x80
 8001f64:	049b      	lsls	r3, r3, #18
 8001f66:	4013      	ands	r3, r2
 8001f68:	d114      	bne.n	8001f94 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e06e      	b.n	800204c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	2b03      	cmp	r3, #3
 8001f74:	d107      	bne.n	8001f86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001f76:	4b38      	ldr	r3, [pc, #224]	; (8002058 <HAL_RCC_ClockConfig+0x1a0>)
 8001f78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f7a:	2380      	movs	r3, #128	; 0x80
 8001f7c:	025b      	lsls	r3, r3, #9
 8001f7e:	4013      	ands	r3, r2
 8001f80:	d108      	bne.n	8001f94 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e062      	b.n	800204c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f86:	4b34      	ldr	r3, [pc, #208]	; (8002058 <HAL_RCC_ClockConfig+0x1a0>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2202      	movs	r2, #2
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	d101      	bne.n	8001f94 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e05b      	b.n	800204c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f94:	4b30      	ldr	r3, [pc, #192]	; (8002058 <HAL_RCC_ClockConfig+0x1a0>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	2203      	movs	r2, #3
 8001f9a:	4393      	bics	r3, r2
 8001f9c:	0019      	movs	r1, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685a      	ldr	r2, [r3, #4]
 8001fa2:	4b2d      	ldr	r3, [pc, #180]	; (8002058 <HAL_RCC_ClockConfig+0x1a0>)
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fa8:	f7ff f952 	bl	8001250 <HAL_GetTick>
 8001fac:	0003      	movs	r3, r0
 8001fae:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fb0:	e009      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fb2:	f7ff f94d 	bl	8001250 <HAL_GetTick>
 8001fb6:	0002      	movs	r2, r0
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	4a27      	ldr	r2, [pc, #156]	; (800205c <HAL_RCC_ClockConfig+0x1a4>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e042      	b.n	800204c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fc6:	4b24      	ldr	r3, [pc, #144]	; (8002058 <HAL_RCC_ClockConfig+0x1a0>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	220c      	movs	r2, #12
 8001fcc:	401a      	ands	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d1ec      	bne.n	8001fb2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fd8:	4b1e      	ldr	r3, [pc, #120]	; (8002054 <HAL_RCC_ClockConfig+0x19c>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	4013      	ands	r3, r2
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d211      	bcs.n	800200a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fe6:	4b1b      	ldr	r3, [pc, #108]	; (8002054 <HAL_RCC_ClockConfig+0x19c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2201      	movs	r2, #1
 8001fec:	4393      	bics	r3, r2
 8001fee:	0019      	movs	r1, r3
 8001ff0:	4b18      	ldr	r3, [pc, #96]	; (8002054 <HAL_RCC_ClockConfig+0x19c>)
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ff8:	4b16      	ldr	r3, [pc, #88]	; (8002054 <HAL_RCC_ClockConfig+0x19c>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	4013      	ands	r3, r2
 8002000:	683a      	ldr	r2, [r7, #0]
 8002002:	429a      	cmp	r2, r3
 8002004:	d001      	beq.n	800200a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e020      	b.n	800204c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2204      	movs	r2, #4
 8002010:	4013      	ands	r3, r2
 8002012:	d009      	beq.n	8002028 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002014:	4b10      	ldr	r3, [pc, #64]	; (8002058 <HAL_RCC_ClockConfig+0x1a0>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	4a11      	ldr	r2, [pc, #68]	; (8002060 <HAL_RCC_ClockConfig+0x1a8>)
 800201a:	4013      	ands	r3, r2
 800201c:	0019      	movs	r1, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	68da      	ldr	r2, [r3, #12]
 8002022:	4b0d      	ldr	r3, [pc, #52]	; (8002058 <HAL_RCC_ClockConfig+0x1a0>)
 8002024:	430a      	orrs	r2, r1
 8002026:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002028:	f000 f820 	bl	800206c <HAL_RCC_GetSysClockFreq>
 800202c:	0001      	movs	r1, r0
 800202e:	4b0a      	ldr	r3, [pc, #40]	; (8002058 <HAL_RCC_ClockConfig+0x1a0>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	091b      	lsrs	r3, r3, #4
 8002034:	220f      	movs	r2, #15
 8002036:	4013      	ands	r3, r2
 8002038:	4a0a      	ldr	r2, [pc, #40]	; (8002064 <HAL_RCC_ClockConfig+0x1ac>)
 800203a:	5cd3      	ldrb	r3, [r2, r3]
 800203c:	000a      	movs	r2, r1
 800203e:	40da      	lsrs	r2, r3
 8002040:	4b09      	ldr	r3, [pc, #36]	; (8002068 <HAL_RCC_ClockConfig+0x1b0>)
 8002042:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002044:	2000      	movs	r0, #0
 8002046:	f7ff f8bd 	bl	80011c4 <HAL_InitTick>
  
  return HAL_OK;
 800204a:	2300      	movs	r3, #0
}
 800204c:	0018      	movs	r0, r3
 800204e:	46bd      	mov	sp, r7
 8002050:	b004      	add	sp, #16
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40022000 	.word	0x40022000
 8002058:	40021000 	.word	0x40021000
 800205c:	00001388 	.word	0x00001388
 8002060:	fffff8ff 	.word	0xfffff8ff
 8002064:	080049fc 	.word	0x080049fc
 8002068:	20000018 	.word	0x20000018

0800206c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800206c:	b590      	push	{r4, r7, lr}
 800206e:	b08f      	sub	sp, #60	; 0x3c
 8002070:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002072:	2314      	movs	r3, #20
 8002074:	18fb      	adds	r3, r7, r3
 8002076:	4a37      	ldr	r2, [pc, #220]	; (8002154 <HAL_RCC_GetSysClockFreq+0xe8>)
 8002078:	ca13      	ldmia	r2!, {r0, r1, r4}
 800207a:	c313      	stmia	r3!, {r0, r1, r4}
 800207c:	6812      	ldr	r2, [r2, #0]
 800207e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002080:	1d3b      	adds	r3, r7, #4
 8002082:	4a35      	ldr	r2, [pc, #212]	; (8002158 <HAL_RCC_GetSysClockFreq+0xec>)
 8002084:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002086:	c313      	stmia	r3!, {r0, r1, r4}
 8002088:	6812      	ldr	r2, [r2, #0]
 800208a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800208c:	2300      	movs	r3, #0
 800208e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002090:	2300      	movs	r3, #0
 8002092:	62bb      	str	r3, [r7, #40]	; 0x28
 8002094:	2300      	movs	r3, #0
 8002096:	637b      	str	r3, [r7, #52]	; 0x34
 8002098:	2300      	movs	r3, #0
 800209a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800209c:	2300      	movs	r3, #0
 800209e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80020a0:	4b2e      	ldr	r3, [pc, #184]	; (800215c <HAL_RCC_GetSysClockFreq+0xf0>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a8:	220c      	movs	r2, #12
 80020aa:	4013      	ands	r3, r2
 80020ac:	2b08      	cmp	r3, #8
 80020ae:	d006      	beq.n	80020be <HAL_RCC_GetSysClockFreq+0x52>
 80020b0:	2b0c      	cmp	r3, #12
 80020b2:	d043      	beq.n	800213c <HAL_RCC_GetSysClockFreq+0xd0>
 80020b4:	2b04      	cmp	r3, #4
 80020b6:	d144      	bne.n	8002142 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020b8:	4b29      	ldr	r3, [pc, #164]	; (8002160 <HAL_RCC_GetSysClockFreq+0xf4>)
 80020ba:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80020bc:	e044      	b.n	8002148 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80020be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020c0:	0c9b      	lsrs	r3, r3, #18
 80020c2:	220f      	movs	r2, #15
 80020c4:	4013      	ands	r3, r2
 80020c6:	2214      	movs	r2, #20
 80020c8:	18ba      	adds	r2, r7, r2
 80020ca:	5cd3      	ldrb	r3, [r2, r3]
 80020cc:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80020ce:	4b23      	ldr	r3, [pc, #140]	; (800215c <HAL_RCC_GetSysClockFreq+0xf0>)
 80020d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d2:	220f      	movs	r2, #15
 80020d4:	4013      	ands	r3, r2
 80020d6:	1d3a      	adds	r2, r7, #4
 80020d8:	5cd3      	ldrb	r3, [r2, r3]
 80020da:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80020dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020de:	23c0      	movs	r3, #192	; 0xc0
 80020e0:	025b      	lsls	r3, r3, #9
 80020e2:	401a      	ands	r2, r3
 80020e4:	2380      	movs	r3, #128	; 0x80
 80020e6:	025b      	lsls	r3, r3, #9
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d109      	bne.n	8002100 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020ee:	481c      	ldr	r0, [pc, #112]	; (8002160 <HAL_RCC_GetSysClockFreq+0xf4>)
 80020f0:	f7fe f808 	bl	8000104 <__udivsi3>
 80020f4:	0003      	movs	r3, r0
 80020f6:	001a      	movs	r2, r3
 80020f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fa:	4353      	muls	r3, r2
 80020fc:	637b      	str	r3, [r7, #52]	; 0x34
 80020fe:	e01a      	b.n	8002136 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002100:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002102:	23c0      	movs	r3, #192	; 0xc0
 8002104:	025b      	lsls	r3, r3, #9
 8002106:	401a      	ands	r2, r3
 8002108:	23c0      	movs	r3, #192	; 0xc0
 800210a:	025b      	lsls	r3, r3, #9
 800210c:	429a      	cmp	r2, r3
 800210e:	d109      	bne.n	8002124 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002110:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002112:	4814      	ldr	r0, [pc, #80]	; (8002164 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002114:	f7fd fff6 	bl	8000104 <__udivsi3>
 8002118:	0003      	movs	r3, r0
 800211a:	001a      	movs	r2, r3
 800211c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211e:	4353      	muls	r3, r2
 8002120:	637b      	str	r3, [r7, #52]	; 0x34
 8002122:	e008      	b.n	8002136 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002124:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002126:	480e      	ldr	r0, [pc, #56]	; (8002160 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002128:	f7fd ffec 	bl	8000104 <__udivsi3>
 800212c:	0003      	movs	r3, r0
 800212e:	001a      	movs	r2, r3
 8002130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002132:	4353      	muls	r3, r2
 8002134:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002138:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800213a:	e005      	b.n	8002148 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800213c:	4b09      	ldr	r3, [pc, #36]	; (8002164 <HAL_RCC_GetSysClockFreq+0xf8>)
 800213e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002140:	e002      	b.n	8002148 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002142:	4b07      	ldr	r3, [pc, #28]	; (8002160 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002144:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002146:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800214a:	0018      	movs	r0, r3
 800214c:	46bd      	mov	sp, r7
 800214e:	b00f      	add	sp, #60	; 0x3c
 8002150:	bd90      	pop	{r4, r7, pc}
 8002152:	46c0      	nop			; (mov r8, r8)
 8002154:	080049dc 	.word	0x080049dc
 8002158:	080049ec 	.word	0x080049ec
 800215c:	40021000 	.word	0x40021000
 8002160:	007a1200 	.word	0x007a1200
 8002164:	02dc6c00 	.word	0x02dc6c00

08002168 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800216c:	4b02      	ldr	r3, [pc, #8]	; (8002178 <HAL_RCC_GetHCLKFreq+0x10>)
 800216e:	681b      	ldr	r3, [r3, #0]
}
 8002170:	0018      	movs	r0, r3
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	46c0      	nop			; (mov r8, r8)
 8002178:	20000018 	.word	0x20000018

0800217c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002180:	f7ff fff2 	bl	8002168 <HAL_RCC_GetHCLKFreq>
 8002184:	0001      	movs	r1, r0
 8002186:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	0a1b      	lsrs	r3, r3, #8
 800218c:	2207      	movs	r2, #7
 800218e:	4013      	ands	r3, r2
 8002190:	4a04      	ldr	r2, [pc, #16]	; (80021a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002192:	5cd3      	ldrb	r3, [r2, r3]
 8002194:	40d9      	lsrs	r1, r3
 8002196:	000b      	movs	r3, r1
}    
 8002198:	0018      	movs	r0, r3
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	46c0      	nop			; (mov r8, r8)
 80021a0:	40021000 	.word	0x40021000
 80021a4:	08004a0c 	.word	0x08004a0c

080021a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b086      	sub	sp, #24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021b0:	2300      	movs	r3, #0
 80021b2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80021b4:	2300      	movs	r3, #0
 80021b6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	2380      	movs	r3, #128	; 0x80
 80021be:	025b      	lsls	r3, r3, #9
 80021c0:	4013      	ands	r3, r2
 80021c2:	d100      	bne.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80021c4:	e08f      	b.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80021c6:	2317      	movs	r3, #23
 80021c8:	18fb      	adds	r3, r7, r3
 80021ca:	2200      	movs	r2, #0
 80021cc:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021ce:	4b6f      	ldr	r3, [pc, #444]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80021d0:	69da      	ldr	r2, [r3, #28]
 80021d2:	2380      	movs	r3, #128	; 0x80
 80021d4:	055b      	lsls	r3, r3, #21
 80021d6:	4013      	ands	r3, r2
 80021d8:	d111      	bne.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80021da:	4b6c      	ldr	r3, [pc, #432]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80021dc:	69da      	ldr	r2, [r3, #28]
 80021de:	4b6b      	ldr	r3, [pc, #428]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80021e0:	2180      	movs	r1, #128	; 0x80
 80021e2:	0549      	lsls	r1, r1, #21
 80021e4:	430a      	orrs	r2, r1
 80021e6:	61da      	str	r2, [r3, #28]
 80021e8:	4b68      	ldr	r3, [pc, #416]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80021ea:	69da      	ldr	r2, [r3, #28]
 80021ec:	2380      	movs	r3, #128	; 0x80
 80021ee:	055b      	lsls	r3, r3, #21
 80021f0:	4013      	ands	r3, r2
 80021f2:	60bb      	str	r3, [r7, #8]
 80021f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021f6:	2317      	movs	r3, #23
 80021f8:	18fb      	adds	r3, r7, r3
 80021fa:	2201      	movs	r2, #1
 80021fc:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021fe:	4b64      	ldr	r3, [pc, #400]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	2380      	movs	r3, #128	; 0x80
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	4013      	ands	r3, r2
 8002208:	d11a      	bne.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800220a:	4b61      	ldr	r3, [pc, #388]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	4b60      	ldr	r3, [pc, #384]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002210:	2180      	movs	r1, #128	; 0x80
 8002212:	0049      	lsls	r1, r1, #1
 8002214:	430a      	orrs	r2, r1
 8002216:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002218:	f7ff f81a 	bl	8001250 <HAL_GetTick>
 800221c:	0003      	movs	r3, r0
 800221e:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002220:	e008      	b.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002222:	f7ff f815 	bl	8001250 <HAL_GetTick>
 8002226:	0002      	movs	r2, r0
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b64      	cmp	r3, #100	; 0x64
 800222e:	d901      	bls.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e0a6      	b.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002234:	4b56      	ldr	r3, [pc, #344]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	2380      	movs	r3, #128	; 0x80
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	4013      	ands	r3, r2
 800223e:	d0f0      	beq.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002240:	4b52      	ldr	r3, [pc, #328]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002242:	6a1a      	ldr	r2, [r3, #32]
 8002244:	23c0      	movs	r3, #192	; 0xc0
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	4013      	ands	r3, r2
 800224a:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d034      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x114>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685a      	ldr	r2, [r3, #4]
 8002256:	23c0      	movs	r3, #192	; 0xc0
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	4013      	ands	r3, r2
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	429a      	cmp	r2, r3
 8002260:	d02c      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002262:	4b4a      	ldr	r3, [pc, #296]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002264:	6a1b      	ldr	r3, [r3, #32]
 8002266:	4a4b      	ldr	r2, [pc, #300]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002268:	4013      	ands	r3, r2
 800226a:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800226c:	4b47      	ldr	r3, [pc, #284]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800226e:	6a1a      	ldr	r2, [r3, #32]
 8002270:	4b46      	ldr	r3, [pc, #280]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002272:	2180      	movs	r1, #128	; 0x80
 8002274:	0249      	lsls	r1, r1, #9
 8002276:	430a      	orrs	r2, r1
 8002278:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800227a:	4b44      	ldr	r3, [pc, #272]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800227c:	6a1a      	ldr	r2, [r3, #32]
 800227e:	4b43      	ldr	r3, [pc, #268]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002280:	4945      	ldr	r1, [pc, #276]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8002282:	400a      	ands	r2, r1
 8002284:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002286:	4b41      	ldr	r3, [pc, #260]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002288:	68fa      	ldr	r2, [r7, #12]
 800228a:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2201      	movs	r2, #1
 8002290:	4013      	ands	r3, r2
 8002292:	d013      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002294:	f7fe ffdc 	bl	8001250 <HAL_GetTick>
 8002298:	0003      	movs	r3, r0
 800229a:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800229c:	e009      	b.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800229e:	f7fe ffd7 	bl	8001250 <HAL_GetTick>
 80022a2:	0002      	movs	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	4a3c      	ldr	r2, [pc, #240]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e067      	b.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022b2:	4b36      	ldr	r3, [pc, #216]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80022b4:	6a1b      	ldr	r3, [r3, #32]
 80022b6:	2202      	movs	r2, #2
 80022b8:	4013      	ands	r3, r2
 80022ba:	d0f0      	beq.n	800229e <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022bc:	4b33      	ldr	r3, [pc, #204]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80022be:	6a1b      	ldr	r3, [r3, #32]
 80022c0:	4a34      	ldr	r2, [pc, #208]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80022c2:	4013      	ands	r3, r2
 80022c4:	0019      	movs	r1, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685a      	ldr	r2, [r3, #4]
 80022ca:	4b30      	ldr	r3, [pc, #192]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80022cc:	430a      	orrs	r2, r1
 80022ce:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80022d0:	2317      	movs	r3, #23
 80022d2:	18fb      	adds	r3, r7, r3
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d105      	bne.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022da:	4b2c      	ldr	r3, [pc, #176]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80022dc:	69da      	ldr	r2, [r3, #28]
 80022de:	4b2b      	ldr	r3, [pc, #172]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80022e0:	492f      	ldr	r1, [pc, #188]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80022e2:	400a      	ands	r2, r1
 80022e4:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2201      	movs	r2, #1
 80022ec:	4013      	ands	r3, r2
 80022ee:	d009      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022f0:	4b26      	ldr	r3, [pc, #152]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80022f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f4:	2203      	movs	r2, #3
 80022f6:	4393      	bics	r3, r2
 80022f8:	0019      	movs	r1, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	689a      	ldr	r2, [r3, #8]
 80022fe:	4b23      	ldr	r3, [pc, #140]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002300:	430a      	orrs	r2, r1
 8002302:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2202      	movs	r2, #2
 800230a:	4013      	ands	r3, r2
 800230c:	d009      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800230e:	4b1f      	ldr	r3, [pc, #124]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	4a24      	ldr	r2, [pc, #144]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002314:	4013      	ands	r3, r2
 8002316:	0019      	movs	r1, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	68da      	ldr	r2, [r3, #12]
 800231c:	4b1b      	ldr	r3, [pc, #108]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800231e:	430a      	orrs	r2, r1
 8002320:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	2380      	movs	r3, #128	; 0x80
 8002328:	02db      	lsls	r3, r3, #11
 800232a:	4013      	ands	r3, r2
 800232c:	d009      	beq.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800232e:	4b17      	ldr	r3, [pc, #92]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	4a1d      	ldr	r2, [pc, #116]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002334:	4013      	ands	r3, r2
 8002336:	0019      	movs	r1, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	691a      	ldr	r2, [r3, #16]
 800233c:	4b13      	ldr	r3, [pc, #76]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800233e:	430a      	orrs	r2, r1
 8002340:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2220      	movs	r2, #32
 8002348:	4013      	ands	r3, r2
 800234a:	d009      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800234c:	4b0f      	ldr	r3, [pc, #60]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800234e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002350:	2210      	movs	r2, #16
 8002352:	4393      	bics	r3, r2
 8002354:	0019      	movs	r1, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	695a      	ldr	r2, [r3, #20]
 800235a:	4b0c      	ldr	r3, [pc, #48]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800235c:	430a      	orrs	r2, r1
 800235e:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	2380      	movs	r3, #128	; 0x80
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	4013      	ands	r3, r2
 800236a:	d009      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800236c:	4b07      	ldr	r3, [pc, #28]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800236e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002370:	2240      	movs	r2, #64	; 0x40
 8002372:	4393      	bics	r3, r2
 8002374:	0019      	movs	r1, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	699a      	ldr	r2, [r3, #24]
 800237a:	4b04      	ldr	r3, [pc, #16]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800237c:	430a      	orrs	r2, r1
 800237e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002380:	2300      	movs	r3, #0
}
 8002382:	0018      	movs	r0, r3
 8002384:	46bd      	mov	sp, r7
 8002386:	b006      	add	sp, #24
 8002388:	bd80      	pop	{r7, pc}
 800238a:	46c0      	nop			; (mov r8, r8)
 800238c:	40021000 	.word	0x40021000
 8002390:	40007000 	.word	0x40007000
 8002394:	fffffcff 	.word	0xfffffcff
 8002398:	fffeffff 	.word	0xfffeffff
 800239c:	00001388 	.word	0x00001388
 80023a0:	efffffff 	.word	0xefffffff
 80023a4:	fffcffff 	.word	0xfffcffff
 80023a8:	fff3ffff 	.word	0xfff3ffff

080023ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e08a      	b.n	80024d4 <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	225d      	movs	r2, #93	; 0x5d
 80023c8:	5c9b      	ldrb	r3, [r3, r2]
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d107      	bne.n	80023e0 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	225c      	movs	r2, #92	; 0x5c
 80023d4:	2100      	movs	r1, #0
 80023d6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	0018      	movs	r0, r3
 80023dc:	f7fe fab6 	bl	800094c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	225d      	movs	r2, #93	; 0x5d
 80023e4:	2102      	movs	r1, #2
 80023e6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2140      	movs	r1, #64	; 0x40
 80023f4:	438a      	bics	r2, r1
 80023f6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	68da      	ldr	r2, [r3, #12]
 80023fc:	23e0      	movs	r3, #224	; 0xe0
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	429a      	cmp	r2, r3
 8002402:	d902      	bls.n	800240a <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002404:	2300      	movs	r3, #0
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	e002      	b.n	8002410 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800240a:	2380      	movs	r3, #128	; 0x80
 800240c:	015b      	lsls	r3, r3, #5
 800240e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	68da      	ldr	r2, [r3, #12]
 8002414:	23f0      	movs	r3, #240	; 0xf0
 8002416:	011b      	lsls	r3, r3, #4
 8002418:	429a      	cmp	r2, r3
 800241a:	d008      	beq.n	800242e <HAL_SPI_Init+0x82>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	68da      	ldr	r2, [r3, #12]
 8002420:	23e0      	movs	r3, #224	; 0xe0
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	429a      	cmp	r2, r3
 8002426:	d002      	beq.n	800242e <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002432:	2b00      	cmp	r3, #0
 8002434:	d10c      	bne.n	8002450 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	68da      	ldr	r2, [r3, #12]
 800243a:	23e0      	movs	r3, #224	; 0xe0
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	429a      	cmp	r2, r3
 8002440:	d903      	bls.n	800244a <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2202      	movs	r2, #2
 8002446:	631a      	str	r2, [r3, #48]	; 0x30
 8002448:	e002      	b.n	8002450 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2201      	movs	r2, #1
 800244e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685a      	ldr	r2, [r3, #4]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	431a      	orrs	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	431a      	orrs	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	695b      	ldr	r3, [r3, #20]
 8002464:	431a      	orrs	r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6999      	ldr	r1, [r3, #24]
 800246a:	2380      	movs	r3, #128	; 0x80
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	400b      	ands	r3, r1
 8002470:	431a      	orrs	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	69db      	ldr	r3, [r3, #28]
 8002476:	431a      	orrs	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a1b      	ldr	r3, [r3, #32]
 800247c:	431a      	orrs	r2, r3
 800247e:	0011      	movs	r1, r2
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	430a      	orrs	r2, r1
 800248a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	0c1b      	lsrs	r3, r3, #16
 8002492:	2204      	movs	r2, #4
 8002494:	401a      	ands	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249a:	431a      	orrs	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024a0:	431a      	orrs	r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	431a      	orrs	r2, r3
 80024a8:	0011      	movs	r1, r2
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	430a      	orrs	r2, r1
 80024b2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	69da      	ldr	r2, [r3, #28]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4907      	ldr	r1, [pc, #28]	; (80024dc <HAL_SPI_Init+0x130>)
 80024c0:	400a      	ands	r2, r1
 80024c2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	225d      	movs	r2, #93	; 0x5d
 80024ce:	2101      	movs	r1, #1
 80024d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	0018      	movs	r0, r3
 80024d6:	46bd      	mov	sp, r7
 80024d8:	b004      	add	sp, #16
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	fffff7ff 	.word	0xfffff7ff

080024e0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b088      	sub	sp, #32
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	603b      	str	r3, [r7, #0]
 80024ec:	1dbb      	adds	r3, r7, #6
 80024ee:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80024f0:	231f      	movs	r3, #31
 80024f2:	18fb      	adds	r3, r7, r3
 80024f4:	2200      	movs	r2, #0
 80024f6:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	225c      	movs	r2, #92	; 0x5c
 80024fc:	5c9b      	ldrb	r3, [r3, r2]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d101      	bne.n	8002506 <HAL_SPI_Transmit+0x26>
 8002502:	2302      	movs	r3, #2
 8002504:	e169      	b.n	80027da <HAL_SPI_Transmit+0x2fa>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	225c      	movs	r2, #92	; 0x5c
 800250a:	2101      	movs	r1, #1
 800250c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800250e:	f7fe fe9f 	bl	8001250 <HAL_GetTick>
 8002512:	0003      	movs	r3, r0
 8002514:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002516:	2316      	movs	r3, #22
 8002518:	18fb      	adds	r3, r7, r3
 800251a:	1dba      	adds	r2, r7, #6
 800251c:	8812      	ldrh	r2, [r2, #0]
 800251e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	225d      	movs	r2, #93	; 0x5d
 8002524:	5c9b      	ldrb	r3, [r3, r2]
 8002526:	b2db      	uxtb	r3, r3
 8002528:	2b01      	cmp	r3, #1
 800252a:	d004      	beq.n	8002536 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800252c:	231f      	movs	r3, #31
 800252e:	18fb      	adds	r3, r7, r3
 8002530:	2202      	movs	r2, #2
 8002532:	701a      	strb	r2, [r3, #0]
    goto error;
 8002534:	e146      	b.n	80027c4 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d003      	beq.n	8002544 <HAL_SPI_Transmit+0x64>
 800253c:	1dbb      	adds	r3, r7, #6
 800253e:	881b      	ldrh	r3, [r3, #0]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d104      	bne.n	800254e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002544:	231f      	movs	r3, #31
 8002546:	18fb      	adds	r3, r7, r3
 8002548:	2201      	movs	r2, #1
 800254a:	701a      	strb	r2, [r3, #0]
    goto error;
 800254c:	e13a      	b.n	80027c4 <HAL_SPI_Transmit+0x2e4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	225d      	movs	r2, #93	; 0x5d
 8002552:	2103      	movs	r1, #3
 8002554:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	68ba      	ldr	r2, [r7, #8]
 8002560:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	1dba      	adds	r2, r7, #6
 8002566:	8812      	ldrh	r2, [r2, #0]
 8002568:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	1dba      	adds	r2, r7, #6
 800256e:	8812      	ldrh	r2, [r2, #0]
 8002570:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2200      	movs	r2, #0
 8002576:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2244      	movs	r2, #68	; 0x44
 800257c:	2100      	movs	r1, #0
 800257e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2246      	movs	r2, #70	; 0x46
 8002584:	2100      	movs	r1, #0
 8002586:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2200      	movs	r2, #0
 800258c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2200      	movs	r2, #0
 8002592:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	689a      	ldr	r2, [r3, #8]
 8002598:	2380      	movs	r3, #128	; 0x80
 800259a:	021b      	lsls	r3, r3, #8
 800259c:	429a      	cmp	r2, r3
 800259e:	d108      	bne.n	80025b2 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2180      	movs	r1, #128	; 0x80
 80025ac:	01c9      	lsls	r1, r1, #7
 80025ae:	430a      	orrs	r2, r1
 80025b0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2240      	movs	r2, #64	; 0x40
 80025ba:	4013      	ands	r3, r2
 80025bc:	2b40      	cmp	r3, #64	; 0x40
 80025be:	d007      	beq.n	80025d0 <HAL_SPI_Transmit+0xf0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2140      	movs	r1, #64	; 0x40
 80025cc:	430a      	orrs	r2, r1
 80025ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	68da      	ldr	r2, [r3, #12]
 80025d4:	23e0      	movs	r3, #224	; 0xe0
 80025d6:	00db      	lsls	r3, r3, #3
 80025d8:	429a      	cmp	r2, r3
 80025da:	d94e      	bls.n	800267a <HAL_SPI_Transmit+0x19a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d004      	beq.n	80025ee <HAL_SPI_Transmit+0x10e>
 80025e4:	2316      	movs	r3, #22
 80025e6:	18fb      	adds	r3, r7, r3
 80025e8:	881b      	ldrh	r3, [r3, #0]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d13f      	bne.n	800266e <HAL_SPI_Transmit+0x18e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025f2:	881a      	ldrh	r2, [r3, #0]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025fe:	1c9a      	adds	r2, r3, #2
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002608:	b29b      	uxth	r3, r3
 800260a:	3b01      	subs	r3, #1
 800260c:	b29a      	uxth	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002612:	e02c      	b.n	800266e <HAL_SPI_Transmit+0x18e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	2202      	movs	r2, #2
 800261c:	4013      	ands	r3, r2
 800261e:	2b02      	cmp	r3, #2
 8002620:	d112      	bne.n	8002648 <HAL_SPI_Transmit+0x168>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002626:	881a      	ldrh	r2, [r3, #0]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002632:	1c9a      	adds	r2, r3, #2
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800263c:	b29b      	uxth	r3, r3
 800263e:	3b01      	subs	r3, #1
 8002640:	b29a      	uxth	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002646:	e012      	b.n	800266e <HAL_SPI_Transmit+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002648:	f7fe fe02 	bl	8001250 <HAL_GetTick>
 800264c:	0002      	movs	r2, r0
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	429a      	cmp	r2, r3
 8002656:	d802      	bhi.n	800265e <HAL_SPI_Transmit+0x17e>
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	3301      	adds	r3, #1
 800265c:	d102      	bne.n	8002664 <HAL_SPI_Transmit+0x184>
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d104      	bne.n	800266e <HAL_SPI_Transmit+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 8002664:	231f      	movs	r3, #31
 8002666:	18fb      	adds	r3, r7, r3
 8002668:	2203      	movs	r2, #3
 800266a:	701a      	strb	r2, [r3, #0]
          goto error;
 800266c:	e0aa      	b.n	80027c4 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002672:	b29b      	uxth	r3, r3
 8002674:	2b00      	cmp	r3, #0
 8002676:	d1cd      	bne.n	8002614 <HAL_SPI_Transmit+0x134>
 8002678:	e080      	b.n	800277c <HAL_SPI_Transmit+0x29c>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d005      	beq.n	800268e <HAL_SPI_Transmit+0x1ae>
 8002682:	2316      	movs	r3, #22
 8002684:	18fb      	adds	r3, r7, r3
 8002686:	881b      	ldrh	r3, [r3, #0]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d000      	beq.n	800268e <HAL_SPI_Transmit+0x1ae>
 800268c:	e071      	b.n	8002772 <HAL_SPI_Transmit+0x292>
    {
      if (hspi->TxXferCount > 1U)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002692:	b29b      	uxth	r3, r3
 8002694:	2b01      	cmp	r3, #1
 8002696:	d912      	bls.n	80026be <HAL_SPI_Transmit+0x1de>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800269c:	881a      	ldrh	r2, [r3, #0]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a8:	1c9a      	adds	r2, r3, #2
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	3b02      	subs	r3, #2
 80026b6:	b29a      	uxth	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80026bc:	e059      	b.n	8002772 <HAL_SPI_Transmit+0x292>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	330c      	adds	r3, #12
 80026c8:	7812      	ldrb	r2, [r2, #0]
 80026ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d0:	1c5a      	adds	r2, r3, #1
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026da:	b29b      	uxth	r3, r3
 80026dc:	3b01      	subs	r3, #1
 80026de:	b29a      	uxth	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80026e4:	e045      	b.n	8002772 <HAL_SPI_Transmit+0x292>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	2202      	movs	r2, #2
 80026ee:	4013      	ands	r3, r2
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d12b      	bne.n	800274c <HAL_SPI_Transmit+0x26c>
      {
        if (hspi->TxXferCount > 1U)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d912      	bls.n	8002724 <HAL_SPI_Transmit+0x244>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002702:	881a      	ldrh	r2, [r3, #0]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800270e:	1c9a      	adds	r2, r3, #2
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002718:	b29b      	uxth	r3, r3
 800271a:	3b02      	subs	r3, #2
 800271c:	b29a      	uxth	r2, r3
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002722:	e026      	b.n	8002772 <HAL_SPI_Transmit+0x292>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	330c      	adds	r3, #12
 800272e:	7812      	ldrb	r2, [r2, #0]
 8002730:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002736:	1c5a      	adds	r2, r3, #1
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002740:	b29b      	uxth	r3, r3
 8002742:	3b01      	subs	r3, #1
 8002744:	b29a      	uxth	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	87da      	strh	r2, [r3, #62]	; 0x3e
 800274a:	e012      	b.n	8002772 <HAL_SPI_Transmit+0x292>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800274c:	f7fe fd80 	bl	8001250 <HAL_GetTick>
 8002750:	0002      	movs	r2, r0
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	683a      	ldr	r2, [r7, #0]
 8002758:	429a      	cmp	r2, r3
 800275a:	d802      	bhi.n	8002762 <HAL_SPI_Transmit+0x282>
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	3301      	adds	r3, #1
 8002760:	d102      	bne.n	8002768 <HAL_SPI_Transmit+0x288>
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d104      	bne.n	8002772 <HAL_SPI_Transmit+0x292>
        {
          errorcode = HAL_TIMEOUT;
 8002768:	231f      	movs	r3, #31
 800276a:	18fb      	adds	r3, r7, r3
 800276c:	2203      	movs	r2, #3
 800276e:	701a      	strb	r2, [r3, #0]
          goto error;
 8002770:	e028      	b.n	80027c4 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002776:	b29b      	uxth	r3, r3
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1b4      	bne.n	80026e6 <HAL_SPI_Transmit+0x206>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	6839      	ldr	r1, [r7, #0]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	0018      	movs	r0, r3
 8002784:	f000 fb4c 	bl	8002e20 <SPI_EndRxTxTransaction>
 8002788:	1e03      	subs	r3, r0, #0
 800278a:	d002      	beq.n	8002792 <HAL_SPI_Transmit+0x2b2>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2220      	movs	r2, #32
 8002790:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d10a      	bne.n	80027b0 <HAL_SPI_Transmit+0x2d0>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800279a:	2300      	movs	r3, #0
 800279c:	613b      	str	r3, [r7, #16]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	613b      	str	r3, [r7, #16]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	613b      	str	r3, [r7, #16]
 80027ae:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d004      	beq.n	80027c2 <HAL_SPI_Transmit+0x2e2>
  {
    errorcode = HAL_ERROR;
 80027b8:	231f      	movs	r3, #31
 80027ba:	18fb      	adds	r3, r7, r3
 80027bc:	2201      	movs	r2, #1
 80027be:	701a      	strb	r2, [r3, #0]
 80027c0:	e000      	b.n	80027c4 <HAL_SPI_Transmit+0x2e4>
  }

error:
 80027c2:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	225d      	movs	r2, #93	; 0x5d
 80027c8:	2101      	movs	r1, #1
 80027ca:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	225c      	movs	r2, #92	; 0x5c
 80027d0:	2100      	movs	r1, #0
 80027d2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80027d4:	231f      	movs	r3, #31
 80027d6:	18fb      	adds	r3, r7, r3
 80027d8:	781b      	ldrb	r3, [r3, #0]
}
 80027da:	0018      	movs	r0, r3
 80027dc:	46bd      	mov	sp, r7
 80027de:	b008      	add	sp, #32
 80027e0:	bd80      	pop	{r7, pc}
	...

080027e4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b08a      	sub	sp, #40	; 0x28
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
 80027f0:	001a      	movs	r2, r3
 80027f2:	1cbb      	adds	r3, r7, #2
 80027f4:	801a      	strh	r2, [r3, #0]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80027f6:	2301      	movs	r3, #1
 80027f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80027fa:	2323      	movs	r3, #35	; 0x23
 80027fc:	18fb      	adds	r3, r7, r3
 80027fe:	2200      	movs	r2, #0
 8002800:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	225c      	movs	r2, #92	; 0x5c
 8002806:	5c9b      	ldrb	r3, [r3, r2]
 8002808:	2b01      	cmp	r3, #1
 800280a:	d101      	bne.n	8002810 <HAL_SPI_TransmitReceive+0x2c>
 800280c:	2302      	movs	r3, #2
 800280e:	e21f      	b.n	8002c50 <HAL_SPI_TransmitReceive+0x46c>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	225c      	movs	r2, #92	; 0x5c
 8002814:	2101      	movs	r1, #1
 8002816:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002818:	f7fe fd1a 	bl	8001250 <HAL_GetTick>
 800281c:	0003      	movs	r3, r0
 800281e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002820:	201b      	movs	r0, #27
 8002822:	183b      	adds	r3, r7, r0
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	215d      	movs	r1, #93	; 0x5d
 8002828:	5c52      	ldrb	r2, [r2, r1]
 800282a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002832:	2312      	movs	r3, #18
 8002834:	18fb      	adds	r3, r7, r3
 8002836:	1cba      	adds	r2, r7, #2
 8002838:	8812      	ldrh	r2, [r2, #0]
 800283a:	801a      	strh	r2, [r3, #0]
  initial_RxXferCount = Size;
 800283c:	2310      	movs	r3, #16
 800283e:	18fb      	adds	r3, r7, r3
 8002840:	1cba      	adds	r2, r7, #2
 8002842:	8812      	ldrh	r2, [r2, #0]
 8002844:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002846:	183b      	adds	r3, r7, r0
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d012      	beq.n	8002874 <HAL_SPI_TransmitReceive+0x90>
 800284e:	697a      	ldr	r2, [r7, #20]
 8002850:	2382      	movs	r3, #130	; 0x82
 8002852:	005b      	lsls	r3, r3, #1
 8002854:	429a      	cmp	r2, r3
 8002856:	d108      	bne.n	800286a <HAL_SPI_TransmitReceive+0x86>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d104      	bne.n	800286a <HAL_SPI_TransmitReceive+0x86>
 8002860:	231b      	movs	r3, #27
 8002862:	18fb      	adds	r3, r7, r3
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	2b04      	cmp	r3, #4
 8002868:	d004      	beq.n	8002874 <HAL_SPI_TransmitReceive+0x90>
  {
    errorcode = HAL_BUSY;
 800286a:	2323      	movs	r3, #35	; 0x23
 800286c:	18fb      	adds	r3, r7, r3
 800286e:	2202      	movs	r2, #2
 8002870:	701a      	strb	r2, [r3, #0]
    goto error;
 8002872:	e1e2      	b.n	8002c3a <HAL_SPI_TransmitReceive+0x456>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d006      	beq.n	8002888 <HAL_SPI_TransmitReceive+0xa4>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d003      	beq.n	8002888 <HAL_SPI_TransmitReceive+0xa4>
 8002880:	1cbb      	adds	r3, r7, #2
 8002882:	881b      	ldrh	r3, [r3, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d104      	bne.n	8002892 <HAL_SPI_TransmitReceive+0xae>
  {
    errorcode = HAL_ERROR;
 8002888:	2323      	movs	r3, #35	; 0x23
 800288a:	18fb      	adds	r3, r7, r3
 800288c:	2201      	movs	r2, #1
 800288e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002890:	e1d3      	b.n	8002c3a <HAL_SPI_TransmitReceive+0x456>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	225d      	movs	r2, #93	; 0x5d
 8002896:	5c9b      	ldrb	r3, [r3, r2]
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b04      	cmp	r3, #4
 800289c:	d003      	beq.n	80028a6 <HAL_SPI_TransmitReceive+0xc2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	225d      	movs	r2, #93	; 0x5d
 80028a2:	2105      	movs	r1, #5
 80028a4:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	1cba      	adds	r2, r7, #2
 80028b6:	2146      	movs	r1, #70	; 0x46
 80028b8:	8812      	ldrh	r2, [r2, #0]
 80028ba:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	1cba      	adds	r2, r7, #2
 80028c0:	2144      	movs	r1, #68	; 0x44
 80028c2:	8812      	ldrh	r2, [r2, #0]
 80028c4:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	68ba      	ldr	r2, [r7, #8]
 80028ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	1cba      	adds	r2, r7, #2
 80028d0:	8812      	ldrh	r2, [r2, #0]
 80028d2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	1cba      	adds	r2, r7, #2
 80028d8:	8812      	ldrh	r2, [r2, #0]
 80028da:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2200      	movs	r2, #0
 80028e0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2200      	movs	r2, #0
 80028e6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	68da      	ldr	r2, [r3, #12]
 80028ec:	23e0      	movs	r3, #224	; 0xe0
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d804      	bhi.n	80028fe <HAL_SPI_TransmitReceive+0x11a>
 80028f4:	2310      	movs	r3, #16
 80028f6:	18fb      	adds	r3, r7, r3
 80028f8:	881b      	ldrh	r3, [r3, #0]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d908      	bls.n	8002910 <HAL_SPI_TransmitReceive+0x12c>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	685a      	ldr	r2, [r3, #4]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	49ca      	ldr	r1, [pc, #808]	; (8002c34 <HAL_SPI_TransmitReceive+0x450>)
 800290a:	400a      	ands	r2, r1
 800290c:	605a      	str	r2, [r3, #4]
 800290e:	e008      	b.n	8002922 <HAL_SPI_TransmitReceive+0x13e>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	685a      	ldr	r2, [r3, #4]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2180      	movs	r1, #128	; 0x80
 800291c:	0149      	lsls	r1, r1, #5
 800291e:	430a      	orrs	r2, r1
 8002920:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2240      	movs	r2, #64	; 0x40
 800292a:	4013      	ands	r3, r2
 800292c:	2b40      	cmp	r3, #64	; 0x40
 800292e:	d007      	beq.n	8002940 <HAL_SPI_TransmitReceive+0x15c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2140      	movs	r1, #64	; 0x40
 800293c:	430a      	orrs	r2, r1
 800293e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	68da      	ldr	r2, [r3, #12]
 8002944:	23e0      	movs	r3, #224	; 0xe0
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	429a      	cmp	r2, r3
 800294a:	d800      	bhi.n	800294e <HAL_SPI_TransmitReceive+0x16a>
 800294c:	e07f      	b.n	8002a4e <HAL_SPI_TransmitReceive+0x26a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d005      	beq.n	8002962 <HAL_SPI_TransmitReceive+0x17e>
 8002956:	2312      	movs	r3, #18
 8002958:	18fb      	adds	r3, r7, r3
 800295a:	881b      	ldrh	r3, [r3, #0]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d000      	beq.n	8002962 <HAL_SPI_TransmitReceive+0x17e>
 8002960:	e069      	b.n	8002a36 <HAL_SPI_TransmitReceive+0x252>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002966:	881a      	ldrh	r2, [r3, #0]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002972:	1c9a      	adds	r2, r3, #2
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800297c:	b29b      	uxth	r3, r3
 800297e:	3b01      	subs	r3, #1
 8002980:	b29a      	uxth	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002986:	e056      	b.n	8002a36 <HAL_SPI_TransmitReceive+0x252>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	2202      	movs	r2, #2
 8002990:	4013      	ands	r3, r2
 8002992:	2b02      	cmp	r3, #2
 8002994:	d11b      	bne.n	80029ce <HAL_SPI_TransmitReceive+0x1ea>
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800299a:	b29b      	uxth	r3, r3
 800299c:	2b00      	cmp	r3, #0
 800299e:	d016      	beq.n	80029ce <HAL_SPI_TransmitReceive+0x1ea>
 80029a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d113      	bne.n	80029ce <HAL_SPI_TransmitReceive+0x1ea>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029aa:	881a      	ldrh	r2, [r3, #0]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b6:	1c9a      	adds	r2, r3, #2
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	3b01      	subs	r3, #1
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80029ca:	2300      	movs	r3, #0
 80029cc:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	2201      	movs	r2, #1
 80029d6:	4013      	ands	r3, r2
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d11c      	bne.n	8002a16 <HAL_SPI_TransmitReceive+0x232>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2246      	movs	r2, #70	; 0x46
 80029e0:	5a9b      	ldrh	r3, [r3, r2]
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d016      	beq.n	8002a16 <HAL_SPI_TransmitReceive+0x232>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68da      	ldr	r2, [r3, #12]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f2:	b292      	uxth	r2, r2
 80029f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	1c9a      	adds	r2, r3, #2
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2246      	movs	r2, #70	; 0x46
 8002a04:	5a9b      	ldrh	r3, [r3, r2]
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	b299      	uxth	r1, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2246      	movs	r2, #70	; 0x46
 8002a10:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a12:	2301      	movs	r3, #1
 8002a14:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002a16:	f7fe fc1b 	bl	8001250 <HAL_GetTick>
 8002a1a:	0002      	movs	r2, r0
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d807      	bhi.n	8002a36 <HAL_SPI_TransmitReceive+0x252>
 8002a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a28:	3301      	adds	r3, #1
 8002a2a:	d004      	beq.n	8002a36 <HAL_SPI_TransmitReceive+0x252>
      {
        errorcode = HAL_TIMEOUT;
 8002a2c:	2323      	movs	r3, #35	; 0x23
 8002a2e:	18fb      	adds	r3, r7, r3
 8002a30:	2203      	movs	r2, #3
 8002a32:	701a      	strb	r2, [r3, #0]
        goto error;
 8002a34:	e101      	b.n	8002c3a <HAL_SPI_TransmitReceive+0x456>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1a3      	bne.n	8002988 <HAL_SPI_TransmitReceive+0x1a4>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2246      	movs	r2, #70	; 0x46
 8002a44:	5a9b      	ldrh	r3, [r3, r2]
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d19d      	bne.n	8002988 <HAL_SPI_TransmitReceive+0x1a4>
 8002a4c:	e0e2      	b.n	8002c14 <HAL_SPI_TransmitReceive+0x430>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d005      	beq.n	8002a62 <HAL_SPI_TransmitReceive+0x27e>
 8002a56:	2312      	movs	r3, #18
 8002a58:	18fb      	adds	r3, r7, r3
 8002a5a:	881b      	ldrh	r3, [r3, #0]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d000      	beq.n	8002a62 <HAL_SPI_TransmitReceive+0x27e>
 8002a60:	e0cb      	b.n	8002bfa <HAL_SPI_TransmitReceive+0x416>
    {
      if (hspi->TxXferCount > 1U)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d912      	bls.n	8002a92 <HAL_SPI_TransmitReceive+0x2ae>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a70:	881a      	ldrh	r2, [r3, #0]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a7c:	1c9a      	adds	r2, r3, #2
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	3b02      	subs	r3, #2
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002a90:	e0b3      	b.n	8002bfa <HAL_SPI_TransmitReceive+0x416>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	330c      	adds	r3, #12
 8002a9c:	7812      	ldrb	r2, [r2, #0]
 8002a9e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa4:	1c5a      	adds	r2, r3, #1
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ab8:	e09f      	b.n	8002bfa <HAL_SPI_TransmitReceive+0x416>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	2202      	movs	r2, #2
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d134      	bne.n	8002b32 <HAL_SPI_TransmitReceive+0x34e>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d02f      	beq.n	8002b32 <HAL_SPI_TransmitReceive+0x34e>
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d12c      	bne.n	8002b32 <HAL_SPI_TransmitReceive+0x34e>
      {
        if (hspi->TxXferCount > 1U)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d912      	bls.n	8002b08 <HAL_SPI_TransmitReceive+0x324>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae6:	881a      	ldrh	r2, [r3, #0]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af2:	1c9a      	adds	r2, r3, #2
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	3b02      	subs	r3, #2
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002b06:	e012      	b.n	8002b2e <HAL_SPI_TransmitReceive+0x34a>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	330c      	adds	r3, #12
 8002b12:	7812      	ldrb	r2, [r2, #0]
 8002b14:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b1a:	1c5a      	adds	r2, r3, #1
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	3b01      	subs	r3, #1
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	2201      	movs	r2, #1
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d149      	bne.n	8002bd4 <HAL_SPI_TransmitReceive+0x3f0>
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2246      	movs	r2, #70	; 0x46
 8002b44:	5a9b      	ldrh	r3, [r3, r2]
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d043      	beq.n	8002bd4 <HAL_SPI_TransmitReceive+0x3f0>
      {
        if (hspi->RxXferCount > 1U)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2246      	movs	r2, #70	; 0x46
 8002b50:	5a9b      	ldrh	r3, [r3, r2]
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d924      	bls.n	8002ba2 <HAL_SPI_TransmitReceive+0x3be>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68da      	ldr	r2, [r3, #12]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b62:	b292      	uxth	r2, r2
 8002b64:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	1c9a      	adds	r2, r3, #2
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2246      	movs	r2, #70	; 0x46
 8002b74:	5a9b      	ldrh	r3, [r3, r2]
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	3b02      	subs	r3, #2
 8002b7a:	b299      	uxth	r1, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2246      	movs	r2, #70	; 0x46
 8002b80:	5299      	strh	r1, [r3, r2]
          if (hspi->RxXferCount <= 1U)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2246      	movs	r2, #70	; 0x46
 8002b86:	5a9b      	ldrh	r3, [r3, r2]
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d820      	bhi.n	8002bd0 <HAL_SPI_TransmitReceive+0x3ec>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	685a      	ldr	r2, [r3, #4]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2180      	movs	r1, #128	; 0x80
 8002b9a:	0149      	lsls	r1, r1, #5
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	605a      	str	r2, [r3, #4]
 8002ba0:	e016      	b.n	8002bd0 <HAL_SPI_TransmitReceive+0x3ec>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	330c      	adds	r3, #12
 8002ba8:	001a      	movs	r2, r3
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	7812      	ldrb	r2, [r2, #0]
 8002bb0:	b2d2      	uxtb	r2, r2
 8002bb2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb8:	1c5a      	adds	r2, r3, #1
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2246      	movs	r2, #70	; 0x46
 8002bc2:	5a9b      	ldrh	r3, [r3, r2]
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	b299      	uxth	r1, r3
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2246      	movs	r2, #70	; 0x46
 8002bce:	5299      	strh	r1, [r3, r2]
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002bd4:	f7fe fb3c 	bl	8001250 <HAL_GetTick>
 8002bd8:	0002      	movs	r2, r0
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d802      	bhi.n	8002bea <HAL_SPI_TransmitReceive+0x406>
 8002be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be6:	3301      	adds	r3, #1
 8002be8:	d102      	bne.n	8002bf0 <HAL_SPI_TransmitReceive+0x40c>
 8002bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d104      	bne.n	8002bfa <HAL_SPI_TransmitReceive+0x416>
      {
        errorcode = HAL_TIMEOUT;
 8002bf0:	2323      	movs	r3, #35	; 0x23
 8002bf2:	18fb      	adds	r3, r7, r3
 8002bf4:	2203      	movs	r2, #3
 8002bf6:	701a      	strb	r2, [r3, #0]
        goto error;
 8002bf8:	e01f      	b.n	8002c3a <HAL_SPI_TransmitReceive+0x456>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d000      	beq.n	8002c06 <HAL_SPI_TransmitReceive+0x422>
 8002c04:	e759      	b.n	8002aba <HAL_SPI_TransmitReceive+0x2d6>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2246      	movs	r2, #70	; 0x46
 8002c0a:	5a9b      	ldrh	r3, [r3, r2]
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d000      	beq.n	8002c14 <HAL_SPI_TransmitReceive+0x430>
 8002c12:	e752      	b.n	8002aba <HAL_SPI_TransmitReceive+0x2d6>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c14:	69fa      	ldr	r2, [r7, #28]
 8002c16:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	0018      	movs	r0, r3
 8002c1c:	f000 f900 	bl	8002e20 <SPI_EndRxTxTransaction>
 8002c20:	1e03      	subs	r3, r0, #0
 8002c22:	d009      	beq.n	8002c38 <HAL_SPI_TransmitReceive+0x454>
  {
    errorcode = HAL_ERROR;
 8002c24:	2323      	movs	r3, #35	; 0x23
 8002c26:	18fb      	adds	r3, r7, r3
 8002c28:	2201      	movs	r2, #1
 8002c2a:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2220      	movs	r2, #32
 8002c30:	661a      	str	r2, [r3, #96]	; 0x60
 8002c32:	e002      	b.n	8002c3a <HAL_SPI_TransmitReceive+0x456>
 8002c34:	ffffefff 	.word	0xffffefff
  }

error :
 8002c38:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	225d      	movs	r2, #93	; 0x5d
 8002c3e:	2101      	movs	r1, #1
 8002c40:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	225c      	movs	r2, #92	; 0x5c
 8002c46:	2100      	movs	r1, #0
 8002c48:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002c4a:	2323      	movs	r3, #35	; 0x23
 8002c4c:	18fb      	adds	r3, r7, r3
 8002c4e:	781b      	ldrb	r3, [r3, #0]
}
 8002c50:	0018      	movs	r0, r3
 8002c52:	46bd      	mov	sp, r7
 8002c54:	b00a      	add	sp, #40	; 0x28
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	603b      	str	r3, [r7, #0]
 8002c64:	1dfb      	adds	r3, r7, #7
 8002c66:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c68:	e050      	b.n	8002d0c <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	d04d      	beq.n	8002d0c <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002c70:	f7fe faee 	bl	8001250 <HAL_GetTick>
 8002c74:	0002      	movs	r2, r0
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d902      	bls.n	8002c86 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d142      	bne.n	8002d0c <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	685a      	ldr	r2, [r3, #4]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	21e0      	movs	r1, #224	; 0xe0
 8002c92:	438a      	bics	r2, r1
 8002c94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	685a      	ldr	r2, [r3, #4]
 8002c9a:	2382      	movs	r3, #130	; 0x82
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d113      	bne.n	8002cca <SPI_WaitFlagStateUntilTimeout+0x72>
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	689a      	ldr	r2, [r3, #8]
 8002ca6:	2380      	movs	r3, #128	; 0x80
 8002ca8:	021b      	lsls	r3, r3, #8
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d005      	beq.n	8002cba <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	689a      	ldr	r2, [r3, #8]
 8002cb2:	2380      	movs	r3, #128	; 0x80
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d107      	bne.n	8002cca <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2140      	movs	r1, #64	; 0x40
 8002cc6:	438a      	bics	r2, r1
 8002cc8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cce:	2380      	movs	r3, #128	; 0x80
 8002cd0:	019b      	lsls	r3, r3, #6
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d110      	bne.n	8002cf8 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4914      	ldr	r1, [pc, #80]	; (8002d34 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 8002ce2:	400a      	ands	r2, r1
 8002ce4:	601a      	str	r2, [r3, #0]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2180      	movs	r1, #128	; 0x80
 8002cf2:	0189      	lsls	r1, r1, #6
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	225d      	movs	r2, #93	; 0x5d
 8002cfc:	2101      	movs	r1, #1
 8002cfe:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	225c      	movs	r2, #92	; 0x5c
 8002d04:	2100      	movs	r1, #0
 8002d06:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e00f      	b.n	8002d2c <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	68ba      	ldr	r2, [r7, #8]
 8002d14:	4013      	ands	r3, r2
 8002d16:	68ba      	ldr	r2, [r7, #8]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	425a      	negs	r2, r3
 8002d1c:	4153      	adcs	r3, r2
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	001a      	movs	r2, r3
 8002d22:	1dfb      	adds	r3, r7, #7
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d19f      	bne.n	8002c6a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	0018      	movs	r0, r3
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	b004      	add	sp, #16
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	ffffdfff 	.word	0xffffdfff

08002d38 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
 8002d44:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8002d46:	e05c      	b.n	8002e02 <SPI_WaitFifoStateUntilTimeout+0xca>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002d48:	68ba      	ldr	r2, [r7, #8]
 8002d4a:	23c0      	movs	r3, #192	; 0xc0
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d106      	bne.n	8002d60 <SPI_WaitFifoStateUntilTimeout+0x28>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d103      	bne.n	8002d60 <SPI_WaitFifoStateUntilTimeout+0x28>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	330c      	adds	r3, #12
 8002d5e:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	3301      	adds	r3, #1
 8002d64:	d04d      	beq.n	8002e02 <SPI_WaitFifoStateUntilTimeout+0xca>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002d66:	f7fe fa73 	bl	8001250 <HAL_GetTick>
 8002d6a:	0002      	movs	r2, r0
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	683a      	ldr	r2, [r7, #0]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d902      	bls.n	8002d7c <SPI_WaitFifoStateUntilTimeout+0x44>
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d142      	bne.n	8002e02 <SPI_WaitFifoStateUntilTimeout+0xca>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	685a      	ldr	r2, [r3, #4]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	21e0      	movs	r1, #224	; 0xe0
 8002d88:	438a      	bics	r2, r1
 8002d8a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	685a      	ldr	r2, [r3, #4]
 8002d90:	2382      	movs	r3, #130	; 0x82
 8002d92:	005b      	lsls	r3, r3, #1
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d113      	bne.n	8002dc0 <SPI_WaitFifoStateUntilTimeout+0x88>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	689a      	ldr	r2, [r3, #8]
 8002d9c:	2380      	movs	r3, #128	; 0x80
 8002d9e:	021b      	lsls	r3, r3, #8
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d005      	beq.n	8002db0 <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	2380      	movs	r3, #128	; 0x80
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d107      	bne.n	8002dc0 <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2140      	movs	r1, #64	; 0x40
 8002dbc:	438a      	bics	r2, r1
 8002dbe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dc4:	2380      	movs	r3, #128	; 0x80
 8002dc6:	019b      	lsls	r3, r3, #6
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d110      	bne.n	8002dee <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          SPI_RESET_CRC(hspi);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4911      	ldr	r1, [pc, #68]	; (8002e1c <SPI_WaitFifoStateUntilTimeout+0xe4>)
 8002dd8:	400a      	ands	r2, r1
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2180      	movs	r1, #128	; 0x80
 8002de8:	0189      	lsls	r1, r1, #6
 8002dea:	430a      	orrs	r2, r1
 8002dec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	225d      	movs	r2, #93	; 0x5d
 8002df2:	2101      	movs	r1, #1
 8002df4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	225c      	movs	r2, #92	; 0x5c
 8002dfa:	2100      	movs	r1, #0
 8002dfc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e008      	b.n	8002e14 <SPI_WaitFifoStateUntilTimeout+0xdc>
  while ((hspi->Instance->SR & Fifo) != State)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	68ba      	ldr	r2, [r7, #8]
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d19a      	bne.n	8002d48 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	0018      	movs	r0, r3
 8002e16:	46bd      	mov	sp, r7
 8002e18:	b004      	add	sp, #16
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	ffffdfff 	.word	0xffffdfff

08002e20 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af02      	add	r7, sp, #8
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002e2c:	68ba      	ldr	r2, [r7, #8]
 8002e2e:	23c0      	movs	r3, #192	; 0xc0
 8002e30:	0159      	lsls	r1, r3, #5
 8002e32:	68f8      	ldr	r0, [r7, #12]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	9300      	str	r3, [sp, #0]
 8002e38:	0013      	movs	r3, r2
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f7ff ff7c 	bl	8002d38 <SPI_WaitFifoStateUntilTimeout>
 8002e40:	1e03      	subs	r3, r0, #0
 8002e42:	d007      	beq.n	8002e54 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e48:	2220      	movs	r2, #32
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e027      	b.n	8002ea4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e54:	68ba      	ldr	r2, [r7, #8]
 8002e56:	68f8      	ldr	r0, [r7, #12]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	9300      	str	r3, [sp, #0]
 8002e5c:	0013      	movs	r3, r2
 8002e5e:	2200      	movs	r2, #0
 8002e60:	2180      	movs	r1, #128	; 0x80
 8002e62:	f7ff fef9 	bl	8002c58 <SPI_WaitFlagStateUntilTimeout>
 8002e66:	1e03      	subs	r3, r0, #0
 8002e68:	d007      	beq.n	8002e7a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e6e:	2220      	movs	r2, #32
 8002e70:	431a      	orrs	r2, r3
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e014      	b.n	8002ea4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002e7a:	68ba      	ldr	r2, [r7, #8]
 8002e7c:	23c0      	movs	r3, #192	; 0xc0
 8002e7e:	00d9      	lsls	r1, r3, #3
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	9300      	str	r3, [sp, #0]
 8002e86:	0013      	movs	r3, r2
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f7ff ff55 	bl	8002d38 <SPI_WaitFifoStateUntilTimeout>
 8002e8e:	1e03      	subs	r3, r0, #0
 8002e90:	d007      	beq.n	8002ea2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e96:	2220      	movs	r2, #32
 8002e98:	431a      	orrs	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e000      	b.n	8002ea4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	0018      	movs	r0, r3
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	b004      	add	sp, #16
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e044      	b.n	8002f48 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d107      	bne.n	8002ed6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2270      	movs	r2, #112	; 0x70
 8002eca:	2100      	movs	r1, #0
 8002ecc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	0018      	movs	r0, r3
 8002ed2:	f7fd fe95 	bl	8000c00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2224      	movs	r2, #36	; 0x24
 8002eda:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2101      	movs	r1, #1
 8002ee8:	438a      	bics	r2, r1
 8002eea:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	0018      	movs	r0, r3
 8002ef0:	f000 f8d8 	bl	80030a4 <UART_SetConfig>
 8002ef4:	0003      	movs	r3, r0
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d101      	bne.n	8002efe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e024      	b.n	8002f48 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d003      	beq.n	8002f0e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	0018      	movs	r0, r3
 8002f0a:	f000 faf7 	bl	80034fc <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	685a      	ldr	r2, [r3, #4]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	490d      	ldr	r1, [pc, #52]	; (8002f50 <HAL_UART_Init+0xa4>)
 8002f1a:	400a      	ands	r2, r1
 8002f1c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	689a      	ldr	r2, [r3, #8]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	212a      	movs	r1, #42	; 0x2a
 8002f2a:	438a      	bics	r2, r1
 8002f2c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2101      	movs	r1, #1
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	0018      	movs	r0, r3
 8002f42:	f000 fb8f 	bl	8003664 <UART_CheckIdleState>
 8002f46:	0003      	movs	r3, r0
}
 8002f48:	0018      	movs	r0, r3
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	b002      	add	sp, #8
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	ffffb7ff 	.word	0xffffb7ff

08002f54 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b08a      	sub	sp, #40	; 0x28
 8002f58:	af02      	add	r7, sp, #8
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	603b      	str	r3, [r7, #0]
 8002f60:	1dbb      	adds	r3, r7, #6
 8002f62:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f68:	2b20      	cmp	r3, #32
 8002f6a:	d000      	beq.n	8002f6e <HAL_UART_Transmit+0x1a>
 8002f6c:	e095      	b.n	800309a <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d003      	beq.n	8002f7c <HAL_UART_Transmit+0x28>
 8002f74:	1dbb      	adds	r3, r7, #6
 8002f76:	881b      	ldrh	r3, [r3, #0]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d101      	bne.n	8002f80 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e08d      	b.n	800309c <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	689a      	ldr	r2, [r3, #8]
 8002f84:	2380      	movs	r3, #128	; 0x80
 8002f86:	015b      	lsls	r3, r3, #5
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d109      	bne.n	8002fa0 <HAL_UART_Transmit+0x4c>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d105      	bne.n	8002fa0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	2201      	movs	r2, #1
 8002f98:	4013      	ands	r3, r2
 8002f9a:	d001      	beq.n	8002fa0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e07d      	b.n	800309c <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2270      	movs	r2, #112	; 0x70
 8002fa4:	5c9b      	ldrb	r3, [r3, r2]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d101      	bne.n	8002fae <HAL_UART_Transmit+0x5a>
 8002faa:	2302      	movs	r3, #2
 8002fac:	e076      	b.n	800309c <HAL_UART_Transmit+0x148>
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2270      	movs	r2, #112	; 0x70
 8002fb2:	2101      	movs	r1, #1
 8002fb4:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2221      	movs	r2, #33	; 0x21
 8002fc0:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002fc2:	f7fe f945 	bl	8001250 <HAL_GetTick>
 8002fc6:	0003      	movs	r3, r0
 8002fc8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	1dba      	adds	r2, r7, #6
 8002fce:	2150      	movs	r1, #80	; 0x50
 8002fd0:	8812      	ldrh	r2, [r2, #0]
 8002fd2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	1dba      	adds	r2, r7, #6
 8002fd8:	2152      	movs	r1, #82	; 0x52
 8002fda:	8812      	ldrh	r2, [r2, #0]
 8002fdc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	689a      	ldr	r2, [r3, #8]
 8002fe2:	2380      	movs	r3, #128	; 0x80
 8002fe4:	015b      	lsls	r3, r3, #5
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d108      	bne.n	8002ffc <HAL_UART_Transmit+0xa8>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d104      	bne.n	8002ffc <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	61bb      	str	r3, [r7, #24]
 8002ffa:	e003      	b.n	8003004 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003000:	2300      	movs	r3, #0
 8003002:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003004:	e02d      	b.n	8003062 <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003006:	697a      	ldr	r2, [r7, #20]
 8003008:	68f8      	ldr	r0, [r7, #12]
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	9300      	str	r3, [sp, #0]
 800300e:	0013      	movs	r3, r2
 8003010:	2200      	movs	r2, #0
 8003012:	2180      	movs	r1, #128	; 0x80
 8003014:	f000 fb6c 	bl	80036f0 <UART_WaitOnFlagUntilTimeout>
 8003018:	1e03      	subs	r3, r0, #0
 800301a:	d001      	beq.n	8003020 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e03d      	b.n	800309c <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d10b      	bne.n	800303e <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	881a      	ldrh	r2, [r3, #0]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	05d2      	lsls	r2, r2, #23
 8003030:	0dd2      	lsrs	r2, r2, #23
 8003032:	b292      	uxth	r2, r2
 8003034:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	3302      	adds	r3, #2
 800303a:	61bb      	str	r3, [r7, #24]
 800303c:	e008      	b.n	8003050 <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	781a      	ldrb	r2, [r3, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	b292      	uxth	r2, r2
 8003048:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	3301      	adds	r3, #1
 800304e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2252      	movs	r2, #82	; 0x52
 8003054:	5a9b      	ldrh	r3, [r3, r2]
 8003056:	b29b      	uxth	r3, r3
 8003058:	3b01      	subs	r3, #1
 800305a:	b299      	uxth	r1, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2252      	movs	r2, #82	; 0x52
 8003060:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2252      	movs	r2, #82	; 0x52
 8003066:	5a9b      	ldrh	r3, [r3, r2]
 8003068:	b29b      	uxth	r3, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1cb      	bne.n	8003006 <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800306e:	697a      	ldr	r2, [r7, #20]
 8003070:	68f8      	ldr	r0, [r7, #12]
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	9300      	str	r3, [sp, #0]
 8003076:	0013      	movs	r3, r2
 8003078:	2200      	movs	r2, #0
 800307a:	2140      	movs	r1, #64	; 0x40
 800307c:	f000 fb38 	bl	80036f0 <UART_WaitOnFlagUntilTimeout>
 8003080:	1e03      	subs	r3, r0, #0
 8003082:	d001      	beq.n	8003088 <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e009      	b.n	800309c <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2220      	movs	r2, #32
 800308c:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2270      	movs	r2, #112	; 0x70
 8003092:	2100      	movs	r1, #0
 8003094:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003096:	2300      	movs	r3, #0
 8003098:	e000      	b.n	800309c <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 800309a:	2302      	movs	r3, #2
  }
}
 800309c:	0018      	movs	r0, r3
 800309e:	46bd      	mov	sp, r7
 80030a0:	b008      	add	sp, #32
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b088      	sub	sp, #32
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80030ac:	2300      	movs	r3, #0
 80030ae:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80030b0:	2317      	movs	r3, #23
 80030b2:	18fb      	adds	r3, r7, r3
 80030b4:	2200      	movs	r2, #0
 80030b6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689a      	ldr	r2, [r3, #8]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	431a      	orrs	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	431a      	orrs	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	69db      	ldr	r3, [r3, #28]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4ac5      	ldr	r2, [pc, #788]	; (80033ec <UART_SetConfig+0x348>)
 80030d8:	4013      	ands	r3, r2
 80030da:	0019      	movs	r1, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	430a      	orrs	r2, r1
 80030e4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	4ac0      	ldr	r2, [pc, #768]	; (80033f0 <UART_SetConfig+0x34c>)
 80030ee:	4013      	ands	r3, r2
 80030f0:	0019      	movs	r1, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	68da      	ldr	r2, [r3, #12]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	430a      	orrs	r2, r1
 80030fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a1b      	ldr	r3, [r3, #32]
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	4313      	orrs	r3, r2
 800310c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	4ab7      	ldr	r2, [pc, #732]	; (80033f4 <UART_SetConfig+0x350>)
 8003116:	4013      	ands	r3, r2
 8003118:	0019      	movs	r1, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	430a      	orrs	r2, r1
 8003122:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4ab3      	ldr	r2, [pc, #716]	; (80033f8 <UART_SetConfig+0x354>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d125      	bne.n	800317a <UART_SetConfig+0xd6>
 800312e:	4bb3      	ldr	r3, [pc, #716]	; (80033fc <UART_SetConfig+0x358>)
 8003130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003132:	2203      	movs	r2, #3
 8003134:	4013      	ands	r3, r2
 8003136:	2b01      	cmp	r3, #1
 8003138:	d00f      	beq.n	800315a <UART_SetConfig+0xb6>
 800313a:	d304      	bcc.n	8003146 <UART_SetConfig+0xa2>
 800313c:	2b02      	cmp	r3, #2
 800313e:	d011      	beq.n	8003164 <UART_SetConfig+0xc0>
 8003140:	2b03      	cmp	r3, #3
 8003142:	d005      	beq.n	8003150 <UART_SetConfig+0xac>
 8003144:	e013      	b.n	800316e <UART_SetConfig+0xca>
 8003146:	231f      	movs	r3, #31
 8003148:	18fb      	adds	r3, r7, r3
 800314a:	2200      	movs	r2, #0
 800314c:	701a      	strb	r2, [r3, #0]
 800314e:	e0ba      	b.n	80032c6 <UART_SetConfig+0x222>
 8003150:	231f      	movs	r3, #31
 8003152:	18fb      	adds	r3, r7, r3
 8003154:	2202      	movs	r2, #2
 8003156:	701a      	strb	r2, [r3, #0]
 8003158:	e0b5      	b.n	80032c6 <UART_SetConfig+0x222>
 800315a:	231f      	movs	r3, #31
 800315c:	18fb      	adds	r3, r7, r3
 800315e:	2204      	movs	r2, #4
 8003160:	701a      	strb	r2, [r3, #0]
 8003162:	e0b0      	b.n	80032c6 <UART_SetConfig+0x222>
 8003164:	231f      	movs	r3, #31
 8003166:	18fb      	adds	r3, r7, r3
 8003168:	2208      	movs	r2, #8
 800316a:	701a      	strb	r2, [r3, #0]
 800316c:	e0ab      	b.n	80032c6 <UART_SetConfig+0x222>
 800316e:	231f      	movs	r3, #31
 8003170:	18fb      	adds	r3, r7, r3
 8003172:	2210      	movs	r2, #16
 8003174:	701a      	strb	r2, [r3, #0]
 8003176:	46c0      	nop			; (mov r8, r8)
 8003178:	e0a5      	b.n	80032c6 <UART_SetConfig+0x222>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4aa0      	ldr	r2, [pc, #640]	; (8003400 <UART_SetConfig+0x35c>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d132      	bne.n	80031ea <UART_SetConfig+0x146>
 8003184:	4b9d      	ldr	r3, [pc, #628]	; (80033fc <UART_SetConfig+0x358>)
 8003186:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003188:	23c0      	movs	r3, #192	; 0xc0
 800318a:	029b      	lsls	r3, r3, #10
 800318c:	4013      	ands	r3, r2
 800318e:	2280      	movs	r2, #128	; 0x80
 8003190:	0252      	lsls	r2, r2, #9
 8003192:	4293      	cmp	r3, r2
 8003194:	d019      	beq.n	80031ca <UART_SetConfig+0x126>
 8003196:	2280      	movs	r2, #128	; 0x80
 8003198:	0252      	lsls	r2, r2, #9
 800319a:	4293      	cmp	r3, r2
 800319c:	d802      	bhi.n	80031a4 <UART_SetConfig+0x100>
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d009      	beq.n	80031b6 <UART_SetConfig+0x112>
 80031a2:	e01c      	b.n	80031de <UART_SetConfig+0x13a>
 80031a4:	2280      	movs	r2, #128	; 0x80
 80031a6:	0292      	lsls	r2, r2, #10
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d013      	beq.n	80031d4 <UART_SetConfig+0x130>
 80031ac:	22c0      	movs	r2, #192	; 0xc0
 80031ae:	0292      	lsls	r2, r2, #10
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d005      	beq.n	80031c0 <UART_SetConfig+0x11c>
 80031b4:	e013      	b.n	80031de <UART_SetConfig+0x13a>
 80031b6:	231f      	movs	r3, #31
 80031b8:	18fb      	adds	r3, r7, r3
 80031ba:	2200      	movs	r2, #0
 80031bc:	701a      	strb	r2, [r3, #0]
 80031be:	e082      	b.n	80032c6 <UART_SetConfig+0x222>
 80031c0:	231f      	movs	r3, #31
 80031c2:	18fb      	adds	r3, r7, r3
 80031c4:	2202      	movs	r2, #2
 80031c6:	701a      	strb	r2, [r3, #0]
 80031c8:	e07d      	b.n	80032c6 <UART_SetConfig+0x222>
 80031ca:	231f      	movs	r3, #31
 80031cc:	18fb      	adds	r3, r7, r3
 80031ce:	2204      	movs	r2, #4
 80031d0:	701a      	strb	r2, [r3, #0]
 80031d2:	e078      	b.n	80032c6 <UART_SetConfig+0x222>
 80031d4:	231f      	movs	r3, #31
 80031d6:	18fb      	adds	r3, r7, r3
 80031d8:	2208      	movs	r2, #8
 80031da:	701a      	strb	r2, [r3, #0]
 80031dc:	e073      	b.n	80032c6 <UART_SetConfig+0x222>
 80031de:	231f      	movs	r3, #31
 80031e0:	18fb      	adds	r3, r7, r3
 80031e2:	2210      	movs	r2, #16
 80031e4:	701a      	strb	r2, [r3, #0]
 80031e6:	46c0      	nop			; (mov r8, r8)
 80031e8:	e06d      	b.n	80032c6 <UART_SetConfig+0x222>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a85      	ldr	r2, [pc, #532]	; (8003404 <UART_SetConfig+0x360>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d132      	bne.n	800325a <UART_SetConfig+0x1b6>
 80031f4:	4b81      	ldr	r3, [pc, #516]	; (80033fc <UART_SetConfig+0x358>)
 80031f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031f8:	23c0      	movs	r3, #192	; 0xc0
 80031fa:	031b      	lsls	r3, r3, #12
 80031fc:	4013      	ands	r3, r2
 80031fe:	2280      	movs	r2, #128	; 0x80
 8003200:	02d2      	lsls	r2, r2, #11
 8003202:	4293      	cmp	r3, r2
 8003204:	d019      	beq.n	800323a <UART_SetConfig+0x196>
 8003206:	2280      	movs	r2, #128	; 0x80
 8003208:	02d2      	lsls	r2, r2, #11
 800320a:	4293      	cmp	r3, r2
 800320c:	d802      	bhi.n	8003214 <UART_SetConfig+0x170>
 800320e:	2b00      	cmp	r3, #0
 8003210:	d009      	beq.n	8003226 <UART_SetConfig+0x182>
 8003212:	e01c      	b.n	800324e <UART_SetConfig+0x1aa>
 8003214:	2280      	movs	r2, #128	; 0x80
 8003216:	0312      	lsls	r2, r2, #12
 8003218:	4293      	cmp	r3, r2
 800321a:	d013      	beq.n	8003244 <UART_SetConfig+0x1a0>
 800321c:	22c0      	movs	r2, #192	; 0xc0
 800321e:	0312      	lsls	r2, r2, #12
 8003220:	4293      	cmp	r3, r2
 8003222:	d005      	beq.n	8003230 <UART_SetConfig+0x18c>
 8003224:	e013      	b.n	800324e <UART_SetConfig+0x1aa>
 8003226:	231f      	movs	r3, #31
 8003228:	18fb      	adds	r3, r7, r3
 800322a:	2200      	movs	r2, #0
 800322c:	701a      	strb	r2, [r3, #0]
 800322e:	e04a      	b.n	80032c6 <UART_SetConfig+0x222>
 8003230:	231f      	movs	r3, #31
 8003232:	18fb      	adds	r3, r7, r3
 8003234:	2202      	movs	r2, #2
 8003236:	701a      	strb	r2, [r3, #0]
 8003238:	e045      	b.n	80032c6 <UART_SetConfig+0x222>
 800323a:	231f      	movs	r3, #31
 800323c:	18fb      	adds	r3, r7, r3
 800323e:	2204      	movs	r2, #4
 8003240:	701a      	strb	r2, [r3, #0]
 8003242:	e040      	b.n	80032c6 <UART_SetConfig+0x222>
 8003244:	231f      	movs	r3, #31
 8003246:	18fb      	adds	r3, r7, r3
 8003248:	2208      	movs	r2, #8
 800324a:	701a      	strb	r2, [r3, #0]
 800324c:	e03b      	b.n	80032c6 <UART_SetConfig+0x222>
 800324e:	231f      	movs	r3, #31
 8003250:	18fb      	adds	r3, r7, r3
 8003252:	2210      	movs	r2, #16
 8003254:	701a      	strb	r2, [r3, #0]
 8003256:	46c0      	nop			; (mov r8, r8)
 8003258:	e035      	b.n	80032c6 <UART_SetConfig+0x222>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a6a      	ldr	r2, [pc, #424]	; (8003408 <UART_SetConfig+0x364>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d104      	bne.n	800326e <UART_SetConfig+0x1ca>
 8003264:	231f      	movs	r3, #31
 8003266:	18fb      	adds	r3, r7, r3
 8003268:	2200      	movs	r2, #0
 800326a:	701a      	strb	r2, [r3, #0]
 800326c:	e02b      	b.n	80032c6 <UART_SetConfig+0x222>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a66      	ldr	r2, [pc, #408]	; (800340c <UART_SetConfig+0x368>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d104      	bne.n	8003282 <UART_SetConfig+0x1de>
 8003278:	231f      	movs	r3, #31
 800327a:	18fb      	adds	r3, r7, r3
 800327c:	2200      	movs	r2, #0
 800327e:	701a      	strb	r2, [r3, #0]
 8003280:	e021      	b.n	80032c6 <UART_SetConfig+0x222>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a62      	ldr	r2, [pc, #392]	; (8003410 <UART_SetConfig+0x36c>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d104      	bne.n	8003296 <UART_SetConfig+0x1f2>
 800328c:	231f      	movs	r3, #31
 800328e:	18fb      	adds	r3, r7, r3
 8003290:	2200      	movs	r2, #0
 8003292:	701a      	strb	r2, [r3, #0]
 8003294:	e017      	b.n	80032c6 <UART_SetConfig+0x222>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a5e      	ldr	r2, [pc, #376]	; (8003414 <UART_SetConfig+0x370>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d104      	bne.n	80032aa <UART_SetConfig+0x206>
 80032a0:	231f      	movs	r3, #31
 80032a2:	18fb      	adds	r3, r7, r3
 80032a4:	2200      	movs	r2, #0
 80032a6:	701a      	strb	r2, [r3, #0]
 80032a8:	e00d      	b.n	80032c6 <UART_SetConfig+0x222>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a5a      	ldr	r2, [pc, #360]	; (8003418 <UART_SetConfig+0x374>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d104      	bne.n	80032be <UART_SetConfig+0x21a>
 80032b4:	231f      	movs	r3, #31
 80032b6:	18fb      	adds	r3, r7, r3
 80032b8:	2200      	movs	r2, #0
 80032ba:	701a      	strb	r2, [r3, #0]
 80032bc:	e003      	b.n	80032c6 <UART_SetConfig+0x222>
 80032be:	231f      	movs	r3, #31
 80032c0:	18fb      	adds	r3, r7, r3
 80032c2:	2210      	movs	r2, #16
 80032c4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	69da      	ldr	r2, [r3, #28]
 80032ca:	2380      	movs	r3, #128	; 0x80
 80032cc:	021b      	lsls	r3, r3, #8
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d000      	beq.n	80032d4 <UART_SetConfig+0x230>
 80032d2:	e07d      	b.n	80033d0 <UART_SetConfig+0x32c>
  {
    switch (clocksource)
 80032d4:	231f      	movs	r3, #31
 80032d6:	18fb      	adds	r3, r7, r3
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d01c      	beq.n	8003318 <UART_SetConfig+0x274>
 80032de:	dc02      	bgt.n	80032e6 <UART_SetConfig+0x242>
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d005      	beq.n	80032f0 <UART_SetConfig+0x24c>
 80032e4:	e04b      	b.n	800337e <UART_SetConfig+0x2da>
 80032e6:	2b04      	cmp	r3, #4
 80032e8:	d025      	beq.n	8003336 <UART_SetConfig+0x292>
 80032ea:	2b08      	cmp	r3, #8
 80032ec:	d037      	beq.n	800335e <UART_SetConfig+0x2ba>
 80032ee:	e046      	b.n	800337e <UART_SetConfig+0x2da>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032f0:	f7fe ff44 	bl	800217c <HAL_RCC_GetPCLK1Freq>
 80032f4:	0003      	movs	r3, r0
 80032f6:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	005a      	lsls	r2, r3, #1
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	085b      	lsrs	r3, r3, #1
 8003302:	18d2      	adds	r2, r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	0019      	movs	r1, r3
 800330a:	0010      	movs	r0, r2
 800330c:	f7fc fefa 	bl	8000104 <__udivsi3>
 8003310:	0003      	movs	r3, r0
 8003312:	b29b      	uxth	r3, r3
 8003314:	61bb      	str	r3, [r7, #24]
        break;
 8003316:	e037      	b.n	8003388 <UART_SetConfig+0x2e4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	085b      	lsrs	r3, r3, #1
 800331e:	4a3f      	ldr	r2, [pc, #252]	; (800341c <UART_SetConfig+0x378>)
 8003320:	189a      	adds	r2, r3, r2
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	0019      	movs	r1, r3
 8003328:	0010      	movs	r0, r2
 800332a:	f7fc feeb 	bl	8000104 <__udivsi3>
 800332e:	0003      	movs	r3, r0
 8003330:	b29b      	uxth	r3, r3
 8003332:	61bb      	str	r3, [r7, #24]
        break;
 8003334:	e028      	b.n	8003388 <UART_SetConfig+0x2e4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003336:	f7fe fe99 	bl	800206c <HAL_RCC_GetSysClockFreq>
 800333a:	0003      	movs	r3, r0
 800333c:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	005a      	lsls	r2, r3, #1
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	085b      	lsrs	r3, r3, #1
 8003348:	18d2      	adds	r2, r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	0019      	movs	r1, r3
 8003350:	0010      	movs	r0, r2
 8003352:	f7fc fed7 	bl	8000104 <__udivsi3>
 8003356:	0003      	movs	r3, r0
 8003358:	b29b      	uxth	r3, r3
 800335a:	61bb      	str	r3, [r7, #24]
        break;
 800335c:	e014      	b.n	8003388 <UART_SetConfig+0x2e4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	085b      	lsrs	r3, r3, #1
 8003364:	2280      	movs	r2, #128	; 0x80
 8003366:	0252      	lsls	r2, r2, #9
 8003368:	189a      	adds	r2, r3, r2
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	0019      	movs	r1, r3
 8003370:	0010      	movs	r0, r2
 8003372:	f7fc fec7 	bl	8000104 <__udivsi3>
 8003376:	0003      	movs	r3, r0
 8003378:	b29b      	uxth	r3, r3
 800337a:	61bb      	str	r3, [r7, #24]
        break;
 800337c:	e004      	b.n	8003388 <UART_SetConfig+0x2e4>
      default:
        ret = HAL_ERROR;
 800337e:	2317      	movs	r3, #23
 8003380:	18fb      	adds	r3, r7, r3
 8003382:	2201      	movs	r2, #1
 8003384:	701a      	strb	r2, [r3, #0]
        break;
 8003386:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	2b0f      	cmp	r3, #15
 800338c:	d91b      	bls.n	80033c6 <UART_SetConfig+0x322>
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	4a23      	ldr	r2, [pc, #140]	; (8003420 <UART_SetConfig+0x37c>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d817      	bhi.n	80033c6 <UART_SetConfig+0x322>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	b29a      	uxth	r2, r3
 800339a:	200a      	movs	r0, #10
 800339c:	183b      	adds	r3, r7, r0
 800339e:	210f      	movs	r1, #15
 80033a0:	438a      	bics	r2, r1
 80033a2:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	085b      	lsrs	r3, r3, #1
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	2207      	movs	r2, #7
 80033ac:	4013      	ands	r3, r2
 80033ae:	b299      	uxth	r1, r3
 80033b0:	183b      	adds	r3, r7, r0
 80033b2:	183a      	adds	r2, r7, r0
 80033b4:	8812      	ldrh	r2, [r2, #0]
 80033b6:	430a      	orrs	r2, r1
 80033b8:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	183a      	adds	r2, r7, r0
 80033c0:	8812      	ldrh	r2, [r2, #0]
 80033c2:	60da      	str	r2, [r3, #12]
 80033c4:	e088      	b.n	80034d8 <UART_SetConfig+0x434>
    }
    else
    {
      ret = HAL_ERROR;
 80033c6:	2317      	movs	r3, #23
 80033c8:	18fb      	adds	r3, r7, r3
 80033ca:	2201      	movs	r2, #1
 80033cc:	701a      	strb	r2, [r3, #0]
 80033ce:	e083      	b.n	80034d8 <UART_SetConfig+0x434>
    }
  }
  else
  {
    switch (clocksource)
 80033d0:	231f      	movs	r3, #31
 80033d2:	18fb      	adds	r3, r7, r3
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d037      	beq.n	800344a <UART_SetConfig+0x3a6>
 80033da:	dc02      	bgt.n	80033e2 <UART_SetConfig+0x33e>
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d021      	beq.n	8003424 <UART_SetConfig+0x380>
 80033e0:	e065      	b.n	80034ae <UART_SetConfig+0x40a>
 80033e2:	2b04      	cmp	r3, #4
 80033e4:	d040      	beq.n	8003468 <UART_SetConfig+0x3c4>
 80033e6:	2b08      	cmp	r3, #8
 80033e8:	d051      	beq.n	800348e <UART_SetConfig+0x3ea>
 80033ea:	e060      	b.n	80034ae <UART_SetConfig+0x40a>
 80033ec:	efff69f3 	.word	0xefff69f3
 80033f0:	ffffcfff 	.word	0xffffcfff
 80033f4:	fffff4ff 	.word	0xfffff4ff
 80033f8:	40013800 	.word	0x40013800
 80033fc:	40021000 	.word	0x40021000
 8003400:	40004400 	.word	0x40004400
 8003404:	40004800 	.word	0x40004800
 8003408:	40004c00 	.word	0x40004c00
 800340c:	40005000 	.word	0x40005000
 8003410:	40011400 	.word	0x40011400
 8003414:	40011800 	.word	0x40011800
 8003418:	40011c00 	.word	0x40011c00
 800341c:	00f42400 	.word	0x00f42400
 8003420:	0000ffff 	.word	0x0000ffff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003424:	f7fe feaa 	bl	800217c <HAL_RCC_GetPCLK1Freq>
 8003428:	0003      	movs	r3, r0
 800342a:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	085a      	lsrs	r2, r3, #1
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	18d2      	adds	r2, r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	0019      	movs	r1, r3
 800343c:	0010      	movs	r0, r2
 800343e:	f7fc fe61 	bl	8000104 <__udivsi3>
 8003442:	0003      	movs	r3, r0
 8003444:	b29b      	uxth	r3, r3
 8003446:	61bb      	str	r3, [r7, #24]
        break;
 8003448:	e036      	b.n	80034b8 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	085b      	lsrs	r3, r3, #1
 8003450:	4a28      	ldr	r2, [pc, #160]	; (80034f4 <UART_SetConfig+0x450>)
 8003452:	189a      	adds	r2, r3, r2
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	0019      	movs	r1, r3
 800345a:	0010      	movs	r0, r2
 800345c:	f7fc fe52 	bl	8000104 <__udivsi3>
 8003460:	0003      	movs	r3, r0
 8003462:	b29b      	uxth	r3, r3
 8003464:	61bb      	str	r3, [r7, #24]
        break;
 8003466:	e027      	b.n	80034b8 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003468:	f7fe fe00 	bl	800206c <HAL_RCC_GetSysClockFreq>
 800346c:	0003      	movs	r3, r0
 800346e:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	085a      	lsrs	r2, r3, #1
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	18d2      	adds	r2, r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	0019      	movs	r1, r3
 8003480:	0010      	movs	r0, r2
 8003482:	f7fc fe3f 	bl	8000104 <__udivsi3>
 8003486:	0003      	movs	r3, r0
 8003488:	b29b      	uxth	r3, r3
 800348a:	61bb      	str	r3, [r7, #24]
        break;
 800348c:	e014      	b.n	80034b8 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	085b      	lsrs	r3, r3, #1
 8003494:	2280      	movs	r2, #128	; 0x80
 8003496:	0212      	lsls	r2, r2, #8
 8003498:	189a      	adds	r2, r3, r2
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	0019      	movs	r1, r3
 80034a0:	0010      	movs	r0, r2
 80034a2:	f7fc fe2f 	bl	8000104 <__udivsi3>
 80034a6:	0003      	movs	r3, r0
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	61bb      	str	r3, [r7, #24]
        break;
 80034ac:	e004      	b.n	80034b8 <UART_SetConfig+0x414>
      default:
        ret = HAL_ERROR;
 80034ae:	2317      	movs	r3, #23
 80034b0:	18fb      	adds	r3, r7, r3
 80034b2:	2201      	movs	r2, #1
 80034b4:	701a      	strb	r2, [r3, #0]
        break;
 80034b6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	2b0f      	cmp	r3, #15
 80034bc:	d908      	bls.n	80034d0 <UART_SetConfig+0x42c>
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	4a0d      	ldr	r2, [pc, #52]	; (80034f8 <UART_SetConfig+0x454>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d804      	bhi.n	80034d0 <UART_SetConfig+0x42c>
    {
      huart->Instance->BRR = usartdiv;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	69ba      	ldr	r2, [r7, #24]
 80034cc:	60da      	str	r2, [r3, #12]
 80034ce:	e003      	b.n	80034d8 <UART_SetConfig+0x434>
    }
    else
    {
      ret = HAL_ERROR;
 80034d0:	2317      	movs	r3, #23
 80034d2:	18fb      	adds	r3, r7, r3
 80034d4:	2201      	movs	r2, #1
 80034d6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80034e4:	2317      	movs	r3, #23
 80034e6:	18fb      	adds	r3, r7, r3
 80034e8:	781b      	ldrb	r3, [r3, #0]
}
 80034ea:	0018      	movs	r0, r3
 80034ec:	46bd      	mov	sp, r7
 80034ee:	b008      	add	sp, #32
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	46c0      	nop			; (mov r8, r8)
 80034f4:	007a1200 	.word	0x007a1200
 80034f8:	0000ffff 	.word	0x0000ffff

080034fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003508:	2201      	movs	r2, #1
 800350a:	4013      	ands	r3, r2
 800350c:	d00b      	beq.n	8003526 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	4a4a      	ldr	r2, [pc, #296]	; (8003640 <UART_AdvFeatureConfig+0x144>)
 8003516:	4013      	ands	r3, r2
 8003518:	0019      	movs	r1, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	430a      	orrs	r2, r1
 8003524:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352a:	2202      	movs	r2, #2
 800352c:	4013      	ands	r3, r2
 800352e:	d00b      	beq.n	8003548 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	4a43      	ldr	r2, [pc, #268]	; (8003644 <UART_AdvFeatureConfig+0x148>)
 8003538:	4013      	ands	r3, r2
 800353a:	0019      	movs	r1, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	430a      	orrs	r2, r1
 8003546:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354c:	2204      	movs	r2, #4
 800354e:	4013      	ands	r3, r2
 8003550:	d00b      	beq.n	800356a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	4a3b      	ldr	r2, [pc, #236]	; (8003648 <UART_AdvFeatureConfig+0x14c>)
 800355a:	4013      	ands	r3, r2
 800355c:	0019      	movs	r1, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	430a      	orrs	r2, r1
 8003568:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356e:	2208      	movs	r2, #8
 8003570:	4013      	ands	r3, r2
 8003572:	d00b      	beq.n	800358c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	4a34      	ldr	r2, [pc, #208]	; (800364c <UART_AdvFeatureConfig+0x150>)
 800357c:	4013      	ands	r3, r2
 800357e:	0019      	movs	r1, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	430a      	orrs	r2, r1
 800358a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003590:	2210      	movs	r2, #16
 8003592:	4013      	ands	r3, r2
 8003594:	d00b      	beq.n	80035ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	4a2c      	ldr	r2, [pc, #176]	; (8003650 <UART_AdvFeatureConfig+0x154>)
 800359e:	4013      	ands	r3, r2
 80035a0:	0019      	movs	r1, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	430a      	orrs	r2, r1
 80035ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b2:	2220      	movs	r2, #32
 80035b4:	4013      	ands	r3, r2
 80035b6:	d00b      	beq.n	80035d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	4a25      	ldr	r2, [pc, #148]	; (8003654 <UART_AdvFeatureConfig+0x158>)
 80035c0:	4013      	ands	r3, r2
 80035c2:	0019      	movs	r1, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	430a      	orrs	r2, r1
 80035ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d4:	2240      	movs	r2, #64	; 0x40
 80035d6:	4013      	ands	r3, r2
 80035d8:	d01d      	beq.n	8003616 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	4a1d      	ldr	r2, [pc, #116]	; (8003658 <UART_AdvFeatureConfig+0x15c>)
 80035e2:	4013      	ands	r3, r2
 80035e4:	0019      	movs	r1, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	430a      	orrs	r2, r1
 80035f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035f6:	2380      	movs	r3, #128	; 0x80
 80035f8:	035b      	lsls	r3, r3, #13
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d10b      	bne.n	8003616 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	4a15      	ldr	r2, [pc, #84]	; (800365c <UART_AdvFeatureConfig+0x160>)
 8003606:	4013      	ands	r3, r2
 8003608:	0019      	movs	r1, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	430a      	orrs	r2, r1
 8003614:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361a:	2280      	movs	r2, #128	; 0x80
 800361c:	4013      	ands	r3, r2
 800361e:	d00b      	beq.n	8003638 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	4a0e      	ldr	r2, [pc, #56]	; (8003660 <UART_AdvFeatureConfig+0x164>)
 8003628:	4013      	ands	r3, r2
 800362a:	0019      	movs	r1, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	430a      	orrs	r2, r1
 8003636:	605a      	str	r2, [r3, #4]
  }
}
 8003638:	46c0      	nop			; (mov r8, r8)
 800363a:	46bd      	mov	sp, r7
 800363c:	b002      	add	sp, #8
 800363e:	bd80      	pop	{r7, pc}
 8003640:	fffdffff 	.word	0xfffdffff
 8003644:	fffeffff 	.word	0xfffeffff
 8003648:	fffbffff 	.word	0xfffbffff
 800364c:	ffff7fff 	.word	0xffff7fff
 8003650:	ffffefff 	.word	0xffffefff
 8003654:	ffffdfff 	.word	0xffffdfff
 8003658:	ffefffff 	.word	0xffefffff
 800365c:	ff9fffff 	.word	0xff9fffff
 8003660:	fff7ffff 	.word	0xfff7ffff

08003664 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b086      	sub	sp, #24
 8003668:	af02      	add	r7, sp, #8
 800366a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003672:	f7fd fded 	bl	8001250 <HAL_GetTick>
 8003676:	0003      	movs	r3, r0
 8003678:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2208      	movs	r2, #8
 8003682:	4013      	ands	r3, r2
 8003684:	2b08      	cmp	r3, #8
 8003686:	d10d      	bne.n	80036a4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	2380      	movs	r3, #128	; 0x80
 800368c:	0399      	lsls	r1, r3, #14
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	4b16      	ldr	r3, [pc, #88]	; (80036ec <UART_CheckIdleState+0x88>)
 8003692:	9300      	str	r3, [sp, #0]
 8003694:	0013      	movs	r3, r2
 8003696:	2200      	movs	r2, #0
 8003698:	f000 f82a 	bl	80036f0 <UART_WaitOnFlagUntilTimeout>
 800369c:	1e03      	subs	r3, r0, #0
 800369e:	d001      	beq.n	80036a4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e01f      	b.n	80036e4 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2204      	movs	r2, #4
 80036ac:	4013      	ands	r3, r2
 80036ae:	2b04      	cmp	r3, #4
 80036b0:	d10d      	bne.n	80036ce <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	2380      	movs	r3, #128	; 0x80
 80036b6:	03d9      	lsls	r1, r3, #15
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	4b0c      	ldr	r3, [pc, #48]	; (80036ec <UART_CheckIdleState+0x88>)
 80036bc:	9300      	str	r3, [sp, #0]
 80036be:	0013      	movs	r3, r2
 80036c0:	2200      	movs	r2, #0
 80036c2:	f000 f815 	bl	80036f0 <UART_WaitOnFlagUntilTimeout>
 80036c6:	1e03      	subs	r3, r0, #0
 80036c8:	d001      	beq.n	80036ce <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e00a      	b.n	80036e4 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2220      	movs	r2, #32
 80036d2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2220      	movs	r2, #32
 80036d8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2270      	movs	r2, #112	; 0x70
 80036de:	2100      	movs	r1, #0
 80036e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	0018      	movs	r0, r3
 80036e6:	46bd      	mov	sp, r7
 80036e8:	b004      	add	sp, #16
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	01ffffff 	.word	0x01ffffff

080036f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	603b      	str	r3, [r7, #0]
 80036fc:	1dfb      	adds	r3, r7, #7
 80036fe:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003700:	e05d      	b.n	80037be <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	3301      	adds	r3, #1
 8003706:	d05a      	beq.n	80037be <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003708:	f7fd fda2 	bl	8001250 <HAL_GetTick>
 800370c:	0002      	movs	r2, r0
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	69ba      	ldr	r2, [r7, #24]
 8003714:	429a      	cmp	r2, r3
 8003716:	d302      	bcc.n	800371e <UART_WaitOnFlagUntilTimeout+0x2e>
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d11b      	bne.n	8003756 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	492f      	ldr	r1, [pc, #188]	; (80037e8 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800372a:	400a      	ands	r2, r1
 800372c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	689a      	ldr	r2, [r3, #8]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2101      	movs	r1, #1
 800373a:	438a      	bics	r2, r1
 800373c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2220      	movs	r2, #32
 8003742:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2220      	movs	r2, #32
 8003748:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2270      	movs	r2, #112	; 0x70
 800374e:	2100      	movs	r1, #0
 8003750:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e043      	b.n	80037de <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2204      	movs	r2, #4
 800375e:	4013      	ands	r3, r2
 8003760:	d02d      	beq.n	80037be <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	69da      	ldr	r2, [r3, #28]
 8003768:	2380      	movs	r3, #128	; 0x80
 800376a:	011b      	lsls	r3, r3, #4
 800376c:	401a      	ands	r2, r3
 800376e:	2380      	movs	r3, #128	; 0x80
 8003770:	011b      	lsls	r3, r3, #4
 8003772:	429a      	cmp	r2, r3
 8003774:	d123      	bne.n	80037be <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2280      	movs	r2, #128	; 0x80
 800377c:	0112      	lsls	r2, r2, #4
 800377e:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4917      	ldr	r1, [pc, #92]	; (80037e8 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800378c:	400a      	ands	r2, r1
 800378e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	689a      	ldr	r2, [r3, #8]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2101      	movs	r1, #1
 800379c:	438a      	bics	r2, r1
 800379e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2220      	movs	r2, #32
 80037a4:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2220      	movs	r2, #32
 80037aa:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2220      	movs	r2, #32
 80037b0:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2270      	movs	r2, #112	; 0x70
 80037b6:	2100      	movs	r1, #0
 80037b8:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e00f      	b.n	80037de <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	69db      	ldr	r3, [r3, #28]
 80037c4:	68ba      	ldr	r2, [r7, #8]
 80037c6:	4013      	ands	r3, r2
 80037c8:	68ba      	ldr	r2, [r7, #8]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	425a      	negs	r2, r3
 80037ce:	4153      	adcs	r3, r2
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	001a      	movs	r2, r3
 80037d4:	1dfb      	adds	r3, r7, #7
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d092      	beq.n	8003702 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	0018      	movs	r0, r3
 80037e0:	46bd      	mov	sp, r7
 80037e2:	b004      	add	sp, #16
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	46c0      	nop			; (mov r8, r8)
 80037e8:	fffffe5f 	.word	0xfffffe5f

080037ec <__errno>:
 80037ec:	4b01      	ldr	r3, [pc, #4]	; (80037f4 <__errno+0x8>)
 80037ee:	6818      	ldr	r0, [r3, #0]
 80037f0:	4770      	bx	lr
 80037f2:	46c0      	nop			; (mov r8, r8)
 80037f4:	20000024 	.word	0x20000024

080037f8 <__libc_init_array>:
 80037f8:	b570      	push	{r4, r5, r6, lr}
 80037fa:	2600      	movs	r6, #0
 80037fc:	4d0c      	ldr	r5, [pc, #48]	; (8003830 <__libc_init_array+0x38>)
 80037fe:	4c0d      	ldr	r4, [pc, #52]	; (8003834 <__libc_init_array+0x3c>)
 8003800:	1b64      	subs	r4, r4, r5
 8003802:	10a4      	asrs	r4, r4, #2
 8003804:	42a6      	cmp	r6, r4
 8003806:	d109      	bne.n	800381c <__libc_init_array+0x24>
 8003808:	2600      	movs	r6, #0
 800380a:	f000 ffad 	bl	8004768 <_init>
 800380e:	4d0a      	ldr	r5, [pc, #40]	; (8003838 <__libc_init_array+0x40>)
 8003810:	4c0a      	ldr	r4, [pc, #40]	; (800383c <__libc_init_array+0x44>)
 8003812:	1b64      	subs	r4, r4, r5
 8003814:	10a4      	asrs	r4, r4, #2
 8003816:	42a6      	cmp	r6, r4
 8003818:	d105      	bne.n	8003826 <__libc_init_array+0x2e>
 800381a:	bd70      	pop	{r4, r5, r6, pc}
 800381c:	00b3      	lsls	r3, r6, #2
 800381e:	58eb      	ldr	r3, [r5, r3]
 8003820:	4798      	blx	r3
 8003822:	3601      	adds	r6, #1
 8003824:	e7ee      	b.n	8003804 <__libc_init_array+0xc>
 8003826:	00b3      	lsls	r3, r6, #2
 8003828:	58eb      	ldr	r3, [r5, r3]
 800382a:	4798      	blx	r3
 800382c:	3601      	adds	r6, #1
 800382e:	e7f2      	b.n	8003816 <__libc_init_array+0x1e>
 8003830:	08004aac 	.word	0x08004aac
 8003834:	08004aac 	.word	0x08004aac
 8003838:	08004aac 	.word	0x08004aac
 800383c:	08004ab0 	.word	0x08004ab0

08003840 <memcpy>:
 8003840:	2300      	movs	r3, #0
 8003842:	b510      	push	{r4, lr}
 8003844:	429a      	cmp	r2, r3
 8003846:	d100      	bne.n	800384a <memcpy+0xa>
 8003848:	bd10      	pop	{r4, pc}
 800384a:	5ccc      	ldrb	r4, [r1, r3]
 800384c:	54c4      	strb	r4, [r0, r3]
 800384e:	3301      	adds	r3, #1
 8003850:	e7f8      	b.n	8003844 <memcpy+0x4>

08003852 <memset>:
 8003852:	0003      	movs	r3, r0
 8003854:	1812      	adds	r2, r2, r0
 8003856:	4293      	cmp	r3, r2
 8003858:	d100      	bne.n	800385c <memset+0xa>
 800385a:	4770      	bx	lr
 800385c:	7019      	strb	r1, [r3, #0]
 800385e:	3301      	adds	r3, #1
 8003860:	e7f9      	b.n	8003856 <memset+0x4>
	...

08003864 <iprintf>:
 8003864:	b40f      	push	{r0, r1, r2, r3}
 8003866:	4b0b      	ldr	r3, [pc, #44]	; (8003894 <iprintf+0x30>)
 8003868:	b513      	push	{r0, r1, r4, lr}
 800386a:	681c      	ldr	r4, [r3, #0]
 800386c:	2c00      	cmp	r4, #0
 800386e:	d005      	beq.n	800387c <iprintf+0x18>
 8003870:	69a3      	ldr	r3, [r4, #24]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d102      	bne.n	800387c <iprintf+0x18>
 8003876:	0020      	movs	r0, r4
 8003878:	f000 fa3c 	bl	8003cf4 <__sinit>
 800387c:	ab05      	add	r3, sp, #20
 800387e:	9a04      	ldr	r2, [sp, #16]
 8003880:	68a1      	ldr	r1, [r4, #8]
 8003882:	0020      	movs	r0, r4
 8003884:	9301      	str	r3, [sp, #4]
 8003886:	f000 fc05 	bl	8004094 <_vfiprintf_r>
 800388a:	bc16      	pop	{r1, r2, r4}
 800388c:	bc08      	pop	{r3}
 800388e:	b004      	add	sp, #16
 8003890:	4718      	bx	r3
 8003892:	46c0      	nop			; (mov r8, r8)
 8003894:	20000024 	.word	0x20000024

08003898 <_puts_r>:
 8003898:	b570      	push	{r4, r5, r6, lr}
 800389a:	0005      	movs	r5, r0
 800389c:	000e      	movs	r6, r1
 800389e:	2800      	cmp	r0, #0
 80038a0:	d004      	beq.n	80038ac <_puts_r+0x14>
 80038a2:	6983      	ldr	r3, [r0, #24]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d101      	bne.n	80038ac <_puts_r+0x14>
 80038a8:	f000 fa24 	bl	8003cf4 <__sinit>
 80038ac:	69ab      	ldr	r3, [r5, #24]
 80038ae:	68ac      	ldr	r4, [r5, #8]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d102      	bne.n	80038ba <_puts_r+0x22>
 80038b4:	0028      	movs	r0, r5
 80038b6:	f000 fa1d 	bl	8003cf4 <__sinit>
 80038ba:	4b24      	ldr	r3, [pc, #144]	; (800394c <_puts_r+0xb4>)
 80038bc:	429c      	cmp	r4, r3
 80038be:	d10f      	bne.n	80038e0 <_puts_r+0x48>
 80038c0:	686c      	ldr	r4, [r5, #4]
 80038c2:	89a3      	ldrh	r3, [r4, #12]
 80038c4:	071b      	lsls	r3, r3, #28
 80038c6:	d502      	bpl.n	80038ce <_puts_r+0x36>
 80038c8:	6923      	ldr	r3, [r4, #16]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d11f      	bne.n	800390e <_puts_r+0x76>
 80038ce:	0021      	movs	r1, r4
 80038d0:	0028      	movs	r0, r5
 80038d2:	f000 f8a1 	bl	8003a18 <__swsetup_r>
 80038d6:	2800      	cmp	r0, #0
 80038d8:	d019      	beq.n	800390e <_puts_r+0x76>
 80038da:	2001      	movs	r0, #1
 80038dc:	4240      	negs	r0, r0
 80038de:	bd70      	pop	{r4, r5, r6, pc}
 80038e0:	4b1b      	ldr	r3, [pc, #108]	; (8003950 <_puts_r+0xb8>)
 80038e2:	429c      	cmp	r4, r3
 80038e4:	d101      	bne.n	80038ea <_puts_r+0x52>
 80038e6:	68ac      	ldr	r4, [r5, #8]
 80038e8:	e7eb      	b.n	80038c2 <_puts_r+0x2a>
 80038ea:	4b1a      	ldr	r3, [pc, #104]	; (8003954 <_puts_r+0xbc>)
 80038ec:	429c      	cmp	r4, r3
 80038ee:	d1e8      	bne.n	80038c2 <_puts_r+0x2a>
 80038f0:	68ec      	ldr	r4, [r5, #12]
 80038f2:	e7e6      	b.n	80038c2 <_puts_r+0x2a>
 80038f4:	3601      	adds	r6, #1
 80038f6:	60a3      	str	r3, [r4, #8]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	da04      	bge.n	8003906 <_puts_r+0x6e>
 80038fc:	69a2      	ldr	r2, [r4, #24]
 80038fe:	429a      	cmp	r2, r3
 8003900:	dc16      	bgt.n	8003930 <_puts_r+0x98>
 8003902:	290a      	cmp	r1, #10
 8003904:	d014      	beq.n	8003930 <_puts_r+0x98>
 8003906:	6823      	ldr	r3, [r4, #0]
 8003908:	1c5a      	adds	r2, r3, #1
 800390a:	6022      	str	r2, [r4, #0]
 800390c:	7019      	strb	r1, [r3, #0]
 800390e:	68a3      	ldr	r3, [r4, #8]
 8003910:	7831      	ldrb	r1, [r6, #0]
 8003912:	3b01      	subs	r3, #1
 8003914:	2900      	cmp	r1, #0
 8003916:	d1ed      	bne.n	80038f4 <_puts_r+0x5c>
 8003918:	60a3      	str	r3, [r4, #8]
 800391a:	2b00      	cmp	r3, #0
 800391c:	da0f      	bge.n	800393e <_puts_r+0xa6>
 800391e:	0022      	movs	r2, r4
 8003920:	310a      	adds	r1, #10
 8003922:	0028      	movs	r0, r5
 8003924:	f000 f822 	bl	800396c <__swbuf_r>
 8003928:	1c43      	adds	r3, r0, #1
 800392a:	d0d6      	beq.n	80038da <_puts_r+0x42>
 800392c:	200a      	movs	r0, #10
 800392e:	e7d6      	b.n	80038de <_puts_r+0x46>
 8003930:	0022      	movs	r2, r4
 8003932:	0028      	movs	r0, r5
 8003934:	f000 f81a 	bl	800396c <__swbuf_r>
 8003938:	1c43      	adds	r3, r0, #1
 800393a:	d1e8      	bne.n	800390e <_puts_r+0x76>
 800393c:	e7cd      	b.n	80038da <_puts_r+0x42>
 800393e:	200a      	movs	r0, #10
 8003940:	6823      	ldr	r3, [r4, #0]
 8003942:	1c5a      	adds	r2, r3, #1
 8003944:	6022      	str	r2, [r4, #0]
 8003946:	7018      	strb	r0, [r3, #0]
 8003948:	e7c9      	b.n	80038de <_puts_r+0x46>
 800394a:	46c0      	nop			; (mov r8, r8)
 800394c:	08004a38 	.word	0x08004a38
 8003950:	08004a58 	.word	0x08004a58
 8003954:	08004a18 	.word	0x08004a18

08003958 <puts>:
 8003958:	b510      	push	{r4, lr}
 800395a:	4b03      	ldr	r3, [pc, #12]	; (8003968 <puts+0x10>)
 800395c:	0001      	movs	r1, r0
 800395e:	6818      	ldr	r0, [r3, #0]
 8003960:	f7ff ff9a 	bl	8003898 <_puts_r>
 8003964:	bd10      	pop	{r4, pc}
 8003966:	46c0      	nop			; (mov r8, r8)
 8003968:	20000024 	.word	0x20000024

0800396c <__swbuf_r>:
 800396c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800396e:	0005      	movs	r5, r0
 8003970:	000e      	movs	r6, r1
 8003972:	0014      	movs	r4, r2
 8003974:	2800      	cmp	r0, #0
 8003976:	d004      	beq.n	8003982 <__swbuf_r+0x16>
 8003978:	6983      	ldr	r3, [r0, #24]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <__swbuf_r+0x16>
 800397e:	f000 f9b9 	bl	8003cf4 <__sinit>
 8003982:	4b22      	ldr	r3, [pc, #136]	; (8003a0c <__swbuf_r+0xa0>)
 8003984:	429c      	cmp	r4, r3
 8003986:	d12d      	bne.n	80039e4 <__swbuf_r+0x78>
 8003988:	686c      	ldr	r4, [r5, #4]
 800398a:	69a3      	ldr	r3, [r4, #24]
 800398c:	60a3      	str	r3, [r4, #8]
 800398e:	89a3      	ldrh	r3, [r4, #12]
 8003990:	071b      	lsls	r3, r3, #28
 8003992:	d531      	bpl.n	80039f8 <__swbuf_r+0x8c>
 8003994:	6923      	ldr	r3, [r4, #16]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d02e      	beq.n	80039f8 <__swbuf_r+0x8c>
 800399a:	6823      	ldr	r3, [r4, #0]
 800399c:	6922      	ldr	r2, [r4, #16]
 800399e:	b2f7      	uxtb	r7, r6
 80039a0:	1a98      	subs	r0, r3, r2
 80039a2:	6963      	ldr	r3, [r4, #20]
 80039a4:	b2f6      	uxtb	r6, r6
 80039a6:	4283      	cmp	r3, r0
 80039a8:	dc05      	bgt.n	80039b6 <__swbuf_r+0x4a>
 80039aa:	0021      	movs	r1, r4
 80039ac:	0028      	movs	r0, r5
 80039ae:	f000 f933 	bl	8003c18 <_fflush_r>
 80039b2:	2800      	cmp	r0, #0
 80039b4:	d126      	bne.n	8003a04 <__swbuf_r+0x98>
 80039b6:	68a3      	ldr	r3, [r4, #8]
 80039b8:	3001      	adds	r0, #1
 80039ba:	3b01      	subs	r3, #1
 80039bc:	60a3      	str	r3, [r4, #8]
 80039be:	6823      	ldr	r3, [r4, #0]
 80039c0:	1c5a      	adds	r2, r3, #1
 80039c2:	6022      	str	r2, [r4, #0]
 80039c4:	701f      	strb	r7, [r3, #0]
 80039c6:	6963      	ldr	r3, [r4, #20]
 80039c8:	4283      	cmp	r3, r0
 80039ca:	d004      	beq.n	80039d6 <__swbuf_r+0x6a>
 80039cc:	89a3      	ldrh	r3, [r4, #12]
 80039ce:	07db      	lsls	r3, r3, #31
 80039d0:	d51a      	bpl.n	8003a08 <__swbuf_r+0x9c>
 80039d2:	2e0a      	cmp	r6, #10
 80039d4:	d118      	bne.n	8003a08 <__swbuf_r+0x9c>
 80039d6:	0021      	movs	r1, r4
 80039d8:	0028      	movs	r0, r5
 80039da:	f000 f91d 	bl	8003c18 <_fflush_r>
 80039de:	2800      	cmp	r0, #0
 80039e0:	d012      	beq.n	8003a08 <__swbuf_r+0x9c>
 80039e2:	e00f      	b.n	8003a04 <__swbuf_r+0x98>
 80039e4:	4b0a      	ldr	r3, [pc, #40]	; (8003a10 <__swbuf_r+0xa4>)
 80039e6:	429c      	cmp	r4, r3
 80039e8:	d101      	bne.n	80039ee <__swbuf_r+0x82>
 80039ea:	68ac      	ldr	r4, [r5, #8]
 80039ec:	e7cd      	b.n	800398a <__swbuf_r+0x1e>
 80039ee:	4b09      	ldr	r3, [pc, #36]	; (8003a14 <__swbuf_r+0xa8>)
 80039f0:	429c      	cmp	r4, r3
 80039f2:	d1ca      	bne.n	800398a <__swbuf_r+0x1e>
 80039f4:	68ec      	ldr	r4, [r5, #12]
 80039f6:	e7c8      	b.n	800398a <__swbuf_r+0x1e>
 80039f8:	0021      	movs	r1, r4
 80039fa:	0028      	movs	r0, r5
 80039fc:	f000 f80c 	bl	8003a18 <__swsetup_r>
 8003a00:	2800      	cmp	r0, #0
 8003a02:	d0ca      	beq.n	800399a <__swbuf_r+0x2e>
 8003a04:	2601      	movs	r6, #1
 8003a06:	4276      	negs	r6, r6
 8003a08:	0030      	movs	r0, r6
 8003a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a0c:	08004a38 	.word	0x08004a38
 8003a10:	08004a58 	.word	0x08004a58
 8003a14:	08004a18 	.word	0x08004a18

08003a18 <__swsetup_r>:
 8003a18:	4b36      	ldr	r3, [pc, #216]	; (8003af4 <__swsetup_r+0xdc>)
 8003a1a:	b570      	push	{r4, r5, r6, lr}
 8003a1c:	681d      	ldr	r5, [r3, #0]
 8003a1e:	0006      	movs	r6, r0
 8003a20:	000c      	movs	r4, r1
 8003a22:	2d00      	cmp	r5, #0
 8003a24:	d005      	beq.n	8003a32 <__swsetup_r+0x1a>
 8003a26:	69ab      	ldr	r3, [r5, #24]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d102      	bne.n	8003a32 <__swsetup_r+0x1a>
 8003a2c:	0028      	movs	r0, r5
 8003a2e:	f000 f961 	bl	8003cf4 <__sinit>
 8003a32:	4b31      	ldr	r3, [pc, #196]	; (8003af8 <__swsetup_r+0xe0>)
 8003a34:	429c      	cmp	r4, r3
 8003a36:	d10f      	bne.n	8003a58 <__swsetup_r+0x40>
 8003a38:	686c      	ldr	r4, [r5, #4]
 8003a3a:	230c      	movs	r3, #12
 8003a3c:	5ee2      	ldrsh	r2, [r4, r3]
 8003a3e:	b293      	uxth	r3, r2
 8003a40:	0719      	lsls	r1, r3, #28
 8003a42:	d42d      	bmi.n	8003aa0 <__swsetup_r+0x88>
 8003a44:	06d9      	lsls	r1, r3, #27
 8003a46:	d411      	bmi.n	8003a6c <__swsetup_r+0x54>
 8003a48:	2309      	movs	r3, #9
 8003a4a:	2001      	movs	r0, #1
 8003a4c:	6033      	str	r3, [r6, #0]
 8003a4e:	3337      	adds	r3, #55	; 0x37
 8003a50:	4313      	orrs	r3, r2
 8003a52:	81a3      	strh	r3, [r4, #12]
 8003a54:	4240      	negs	r0, r0
 8003a56:	bd70      	pop	{r4, r5, r6, pc}
 8003a58:	4b28      	ldr	r3, [pc, #160]	; (8003afc <__swsetup_r+0xe4>)
 8003a5a:	429c      	cmp	r4, r3
 8003a5c:	d101      	bne.n	8003a62 <__swsetup_r+0x4a>
 8003a5e:	68ac      	ldr	r4, [r5, #8]
 8003a60:	e7eb      	b.n	8003a3a <__swsetup_r+0x22>
 8003a62:	4b27      	ldr	r3, [pc, #156]	; (8003b00 <__swsetup_r+0xe8>)
 8003a64:	429c      	cmp	r4, r3
 8003a66:	d1e8      	bne.n	8003a3a <__swsetup_r+0x22>
 8003a68:	68ec      	ldr	r4, [r5, #12]
 8003a6a:	e7e6      	b.n	8003a3a <__swsetup_r+0x22>
 8003a6c:	075b      	lsls	r3, r3, #29
 8003a6e:	d513      	bpl.n	8003a98 <__swsetup_r+0x80>
 8003a70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a72:	2900      	cmp	r1, #0
 8003a74:	d008      	beq.n	8003a88 <__swsetup_r+0x70>
 8003a76:	0023      	movs	r3, r4
 8003a78:	3344      	adds	r3, #68	; 0x44
 8003a7a:	4299      	cmp	r1, r3
 8003a7c:	d002      	beq.n	8003a84 <__swsetup_r+0x6c>
 8003a7e:	0030      	movs	r0, r6
 8003a80:	f000 fa38 	bl	8003ef4 <_free_r>
 8003a84:	2300      	movs	r3, #0
 8003a86:	6363      	str	r3, [r4, #52]	; 0x34
 8003a88:	2224      	movs	r2, #36	; 0x24
 8003a8a:	89a3      	ldrh	r3, [r4, #12]
 8003a8c:	4393      	bics	r3, r2
 8003a8e:	81a3      	strh	r3, [r4, #12]
 8003a90:	2300      	movs	r3, #0
 8003a92:	6063      	str	r3, [r4, #4]
 8003a94:	6923      	ldr	r3, [r4, #16]
 8003a96:	6023      	str	r3, [r4, #0]
 8003a98:	2308      	movs	r3, #8
 8003a9a:	89a2      	ldrh	r2, [r4, #12]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	81a3      	strh	r3, [r4, #12]
 8003aa0:	6923      	ldr	r3, [r4, #16]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10b      	bne.n	8003abe <__swsetup_r+0xa6>
 8003aa6:	21a0      	movs	r1, #160	; 0xa0
 8003aa8:	2280      	movs	r2, #128	; 0x80
 8003aaa:	89a3      	ldrh	r3, [r4, #12]
 8003aac:	0089      	lsls	r1, r1, #2
 8003aae:	0092      	lsls	r2, r2, #2
 8003ab0:	400b      	ands	r3, r1
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d003      	beq.n	8003abe <__swsetup_r+0xa6>
 8003ab6:	0021      	movs	r1, r4
 8003ab8:	0030      	movs	r0, r6
 8003aba:	f000 f9d7 	bl	8003e6c <__smakebuf_r>
 8003abe:	2301      	movs	r3, #1
 8003ac0:	89a2      	ldrh	r2, [r4, #12]
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	d011      	beq.n	8003aea <__swsetup_r+0xd2>
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	60a3      	str	r3, [r4, #8]
 8003aca:	6963      	ldr	r3, [r4, #20]
 8003acc:	425b      	negs	r3, r3
 8003ace:	61a3      	str	r3, [r4, #24]
 8003ad0:	2000      	movs	r0, #0
 8003ad2:	6923      	ldr	r3, [r4, #16]
 8003ad4:	4283      	cmp	r3, r0
 8003ad6:	d1be      	bne.n	8003a56 <__swsetup_r+0x3e>
 8003ad8:	230c      	movs	r3, #12
 8003ada:	5ee2      	ldrsh	r2, [r4, r3]
 8003adc:	0613      	lsls	r3, r2, #24
 8003ade:	d5ba      	bpl.n	8003a56 <__swsetup_r+0x3e>
 8003ae0:	2340      	movs	r3, #64	; 0x40
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	81a3      	strh	r3, [r4, #12]
 8003ae6:	3801      	subs	r0, #1
 8003ae8:	e7b5      	b.n	8003a56 <__swsetup_r+0x3e>
 8003aea:	0792      	lsls	r2, r2, #30
 8003aec:	d400      	bmi.n	8003af0 <__swsetup_r+0xd8>
 8003aee:	6963      	ldr	r3, [r4, #20]
 8003af0:	60a3      	str	r3, [r4, #8]
 8003af2:	e7ed      	b.n	8003ad0 <__swsetup_r+0xb8>
 8003af4:	20000024 	.word	0x20000024
 8003af8:	08004a38 	.word	0x08004a38
 8003afc:	08004a58 	.word	0x08004a58
 8003b00:	08004a18 	.word	0x08004a18

08003b04 <__sflush_r>:
 8003b04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b06:	898a      	ldrh	r2, [r1, #12]
 8003b08:	0005      	movs	r5, r0
 8003b0a:	000c      	movs	r4, r1
 8003b0c:	0713      	lsls	r3, r2, #28
 8003b0e:	d460      	bmi.n	8003bd2 <__sflush_r+0xce>
 8003b10:	684b      	ldr	r3, [r1, #4]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	dc04      	bgt.n	8003b20 <__sflush_r+0x1c>
 8003b16:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	dc01      	bgt.n	8003b20 <__sflush_r+0x1c>
 8003b1c:	2000      	movs	r0, #0
 8003b1e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003b20:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003b22:	2f00      	cmp	r7, #0
 8003b24:	d0fa      	beq.n	8003b1c <__sflush_r+0x18>
 8003b26:	2300      	movs	r3, #0
 8003b28:	682e      	ldr	r6, [r5, #0]
 8003b2a:	602b      	str	r3, [r5, #0]
 8003b2c:	2380      	movs	r3, #128	; 0x80
 8003b2e:	015b      	lsls	r3, r3, #5
 8003b30:	6a21      	ldr	r1, [r4, #32]
 8003b32:	401a      	ands	r2, r3
 8003b34:	d034      	beq.n	8003ba0 <__sflush_r+0x9c>
 8003b36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003b38:	89a3      	ldrh	r3, [r4, #12]
 8003b3a:	075b      	lsls	r3, r3, #29
 8003b3c:	d506      	bpl.n	8003b4c <__sflush_r+0x48>
 8003b3e:	6863      	ldr	r3, [r4, #4]
 8003b40:	1ac0      	subs	r0, r0, r3
 8003b42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d001      	beq.n	8003b4c <__sflush_r+0x48>
 8003b48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b4a:	1ac0      	subs	r0, r0, r3
 8003b4c:	0002      	movs	r2, r0
 8003b4e:	6a21      	ldr	r1, [r4, #32]
 8003b50:	2300      	movs	r3, #0
 8003b52:	0028      	movs	r0, r5
 8003b54:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003b56:	47b8      	blx	r7
 8003b58:	89a1      	ldrh	r1, [r4, #12]
 8003b5a:	1c43      	adds	r3, r0, #1
 8003b5c:	d106      	bne.n	8003b6c <__sflush_r+0x68>
 8003b5e:	682b      	ldr	r3, [r5, #0]
 8003b60:	2b1d      	cmp	r3, #29
 8003b62:	d830      	bhi.n	8003bc6 <__sflush_r+0xc2>
 8003b64:	4a2b      	ldr	r2, [pc, #172]	; (8003c14 <__sflush_r+0x110>)
 8003b66:	40da      	lsrs	r2, r3
 8003b68:	07d3      	lsls	r3, r2, #31
 8003b6a:	d52c      	bpl.n	8003bc6 <__sflush_r+0xc2>
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	6063      	str	r3, [r4, #4]
 8003b70:	6923      	ldr	r3, [r4, #16]
 8003b72:	6023      	str	r3, [r4, #0]
 8003b74:	04cb      	lsls	r3, r1, #19
 8003b76:	d505      	bpl.n	8003b84 <__sflush_r+0x80>
 8003b78:	1c43      	adds	r3, r0, #1
 8003b7a:	d102      	bne.n	8003b82 <__sflush_r+0x7e>
 8003b7c:	682b      	ldr	r3, [r5, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d100      	bne.n	8003b84 <__sflush_r+0x80>
 8003b82:	6560      	str	r0, [r4, #84]	; 0x54
 8003b84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b86:	602e      	str	r6, [r5, #0]
 8003b88:	2900      	cmp	r1, #0
 8003b8a:	d0c7      	beq.n	8003b1c <__sflush_r+0x18>
 8003b8c:	0023      	movs	r3, r4
 8003b8e:	3344      	adds	r3, #68	; 0x44
 8003b90:	4299      	cmp	r1, r3
 8003b92:	d002      	beq.n	8003b9a <__sflush_r+0x96>
 8003b94:	0028      	movs	r0, r5
 8003b96:	f000 f9ad 	bl	8003ef4 <_free_r>
 8003b9a:	2000      	movs	r0, #0
 8003b9c:	6360      	str	r0, [r4, #52]	; 0x34
 8003b9e:	e7be      	b.n	8003b1e <__sflush_r+0x1a>
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	0028      	movs	r0, r5
 8003ba4:	47b8      	blx	r7
 8003ba6:	1c43      	adds	r3, r0, #1
 8003ba8:	d1c6      	bne.n	8003b38 <__sflush_r+0x34>
 8003baa:	682b      	ldr	r3, [r5, #0]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d0c3      	beq.n	8003b38 <__sflush_r+0x34>
 8003bb0:	2b1d      	cmp	r3, #29
 8003bb2:	d001      	beq.n	8003bb8 <__sflush_r+0xb4>
 8003bb4:	2b16      	cmp	r3, #22
 8003bb6:	d101      	bne.n	8003bbc <__sflush_r+0xb8>
 8003bb8:	602e      	str	r6, [r5, #0]
 8003bba:	e7af      	b.n	8003b1c <__sflush_r+0x18>
 8003bbc:	2340      	movs	r3, #64	; 0x40
 8003bbe:	89a2      	ldrh	r2, [r4, #12]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	81a3      	strh	r3, [r4, #12]
 8003bc4:	e7ab      	b.n	8003b1e <__sflush_r+0x1a>
 8003bc6:	2340      	movs	r3, #64	; 0x40
 8003bc8:	430b      	orrs	r3, r1
 8003bca:	2001      	movs	r0, #1
 8003bcc:	81a3      	strh	r3, [r4, #12]
 8003bce:	4240      	negs	r0, r0
 8003bd0:	e7a5      	b.n	8003b1e <__sflush_r+0x1a>
 8003bd2:	690f      	ldr	r7, [r1, #16]
 8003bd4:	2f00      	cmp	r7, #0
 8003bd6:	d0a1      	beq.n	8003b1c <__sflush_r+0x18>
 8003bd8:	680b      	ldr	r3, [r1, #0]
 8003bda:	600f      	str	r7, [r1, #0]
 8003bdc:	1bdb      	subs	r3, r3, r7
 8003bde:	9301      	str	r3, [sp, #4]
 8003be0:	2300      	movs	r3, #0
 8003be2:	0792      	lsls	r2, r2, #30
 8003be4:	d100      	bne.n	8003be8 <__sflush_r+0xe4>
 8003be6:	694b      	ldr	r3, [r1, #20]
 8003be8:	60a3      	str	r3, [r4, #8]
 8003bea:	9b01      	ldr	r3, [sp, #4]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	dc00      	bgt.n	8003bf2 <__sflush_r+0xee>
 8003bf0:	e794      	b.n	8003b1c <__sflush_r+0x18>
 8003bf2:	9b01      	ldr	r3, [sp, #4]
 8003bf4:	003a      	movs	r2, r7
 8003bf6:	6a21      	ldr	r1, [r4, #32]
 8003bf8:	0028      	movs	r0, r5
 8003bfa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003bfc:	47b0      	blx	r6
 8003bfe:	2800      	cmp	r0, #0
 8003c00:	dc03      	bgt.n	8003c0a <__sflush_r+0x106>
 8003c02:	2340      	movs	r3, #64	; 0x40
 8003c04:	89a2      	ldrh	r2, [r4, #12]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	e7df      	b.n	8003bca <__sflush_r+0xc6>
 8003c0a:	9b01      	ldr	r3, [sp, #4]
 8003c0c:	183f      	adds	r7, r7, r0
 8003c0e:	1a1b      	subs	r3, r3, r0
 8003c10:	9301      	str	r3, [sp, #4]
 8003c12:	e7ea      	b.n	8003bea <__sflush_r+0xe6>
 8003c14:	20400001 	.word	0x20400001

08003c18 <_fflush_r>:
 8003c18:	690b      	ldr	r3, [r1, #16]
 8003c1a:	b570      	push	{r4, r5, r6, lr}
 8003c1c:	0005      	movs	r5, r0
 8003c1e:	000c      	movs	r4, r1
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d101      	bne.n	8003c28 <_fflush_r+0x10>
 8003c24:	2000      	movs	r0, #0
 8003c26:	bd70      	pop	{r4, r5, r6, pc}
 8003c28:	2800      	cmp	r0, #0
 8003c2a:	d004      	beq.n	8003c36 <_fflush_r+0x1e>
 8003c2c:	6983      	ldr	r3, [r0, #24]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <_fflush_r+0x1e>
 8003c32:	f000 f85f 	bl	8003cf4 <__sinit>
 8003c36:	4b0b      	ldr	r3, [pc, #44]	; (8003c64 <_fflush_r+0x4c>)
 8003c38:	429c      	cmp	r4, r3
 8003c3a:	d109      	bne.n	8003c50 <_fflush_r+0x38>
 8003c3c:	686c      	ldr	r4, [r5, #4]
 8003c3e:	220c      	movs	r2, #12
 8003c40:	5ea3      	ldrsh	r3, [r4, r2]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d0ee      	beq.n	8003c24 <_fflush_r+0xc>
 8003c46:	0021      	movs	r1, r4
 8003c48:	0028      	movs	r0, r5
 8003c4a:	f7ff ff5b 	bl	8003b04 <__sflush_r>
 8003c4e:	e7ea      	b.n	8003c26 <_fflush_r+0xe>
 8003c50:	4b05      	ldr	r3, [pc, #20]	; (8003c68 <_fflush_r+0x50>)
 8003c52:	429c      	cmp	r4, r3
 8003c54:	d101      	bne.n	8003c5a <_fflush_r+0x42>
 8003c56:	68ac      	ldr	r4, [r5, #8]
 8003c58:	e7f1      	b.n	8003c3e <_fflush_r+0x26>
 8003c5a:	4b04      	ldr	r3, [pc, #16]	; (8003c6c <_fflush_r+0x54>)
 8003c5c:	429c      	cmp	r4, r3
 8003c5e:	d1ee      	bne.n	8003c3e <_fflush_r+0x26>
 8003c60:	68ec      	ldr	r4, [r5, #12]
 8003c62:	e7ec      	b.n	8003c3e <_fflush_r+0x26>
 8003c64:	08004a38 	.word	0x08004a38
 8003c68:	08004a58 	.word	0x08004a58
 8003c6c:	08004a18 	.word	0x08004a18

08003c70 <std>:
 8003c70:	2300      	movs	r3, #0
 8003c72:	b510      	push	{r4, lr}
 8003c74:	0004      	movs	r4, r0
 8003c76:	6003      	str	r3, [r0, #0]
 8003c78:	6043      	str	r3, [r0, #4]
 8003c7a:	6083      	str	r3, [r0, #8]
 8003c7c:	8181      	strh	r1, [r0, #12]
 8003c7e:	6643      	str	r3, [r0, #100]	; 0x64
 8003c80:	81c2      	strh	r2, [r0, #14]
 8003c82:	6103      	str	r3, [r0, #16]
 8003c84:	6143      	str	r3, [r0, #20]
 8003c86:	6183      	str	r3, [r0, #24]
 8003c88:	0019      	movs	r1, r3
 8003c8a:	2208      	movs	r2, #8
 8003c8c:	305c      	adds	r0, #92	; 0x5c
 8003c8e:	f7ff fde0 	bl	8003852 <memset>
 8003c92:	4b05      	ldr	r3, [pc, #20]	; (8003ca8 <std+0x38>)
 8003c94:	6224      	str	r4, [r4, #32]
 8003c96:	6263      	str	r3, [r4, #36]	; 0x24
 8003c98:	4b04      	ldr	r3, [pc, #16]	; (8003cac <std+0x3c>)
 8003c9a:	62a3      	str	r3, [r4, #40]	; 0x28
 8003c9c:	4b04      	ldr	r3, [pc, #16]	; (8003cb0 <std+0x40>)
 8003c9e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003ca0:	4b04      	ldr	r3, [pc, #16]	; (8003cb4 <std+0x44>)
 8003ca2:	6323      	str	r3, [r4, #48]	; 0x30
 8003ca4:	bd10      	pop	{r4, pc}
 8003ca6:	46c0      	nop			; (mov r8, r8)
 8003ca8:	080045d1 	.word	0x080045d1
 8003cac:	080045f9 	.word	0x080045f9
 8003cb0:	08004631 	.word	0x08004631
 8003cb4:	0800465d 	.word	0x0800465d

08003cb8 <_cleanup_r>:
 8003cb8:	b510      	push	{r4, lr}
 8003cba:	4902      	ldr	r1, [pc, #8]	; (8003cc4 <_cleanup_r+0xc>)
 8003cbc:	f000 f88c 	bl	8003dd8 <_fwalk_reent>
 8003cc0:	bd10      	pop	{r4, pc}
 8003cc2:	46c0      	nop			; (mov r8, r8)
 8003cc4:	08003c19 	.word	0x08003c19

08003cc8 <__sfmoreglue>:
 8003cc8:	b570      	push	{r4, r5, r6, lr}
 8003cca:	2568      	movs	r5, #104	; 0x68
 8003ccc:	1e4a      	subs	r2, r1, #1
 8003cce:	4355      	muls	r5, r2
 8003cd0:	000e      	movs	r6, r1
 8003cd2:	0029      	movs	r1, r5
 8003cd4:	3174      	adds	r1, #116	; 0x74
 8003cd6:	f000 f957 	bl	8003f88 <_malloc_r>
 8003cda:	1e04      	subs	r4, r0, #0
 8003cdc:	d008      	beq.n	8003cf0 <__sfmoreglue+0x28>
 8003cde:	2100      	movs	r1, #0
 8003ce0:	002a      	movs	r2, r5
 8003ce2:	6001      	str	r1, [r0, #0]
 8003ce4:	6046      	str	r6, [r0, #4]
 8003ce6:	300c      	adds	r0, #12
 8003ce8:	60a0      	str	r0, [r4, #8]
 8003cea:	3268      	adds	r2, #104	; 0x68
 8003cec:	f7ff fdb1 	bl	8003852 <memset>
 8003cf0:	0020      	movs	r0, r4
 8003cf2:	bd70      	pop	{r4, r5, r6, pc}

08003cf4 <__sinit>:
 8003cf4:	6983      	ldr	r3, [r0, #24]
 8003cf6:	b513      	push	{r0, r1, r4, lr}
 8003cf8:	0004      	movs	r4, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d128      	bne.n	8003d50 <__sinit+0x5c>
 8003cfe:	6483      	str	r3, [r0, #72]	; 0x48
 8003d00:	64c3      	str	r3, [r0, #76]	; 0x4c
 8003d02:	6503      	str	r3, [r0, #80]	; 0x50
 8003d04:	4b13      	ldr	r3, [pc, #76]	; (8003d54 <__sinit+0x60>)
 8003d06:	4a14      	ldr	r2, [pc, #80]	; (8003d58 <__sinit+0x64>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	6282      	str	r2, [r0, #40]	; 0x28
 8003d0c:	9301      	str	r3, [sp, #4]
 8003d0e:	4298      	cmp	r0, r3
 8003d10:	d101      	bne.n	8003d16 <__sinit+0x22>
 8003d12:	2301      	movs	r3, #1
 8003d14:	6183      	str	r3, [r0, #24]
 8003d16:	0020      	movs	r0, r4
 8003d18:	f000 f820 	bl	8003d5c <__sfp>
 8003d1c:	6060      	str	r0, [r4, #4]
 8003d1e:	0020      	movs	r0, r4
 8003d20:	f000 f81c 	bl	8003d5c <__sfp>
 8003d24:	60a0      	str	r0, [r4, #8]
 8003d26:	0020      	movs	r0, r4
 8003d28:	f000 f818 	bl	8003d5c <__sfp>
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	60e0      	str	r0, [r4, #12]
 8003d30:	2104      	movs	r1, #4
 8003d32:	6860      	ldr	r0, [r4, #4]
 8003d34:	f7ff ff9c 	bl	8003c70 <std>
 8003d38:	2201      	movs	r2, #1
 8003d3a:	2109      	movs	r1, #9
 8003d3c:	68a0      	ldr	r0, [r4, #8]
 8003d3e:	f7ff ff97 	bl	8003c70 <std>
 8003d42:	2202      	movs	r2, #2
 8003d44:	2112      	movs	r1, #18
 8003d46:	68e0      	ldr	r0, [r4, #12]
 8003d48:	f7ff ff92 	bl	8003c70 <std>
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	61a3      	str	r3, [r4, #24]
 8003d50:	bd13      	pop	{r0, r1, r4, pc}
 8003d52:	46c0      	nop			; (mov r8, r8)
 8003d54:	08004a14 	.word	0x08004a14
 8003d58:	08003cb9 	.word	0x08003cb9

08003d5c <__sfp>:
 8003d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d5e:	4b1c      	ldr	r3, [pc, #112]	; (8003dd0 <__sfp+0x74>)
 8003d60:	0007      	movs	r7, r0
 8003d62:	681e      	ldr	r6, [r3, #0]
 8003d64:	69b3      	ldr	r3, [r6, #24]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d102      	bne.n	8003d70 <__sfp+0x14>
 8003d6a:	0030      	movs	r0, r6
 8003d6c:	f7ff ffc2 	bl	8003cf4 <__sinit>
 8003d70:	3648      	adds	r6, #72	; 0x48
 8003d72:	68b4      	ldr	r4, [r6, #8]
 8003d74:	6873      	ldr	r3, [r6, #4]
 8003d76:	3b01      	subs	r3, #1
 8003d78:	d504      	bpl.n	8003d84 <__sfp+0x28>
 8003d7a:	6833      	ldr	r3, [r6, #0]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d007      	beq.n	8003d90 <__sfp+0x34>
 8003d80:	6836      	ldr	r6, [r6, #0]
 8003d82:	e7f6      	b.n	8003d72 <__sfp+0x16>
 8003d84:	220c      	movs	r2, #12
 8003d86:	5ea5      	ldrsh	r5, [r4, r2]
 8003d88:	2d00      	cmp	r5, #0
 8003d8a:	d00d      	beq.n	8003da8 <__sfp+0x4c>
 8003d8c:	3468      	adds	r4, #104	; 0x68
 8003d8e:	e7f2      	b.n	8003d76 <__sfp+0x1a>
 8003d90:	2104      	movs	r1, #4
 8003d92:	0038      	movs	r0, r7
 8003d94:	f7ff ff98 	bl	8003cc8 <__sfmoreglue>
 8003d98:	6030      	str	r0, [r6, #0]
 8003d9a:	2800      	cmp	r0, #0
 8003d9c:	d1f0      	bne.n	8003d80 <__sfp+0x24>
 8003d9e:	230c      	movs	r3, #12
 8003da0:	0004      	movs	r4, r0
 8003da2:	603b      	str	r3, [r7, #0]
 8003da4:	0020      	movs	r0, r4
 8003da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003da8:	0020      	movs	r0, r4
 8003daa:	4b0a      	ldr	r3, [pc, #40]	; (8003dd4 <__sfp+0x78>)
 8003dac:	6665      	str	r5, [r4, #100]	; 0x64
 8003dae:	6025      	str	r5, [r4, #0]
 8003db0:	6065      	str	r5, [r4, #4]
 8003db2:	60a5      	str	r5, [r4, #8]
 8003db4:	60e3      	str	r3, [r4, #12]
 8003db6:	6125      	str	r5, [r4, #16]
 8003db8:	6165      	str	r5, [r4, #20]
 8003dba:	61a5      	str	r5, [r4, #24]
 8003dbc:	2208      	movs	r2, #8
 8003dbe:	0029      	movs	r1, r5
 8003dc0:	305c      	adds	r0, #92	; 0x5c
 8003dc2:	f7ff fd46 	bl	8003852 <memset>
 8003dc6:	6365      	str	r5, [r4, #52]	; 0x34
 8003dc8:	63a5      	str	r5, [r4, #56]	; 0x38
 8003dca:	64a5      	str	r5, [r4, #72]	; 0x48
 8003dcc:	64e5      	str	r5, [r4, #76]	; 0x4c
 8003dce:	e7e9      	b.n	8003da4 <__sfp+0x48>
 8003dd0:	08004a14 	.word	0x08004a14
 8003dd4:	ffff0001 	.word	0xffff0001

08003dd8 <_fwalk_reent>:
 8003dd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003dda:	0004      	movs	r4, r0
 8003ddc:	0007      	movs	r7, r0
 8003dde:	2600      	movs	r6, #0
 8003de0:	9101      	str	r1, [sp, #4]
 8003de2:	3448      	adds	r4, #72	; 0x48
 8003de4:	2c00      	cmp	r4, #0
 8003de6:	d101      	bne.n	8003dec <_fwalk_reent+0x14>
 8003de8:	0030      	movs	r0, r6
 8003dea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003dec:	6863      	ldr	r3, [r4, #4]
 8003dee:	68a5      	ldr	r5, [r4, #8]
 8003df0:	9300      	str	r3, [sp, #0]
 8003df2:	9b00      	ldr	r3, [sp, #0]
 8003df4:	3b01      	subs	r3, #1
 8003df6:	9300      	str	r3, [sp, #0]
 8003df8:	d501      	bpl.n	8003dfe <_fwalk_reent+0x26>
 8003dfa:	6824      	ldr	r4, [r4, #0]
 8003dfc:	e7f2      	b.n	8003de4 <_fwalk_reent+0xc>
 8003dfe:	89ab      	ldrh	r3, [r5, #12]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d908      	bls.n	8003e16 <_fwalk_reent+0x3e>
 8003e04:	220e      	movs	r2, #14
 8003e06:	5eab      	ldrsh	r3, [r5, r2]
 8003e08:	3301      	adds	r3, #1
 8003e0a:	d004      	beq.n	8003e16 <_fwalk_reent+0x3e>
 8003e0c:	0029      	movs	r1, r5
 8003e0e:	0038      	movs	r0, r7
 8003e10:	9b01      	ldr	r3, [sp, #4]
 8003e12:	4798      	blx	r3
 8003e14:	4306      	orrs	r6, r0
 8003e16:	3568      	adds	r5, #104	; 0x68
 8003e18:	e7eb      	b.n	8003df2 <_fwalk_reent+0x1a>
	...

08003e1c <__swhatbuf_r>:
 8003e1c:	b570      	push	{r4, r5, r6, lr}
 8003e1e:	000e      	movs	r6, r1
 8003e20:	001d      	movs	r5, r3
 8003e22:	230e      	movs	r3, #14
 8003e24:	5ec9      	ldrsh	r1, [r1, r3]
 8003e26:	b096      	sub	sp, #88	; 0x58
 8003e28:	0014      	movs	r4, r2
 8003e2a:	2900      	cmp	r1, #0
 8003e2c:	da07      	bge.n	8003e3e <__swhatbuf_r+0x22>
 8003e2e:	2300      	movs	r3, #0
 8003e30:	602b      	str	r3, [r5, #0]
 8003e32:	89b3      	ldrh	r3, [r6, #12]
 8003e34:	061b      	lsls	r3, r3, #24
 8003e36:	d411      	bmi.n	8003e5c <__swhatbuf_r+0x40>
 8003e38:	2380      	movs	r3, #128	; 0x80
 8003e3a:	00db      	lsls	r3, r3, #3
 8003e3c:	e00f      	b.n	8003e5e <__swhatbuf_r+0x42>
 8003e3e:	466a      	mov	r2, sp
 8003e40:	f000 fc38 	bl	80046b4 <_fstat_r>
 8003e44:	2800      	cmp	r0, #0
 8003e46:	dbf2      	blt.n	8003e2e <__swhatbuf_r+0x12>
 8003e48:	22f0      	movs	r2, #240	; 0xf0
 8003e4a:	9b01      	ldr	r3, [sp, #4]
 8003e4c:	0212      	lsls	r2, r2, #8
 8003e4e:	4013      	ands	r3, r2
 8003e50:	4a05      	ldr	r2, [pc, #20]	; (8003e68 <__swhatbuf_r+0x4c>)
 8003e52:	189b      	adds	r3, r3, r2
 8003e54:	425a      	negs	r2, r3
 8003e56:	4153      	adcs	r3, r2
 8003e58:	602b      	str	r3, [r5, #0]
 8003e5a:	e7ed      	b.n	8003e38 <__swhatbuf_r+0x1c>
 8003e5c:	2340      	movs	r3, #64	; 0x40
 8003e5e:	2000      	movs	r0, #0
 8003e60:	6023      	str	r3, [r4, #0]
 8003e62:	b016      	add	sp, #88	; 0x58
 8003e64:	bd70      	pop	{r4, r5, r6, pc}
 8003e66:	46c0      	nop			; (mov r8, r8)
 8003e68:	ffffe000 	.word	0xffffe000

08003e6c <__smakebuf_r>:
 8003e6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e6e:	2602      	movs	r6, #2
 8003e70:	898b      	ldrh	r3, [r1, #12]
 8003e72:	0005      	movs	r5, r0
 8003e74:	000c      	movs	r4, r1
 8003e76:	4233      	tst	r3, r6
 8003e78:	d006      	beq.n	8003e88 <__smakebuf_r+0x1c>
 8003e7a:	0023      	movs	r3, r4
 8003e7c:	3347      	adds	r3, #71	; 0x47
 8003e7e:	6023      	str	r3, [r4, #0]
 8003e80:	6123      	str	r3, [r4, #16]
 8003e82:	2301      	movs	r3, #1
 8003e84:	6163      	str	r3, [r4, #20]
 8003e86:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8003e88:	ab01      	add	r3, sp, #4
 8003e8a:	466a      	mov	r2, sp
 8003e8c:	f7ff ffc6 	bl	8003e1c <__swhatbuf_r>
 8003e90:	9900      	ldr	r1, [sp, #0]
 8003e92:	0007      	movs	r7, r0
 8003e94:	0028      	movs	r0, r5
 8003e96:	f000 f877 	bl	8003f88 <_malloc_r>
 8003e9a:	2800      	cmp	r0, #0
 8003e9c:	d108      	bne.n	8003eb0 <__smakebuf_r+0x44>
 8003e9e:	220c      	movs	r2, #12
 8003ea0:	5ea3      	ldrsh	r3, [r4, r2]
 8003ea2:	059a      	lsls	r2, r3, #22
 8003ea4:	d4ef      	bmi.n	8003e86 <__smakebuf_r+0x1a>
 8003ea6:	2203      	movs	r2, #3
 8003ea8:	4393      	bics	r3, r2
 8003eaa:	431e      	orrs	r6, r3
 8003eac:	81a6      	strh	r6, [r4, #12]
 8003eae:	e7e4      	b.n	8003e7a <__smakebuf_r+0xe>
 8003eb0:	4b0f      	ldr	r3, [pc, #60]	; (8003ef0 <__smakebuf_r+0x84>)
 8003eb2:	62ab      	str	r3, [r5, #40]	; 0x28
 8003eb4:	2380      	movs	r3, #128	; 0x80
 8003eb6:	89a2      	ldrh	r2, [r4, #12]
 8003eb8:	6020      	str	r0, [r4, #0]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	81a3      	strh	r3, [r4, #12]
 8003ebe:	9b00      	ldr	r3, [sp, #0]
 8003ec0:	6120      	str	r0, [r4, #16]
 8003ec2:	6163      	str	r3, [r4, #20]
 8003ec4:	9b01      	ldr	r3, [sp, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00d      	beq.n	8003ee6 <__smakebuf_r+0x7a>
 8003eca:	230e      	movs	r3, #14
 8003ecc:	5ee1      	ldrsh	r1, [r4, r3]
 8003ece:	0028      	movs	r0, r5
 8003ed0:	f000 fc02 	bl	80046d8 <_isatty_r>
 8003ed4:	2800      	cmp	r0, #0
 8003ed6:	d006      	beq.n	8003ee6 <__smakebuf_r+0x7a>
 8003ed8:	2203      	movs	r2, #3
 8003eda:	89a3      	ldrh	r3, [r4, #12]
 8003edc:	4393      	bics	r3, r2
 8003ede:	001a      	movs	r2, r3
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	81a3      	strh	r3, [r4, #12]
 8003ee6:	89a0      	ldrh	r0, [r4, #12]
 8003ee8:	4338      	orrs	r0, r7
 8003eea:	81a0      	strh	r0, [r4, #12]
 8003eec:	e7cb      	b.n	8003e86 <__smakebuf_r+0x1a>
 8003eee:	46c0      	nop			; (mov r8, r8)
 8003ef0:	08003cb9 	.word	0x08003cb9

08003ef4 <_free_r>:
 8003ef4:	b570      	push	{r4, r5, r6, lr}
 8003ef6:	0005      	movs	r5, r0
 8003ef8:	2900      	cmp	r1, #0
 8003efa:	d010      	beq.n	8003f1e <_free_r+0x2a>
 8003efc:	1f0c      	subs	r4, r1, #4
 8003efe:	6823      	ldr	r3, [r4, #0]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	da00      	bge.n	8003f06 <_free_r+0x12>
 8003f04:	18e4      	adds	r4, r4, r3
 8003f06:	0028      	movs	r0, r5
 8003f08:	f000 fc17 	bl	800473a <__malloc_lock>
 8003f0c:	4a1d      	ldr	r2, [pc, #116]	; (8003f84 <_free_r+0x90>)
 8003f0e:	6813      	ldr	r3, [r2, #0]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d105      	bne.n	8003f20 <_free_r+0x2c>
 8003f14:	6063      	str	r3, [r4, #4]
 8003f16:	6014      	str	r4, [r2, #0]
 8003f18:	0028      	movs	r0, r5
 8003f1a:	f000 fc0f 	bl	800473c <__malloc_unlock>
 8003f1e:	bd70      	pop	{r4, r5, r6, pc}
 8003f20:	42a3      	cmp	r3, r4
 8003f22:	d909      	bls.n	8003f38 <_free_r+0x44>
 8003f24:	6821      	ldr	r1, [r4, #0]
 8003f26:	1860      	adds	r0, r4, r1
 8003f28:	4283      	cmp	r3, r0
 8003f2a:	d1f3      	bne.n	8003f14 <_free_r+0x20>
 8003f2c:	6818      	ldr	r0, [r3, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	1841      	adds	r1, r0, r1
 8003f32:	6021      	str	r1, [r4, #0]
 8003f34:	e7ee      	b.n	8003f14 <_free_r+0x20>
 8003f36:	0013      	movs	r3, r2
 8003f38:	685a      	ldr	r2, [r3, #4]
 8003f3a:	2a00      	cmp	r2, #0
 8003f3c:	d001      	beq.n	8003f42 <_free_r+0x4e>
 8003f3e:	42a2      	cmp	r2, r4
 8003f40:	d9f9      	bls.n	8003f36 <_free_r+0x42>
 8003f42:	6819      	ldr	r1, [r3, #0]
 8003f44:	1858      	adds	r0, r3, r1
 8003f46:	42a0      	cmp	r0, r4
 8003f48:	d10b      	bne.n	8003f62 <_free_r+0x6e>
 8003f4a:	6820      	ldr	r0, [r4, #0]
 8003f4c:	1809      	adds	r1, r1, r0
 8003f4e:	1858      	adds	r0, r3, r1
 8003f50:	6019      	str	r1, [r3, #0]
 8003f52:	4282      	cmp	r2, r0
 8003f54:	d1e0      	bne.n	8003f18 <_free_r+0x24>
 8003f56:	6810      	ldr	r0, [r2, #0]
 8003f58:	6852      	ldr	r2, [r2, #4]
 8003f5a:	1841      	adds	r1, r0, r1
 8003f5c:	6019      	str	r1, [r3, #0]
 8003f5e:	605a      	str	r2, [r3, #4]
 8003f60:	e7da      	b.n	8003f18 <_free_r+0x24>
 8003f62:	42a0      	cmp	r0, r4
 8003f64:	d902      	bls.n	8003f6c <_free_r+0x78>
 8003f66:	230c      	movs	r3, #12
 8003f68:	602b      	str	r3, [r5, #0]
 8003f6a:	e7d5      	b.n	8003f18 <_free_r+0x24>
 8003f6c:	6821      	ldr	r1, [r4, #0]
 8003f6e:	1860      	adds	r0, r4, r1
 8003f70:	4282      	cmp	r2, r0
 8003f72:	d103      	bne.n	8003f7c <_free_r+0x88>
 8003f74:	6810      	ldr	r0, [r2, #0]
 8003f76:	6852      	ldr	r2, [r2, #4]
 8003f78:	1841      	adds	r1, r0, r1
 8003f7a:	6021      	str	r1, [r4, #0]
 8003f7c:	6062      	str	r2, [r4, #4]
 8003f7e:	605c      	str	r4, [r3, #4]
 8003f80:	e7ca      	b.n	8003f18 <_free_r+0x24>
 8003f82:	46c0      	nop			; (mov r8, r8)
 8003f84:	200000d0 	.word	0x200000d0

08003f88 <_malloc_r>:
 8003f88:	2303      	movs	r3, #3
 8003f8a:	b570      	push	{r4, r5, r6, lr}
 8003f8c:	1ccd      	adds	r5, r1, #3
 8003f8e:	439d      	bics	r5, r3
 8003f90:	3508      	adds	r5, #8
 8003f92:	0006      	movs	r6, r0
 8003f94:	2d0c      	cmp	r5, #12
 8003f96:	d21e      	bcs.n	8003fd6 <_malloc_r+0x4e>
 8003f98:	250c      	movs	r5, #12
 8003f9a:	42a9      	cmp	r1, r5
 8003f9c:	d81d      	bhi.n	8003fda <_malloc_r+0x52>
 8003f9e:	0030      	movs	r0, r6
 8003fa0:	f000 fbcb 	bl	800473a <__malloc_lock>
 8003fa4:	4a25      	ldr	r2, [pc, #148]	; (800403c <_malloc_r+0xb4>)
 8003fa6:	6814      	ldr	r4, [r2, #0]
 8003fa8:	0021      	movs	r1, r4
 8003faa:	2900      	cmp	r1, #0
 8003fac:	d119      	bne.n	8003fe2 <_malloc_r+0x5a>
 8003fae:	4c24      	ldr	r4, [pc, #144]	; (8004040 <_malloc_r+0xb8>)
 8003fb0:	6823      	ldr	r3, [r4, #0]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d103      	bne.n	8003fbe <_malloc_r+0x36>
 8003fb6:	0030      	movs	r0, r6
 8003fb8:	f000 faf8 	bl	80045ac <_sbrk_r>
 8003fbc:	6020      	str	r0, [r4, #0]
 8003fbe:	0029      	movs	r1, r5
 8003fc0:	0030      	movs	r0, r6
 8003fc2:	f000 faf3 	bl	80045ac <_sbrk_r>
 8003fc6:	1c43      	adds	r3, r0, #1
 8003fc8:	d12b      	bne.n	8004022 <_malloc_r+0x9a>
 8003fca:	230c      	movs	r3, #12
 8003fcc:	0030      	movs	r0, r6
 8003fce:	6033      	str	r3, [r6, #0]
 8003fd0:	f000 fbb4 	bl	800473c <__malloc_unlock>
 8003fd4:	e003      	b.n	8003fde <_malloc_r+0x56>
 8003fd6:	2d00      	cmp	r5, #0
 8003fd8:	dadf      	bge.n	8003f9a <_malloc_r+0x12>
 8003fda:	230c      	movs	r3, #12
 8003fdc:	6033      	str	r3, [r6, #0]
 8003fde:	2000      	movs	r0, #0
 8003fe0:	bd70      	pop	{r4, r5, r6, pc}
 8003fe2:	680b      	ldr	r3, [r1, #0]
 8003fe4:	1b5b      	subs	r3, r3, r5
 8003fe6:	d419      	bmi.n	800401c <_malloc_r+0x94>
 8003fe8:	2b0b      	cmp	r3, #11
 8003fea:	d903      	bls.n	8003ff4 <_malloc_r+0x6c>
 8003fec:	600b      	str	r3, [r1, #0]
 8003fee:	18cc      	adds	r4, r1, r3
 8003ff0:	6025      	str	r5, [r4, #0]
 8003ff2:	e003      	b.n	8003ffc <_malloc_r+0x74>
 8003ff4:	684b      	ldr	r3, [r1, #4]
 8003ff6:	428c      	cmp	r4, r1
 8003ff8:	d10d      	bne.n	8004016 <_malloc_r+0x8e>
 8003ffa:	6013      	str	r3, [r2, #0]
 8003ffc:	0030      	movs	r0, r6
 8003ffe:	f000 fb9d 	bl	800473c <__malloc_unlock>
 8004002:	0020      	movs	r0, r4
 8004004:	2207      	movs	r2, #7
 8004006:	300b      	adds	r0, #11
 8004008:	1d23      	adds	r3, r4, #4
 800400a:	4390      	bics	r0, r2
 800400c:	1ac3      	subs	r3, r0, r3
 800400e:	d0e7      	beq.n	8003fe0 <_malloc_r+0x58>
 8004010:	425a      	negs	r2, r3
 8004012:	50e2      	str	r2, [r4, r3]
 8004014:	e7e4      	b.n	8003fe0 <_malloc_r+0x58>
 8004016:	6063      	str	r3, [r4, #4]
 8004018:	000c      	movs	r4, r1
 800401a:	e7ef      	b.n	8003ffc <_malloc_r+0x74>
 800401c:	000c      	movs	r4, r1
 800401e:	6849      	ldr	r1, [r1, #4]
 8004020:	e7c3      	b.n	8003faa <_malloc_r+0x22>
 8004022:	2303      	movs	r3, #3
 8004024:	1cc4      	adds	r4, r0, #3
 8004026:	439c      	bics	r4, r3
 8004028:	42a0      	cmp	r0, r4
 800402a:	d0e1      	beq.n	8003ff0 <_malloc_r+0x68>
 800402c:	1a21      	subs	r1, r4, r0
 800402e:	0030      	movs	r0, r6
 8004030:	f000 fabc 	bl	80045ac <_sbrk_r>
 8004034:	1c43      	adds	r3, r0, #1
 8004036:	d1db      	bne.n	8003ff0 <_malloc_r+0x68>
 8004038:	e7c7      	b.n	8003fca <_malloc_r+0x42>
 800403a:	46c0      	nop			; (mov r8, r8)
 800403c:	200000d0 	.word	0x200000d0
 8004040:	200000d4 	.word	0x200000d4

08004044 <__sfputc_r>:
 8004044:	6893      	ldr	r3, [r2, #8]
 8004046:	b510      	push	{r4, lr}
 8004048:	3b01      	subs	r3, #1
 800404a:	6093      	str	r3, [r2, #8]
 800404c:	2b00      	cmp	r3, #0
 800404e:	da04      	bge.n	800405a <__sfputc_r+0x16>
 8004050:	6994      	ldr	r4, [r2, #24]
 8004052:	42a3      	cmp	r3, r4
 8004054:	db07      	blt.n	8004066 <__sfputc_r+0x22>
 8004056:	290a      	cmp	r1, #10
 8004058:	d005      	beq.n	8004066 <__sfputc_r+0x22>
 800405a:	6813      	ldr	r3, [r2, #0]
 800405c:	1c58      	adds	r0, r3, #1
 800405e:	6010      	str	r0, [r2, #0]
 8004060:	7019      	strb	r1, [r3, #0]
 8004062:	0008      	movs	r0, r1
 8004064:	bd10      	pop	{r4, pc}
 8004066:	f7ff fc81 	bl	800396c <__swbuf_r>
 800406a:	0001      	movs	r1, r0
 800406c:	e7f9      	b.n	8004062 <__sfputc_r+0x1e>

0800406e <__sfputs_r>:
 800406e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004070:	0006      	movs	r6, r0
 8004072:	000f      	movs	r7, r1
 8004074:	0014      	movs	r4, r2
 8004076:	18d5      	adds	r5, r2, r3
 8004078:	42ac      	cmp	r4, r5
 800407a:	d101      	bne.n	8004080 <__sfputs_r+0x12>
 800407c:	2000      	movs	r0, #0
 800407e:	e007      	b.n	8004090 <__sfputs_r+0x22>
 8004080:	7821      	ldrb	r1, [r4, #0]
 8004082:	003a      	movs	r2, r7
 8004084:	0030      	movs	r0, r6
 8004086:	f7ff ffdd 	bl	8004044 <__sfputc_r>
 800408a:	3401      	adds	r4, #1
 800408c:	1c43      	adds	r3, r0, #1
 800408e:	d1f3      	bne.n	8004078 <__sfputs_r+0xa>
 8004090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004094 <_vfiprintf_r>:
 8004094:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004096:	b0a1      	sub	sp, #132	; 0x84
 8004098:	9003      	str	r0, [sp, #12]
 800409a:	000f      	movs	r7, r1
 800409c:	0016      	movs	r6, r2
 800409e:	001d      	movs	r5, r3
 80040a0:	2800      	cmp	r0, #0
 80040a2:	d005      	beq.n	80040b0 <_vfiprintf_r+0x1c>
 80040a4:	6983      	ldr	r3, [r0, #24]
 80040a6:	9305      	str	r3, [sp, #20]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d101      	bne.n	80040b0 <_vfiprintf_r+0x1c>
 80040ac:	f7ff fe22 	bl	8003cf4 <__sinit>
 80040b0:	4b7b      	ldr	r3, [pc, #492]	; (80042a0 <_vfiprintf_r+0x20c>)
 80040b2:	429f      	cmp	r7, r3
 80040b4:	d15c      	bne.n	8004170 <_vfiprintf_r+0xdc>
 80040b6:	9b03      	ldr	r3, [sp, #12]
 80040b8:	685f      	ldr	r7, [r3, #4]
 80040ba:	89bb      	ldrh	r3, [r7, #12]
 80040bc:	071b      	lsls	r3, r3, #28
 80040be:	d563      	bpl.n	8004188 <_vfiprintf_r+0xf4>
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d060      	beq.n	8004188 <_vfiprintf_r+0xf4>
 80040c6:	2300      	movs	r3, #0
 80040c8:	ac08      	add	r4, sp, #32
 80040ca:	6163      	str	r3, [r4, #20]
 80040cc:	3320      	adds	r3, #32
 80040ce:	7663      	strb	r3, [r4, #25]
 80040d0:	3310      	adds	r3, #16
 80040d2:	76a3      	strb	r3, [r4, #26]
 80040d4:	9507      	str	r5, [sp, #28]
 80040d6:	0035      	movs	r5, r6
 80040d8:	782b      	ldrb	r3, [r5, #0]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d001      	beq.n	80040e2 <_vfiprintf_r+0x4e>
 80040de:	2b25      	cmp	r3, #37	; 0x25
 80040e0:	d15c      	bne.n	800419c <_vfiprintf_r+0x108>
 80040e2:	1bab      	subs	r3, r5, r6
 80040e4:	9305      	str	r3, [sp, #20]
 80040e6:	d00c      	beq.n	8004102 <_vfiprintf_r+0x6e>
 80040e8:	0032      	movs	r2, r6
 80040ea:	0039      	movs	r1, r7
 80040ec:	9803      	ldr	r0, [sp, #12]
 80040ee:	f7ff ffbe 	bl	800406e <__sfputs_r>
 80040f2:	1c43      	adds	r3, r0, #1
 80040f4:	d100      	bne.n	80040f8 <_vfiprintf_r+0x64>
 80040f6:	e0c4      	b.n	8004282 <_vfiprintf_r+0x1ee>
 80040f8:	6962      	ldr	r2, [r4, #20]
 80040fa:	9b05      	ldr	r3, [sp, #20]
 80040fc:	4694      	mov	ip, r2
 80040fe:	4463      	add	r3, ip
 8004100:	6163      	str	r3, [r4, #20]
 8004102:	782b      	ldrb	r3, [r5, #0]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d100      	bne.n	800410a <_vfiprintf_r+0x76>
 8004108:	e0bb      	b.n	8004282 <_vfiprintf_r+0x1ee>
 800410a:	2201      	movs	r2, #1
 800410c:	2300      	movs	r3, #0
 800410e:	4252      	negs	r2, r2
 8004110:	6062      	str	r2, [r4, #4]
 8004112:	a904      	add	r1, sp, #16
 8004114:	3254      	adds	r2, #84	; 0x54
 8004116:	1852      	adds	r2, r2, r1
 8004118:	1c6e      	adds	r6, r5, #1
 800411a:	6023      	str	r3, [r4, #0]
 800411c:	60e3      	str	r3, [r4, #12]
 800411e:	60a3      	str	r3, [r4, #8]
 8004120:	7013      	strb	r3, [r2, #0]
 8004122:	65a3      	str	r3, [r4, #88]	; 0x58
 8004124:	7831      	ldrb	r1, [r6, #0]
 8004126:	2205      	movs	r2, #5
 8004128:	485e      	ldr	r0, [pc, #376]	; (80042a4 <_vfiprintf_r+0x210>)
 800412a:	f000 fafb 	bl	8004724 <memchr>
 800412e:	1c75      	adds	r5, r6, #1
 8004130:	2800      	cmp	r0, #0
 8004132:	d135      	bne.n	80041a0 <_vfiprintf_r+0x10c>
 8004134:	6822      	ldr	r2, [r4, #0]
 8004136:	06d3      	lsls	r3, r2, #27
 8004138:	d504      	bpl.n	8004144 <_vfiprintf_r+0xb0>
 800413a:	2353      	movs	r3, #83	; 0x53
 800413c:	a904      	add	r1, sp, #16
 800413e:	185b      	adds	r3, r3, r1
 8004140:	2120      	movs	r1, #32
 8004142:	7019      	strb	r1, [r3, #0]
 8004144:	0713      	lsls	r3, r2, #28
 8004146:	d504      	bpl.n	8004152 <_vfiprintf_r+0xbe>
 8004148:	2353      	movs	r3, #83	; 0x53
 800414a:	a904      	add	r1, sp, #16
 800414c:	185b      	adds	r3, r3, r1
 800414e:	212b      	movs	r1, #43	; 0x2b
 8004150:	7019      	strb	r1, [r3, #0]
 8004152:	7833      	ldrb	r3, [r6, #0]
 8004154:	2b2a      	cmp	r3, #42	; 0x2a
 8004156:	d02c      	beq.n	80041b2 <_vfiprintf_r+0x11e>
 8004158:	0035      	movs	r5, r6
 800415a:	2100      	movs	r1, #0
 800415c:	200a      	movs	r0, #10
 800415e:	68e3      	ldr	r3, [r4, #12]
 8004160:	782a      	ldrb	r2, [r5, #0]
 8004162:	1c6e      	adds	r6, r5, #1
 8004164:	3a30      	subs	r2, #48	; 0x30
 8004166:	2a09      	cmp	r2, #9
 8004168:	d964      	bls.n	8004234 <_vfiprintf_r+0x1a0>
 800416a:	2900      	cmp	r1, #0
 800416c:	d02e      	beq.n	80041cc <_vfiprintf_r+0x138>
 800416e:	e026      	b.n	80041be <_vfiprintf_r+0x12a>
 8004170:	4b4d      	ldr	r3, [pc, #308]	; (80042a8 <_vfiprintf_r+0x214>)
 8004172:	429f      	cmp	r7, r3
 8004174:	d102      	bne.n	800417c <_vfiprintf_r+0xe8>
 8004176:	9b03      	ldr	r3, [sp, #12]
 8004178:	689f      	ldr	r7, [r3, #8]
 800417a:	e79e      	b.n	80040ba <_vfiprintf_r+0x26>
 800417c:	4b4b      	ldr	r3, [pc, #300]	; (80042ac <_vfiprintf_r+0x218>)
 800417e:	429f      	cmp	r7, r3
 8004180:	d19b      	bne.n	80040ba <_vfiprintf_r+0x26>
 8004182:	9b03      	ldr	r3, [sp, #12]
 8004184:	68df      	ldr	r7, [r3, #12]
 8004186:	e798      	b.n	80040ba <_vfiprintf_r+0x26>
 8004188:	0039      	movs	r1, r7
 800418a:	9803      	ldr	r0, [sp, #12]
 800418c:	f7ff fc44 	bl	8003a18 <__swsetup_r>
 8004190:	2800      	cmp	r0, #0
 8004192:	d098      	beq.n	80040c6 <_vfiprintf_r+0x32>
 8004194:	2001      	movs	r0, #1
 8004196:	4240      	negs	r0, r0
 8004198:	b021      	add	sp, #132	; 0x84
 800419a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800419c:	3501      	adds	r5, #1
 800419e:	e79b      	b.n	80040d8 <_vfiprintf_r+0x44>
 80041a0:	4b40      	ldr	r3, [pc, #256]	; (80042a4 <_vfiprintf_r+0x210>)
 80041a2:	6822      	ldr	r2, [r4, #0]
 80041a4:	1ac0      	subs	r0, r0, r3
 80041a6:	2301      	movs	r3, #1
 80041a8:	4083      	lsls	r3, r0
 80041aa:	4313      	orrs	r3, r2
 80041ac:	6023      	str	r3, [r4, #0]
 80041ae:	002e      	movs	r6, r5
 80041b0:	e7b8      	b.n	8004124 <_vfiprintf_r+0x90>
 80041b2:	9b07      	ldr	r3, [sp, #28]
 80041b4:	1d19      	adds	r1, r3, #4
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	9107      	str	r1, [sp, #28]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	db01      	blt.n	80041c2 <_vfiprintf_r+0x12e>
 80041be:	930b      	str	r3, [sp, #44]	; 0x2c
 80041c0:	e004      	b.n	80041cc <_vfiprintf_r+0x138>
 80041c2:	425b      	negs	r3, r3
 80041c4:	60e3      	str	r3, [r4, #12]
 80041c6:	2302      	movs	r3, #2
 80041c8:	4313      	orrs	r3, r2
 80041ca:	6023      	str	r3, [r4, #0]
 80041cc:	782b      	ldrb	r3, [r5, #0]
 80041ce:	2b2e      	cmp	r3, #46	; 0x2e
 80041d0:	d10a      	bne.n	80041e8 <_vfiprintf_r+0x154>
 80041d2:	786b      	ldrb	r3, [r5, #1]
 80041d4:	2b2a      	cmp	r3, #42	; 0x2a
 80041d6:	d135      	bne.n	8004244 <_vfiprintf_r+0x1b0>
 80041d8:	9b07      	ldr	r3, [sp, #28]
 80041da:	3502      	adds	r5, #2
 80041dc:	1d1a      	adds	r2, r3, #4
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	9207      	str	r2, [sp, #28]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	db2b      	blt.n	800423e <_vfiprintf_r+0x1aa>
 80041e6:	9309      	str	r3, [sp, #36]	; 0x24
 80041e8:	4e31      	ldr	r6, [pc, #196]	; (80042b0 <_vfiprintf_r+0x21c>)
 80041ea:	7829      	ldrb	r1, [r5, #0]
 80041ec:	2203      	movs	r2, #3
 80041ee:	0030      	movs	r0, r6
 80041f0:	f000 fa98 	bl	8004724 <memchr>
 80041f4:	2800      	cmp	r0, #0
 80041f6:	d006      	beq.n	8004206 <_vfiprintf_r+0x172>
 80041f8:	2340      	movs	r3, #64	; 0x40
 80041fa:	1b80      	subs	r0, r0, r6
 80041fc:	4083      	lsls	r3, r0
 80041fe:	6822      	ldr	r2, [r4, #0]
 8004200:	3501      	adds	r5, #1
 8004202:	4313      	orrs	r3, r2
 8004204:	6023      	str	r3, [r4, #0]
 8004206:	7829      	ldrb	r1, [r5, #0]
 8004208:	2206      	movs	r2, #6
 800420a:	482a      	ldr	r0, [pc, #168]	; (80042b4 <_vfiprintf_r+0x220>)
 800420c:	1c6e      	adds	r6, r5, #1
 800420e:	7621      	strb	r1, [r4, #24]
 8004210:	f000 fa88 	bl	8004724 <memchr>
 8004214:	2800      	cmp	r0, #0
 8004216:	d03a      	beq.n	800428e <_vfiprintf_r+0x1fa>
 8004218:	4b27      	ldr	r3, [pc, #156]	; (80042b8 <_vfiprintf_r+0x224>)
 800421a:	2b00      	cmp	r3, #0
 800421c:	d125      	bne.n	800426a <_vfiprintf_r+0x1d6>
 800421e:	2207      	movs	r2, #7
 8004220:	9b07      	ldr	r3, [sp, #28]
 8004222:	3307      	adds	r3, #7
 8004224:	4393      	bics	r3, r2
 8004226:	3308      	adds	r3, #8
 8004228:	9307      	str	r3, [sp, #28]
 800422a:	6963      	ldr	r3, [r4, #20]
 800422c:	9a04      	ldr	r2, [sp, #16]
 800422e:	189b      	adds	r3, r3, r2
 8004230:	6163      	str	r3, [r4, #20]
 8004232:	e750      	b.n	80040d6 <_vfiprintf_r+0x42>
 8004234:	4343      	muls	r3, r0
 8004236:	2101      	movs	r1, #1
 8004238:	189b      	adds	r3, r3, r2
 800423a:	0035      	movs	r5, r6
 800423c:	e790      	b.n	8004160 <_vfiprintf_r+0xcc>
 800423e:	2301      	movs	r3, #1
 8004240:	425b      	negs	r3, r3
 8004242:	e7d0      	b.n	80041e6 <_vfiprintf_r+0x152>
 8004244:	2300      	movs	r3, #0
 8004246:	200a      	movs	r0, #10
 8004248:	001a      	movs	r2, r3
 800424a:	3501      	adds	r5, #1
 800424c:	6063      	str	r3, [r4, #4]
 800424e:	7829      	ldrb	r1, [r5, #0]
 8004250:	1c6e      	adds	r6, r5, #1
 8004252:	3930      	subs	r1, #48	; 0x30
 8004254:	2909      	cmp	r1, #9
 8004256:	d903      	bls.n	8004260 <_vfiprintf_r+0x1cc>
 8004258:	2b00      	cmp	r3, #0
 800425a:	d0c5      	beq.n	80041e8 <_vfiprintf_r+0x154>
 800425c:	9209      	str	r2, [sp, #36]	; 0x24
 800425e:	e7c3      	b.n	80041e8 <_vfiprintf_r+0x154>
 8004260:	4342      	muls	r2, r0
 8004262:	2301      	movs	r3, #1
 8004264:	1852      	adds	r2, r2, r1
 8004266:	0035      	movs	r5, r6
 8004268:	e7f1      	b.n	800424e <_vfiprintf_r+0x1ba>
 800426a:	ab07      	add	r3, sp, #28
 800426c:	9300      	str	r3, [sp, #0]
 800426e:	003a      	movs	r2, r7
 8004270:	4b12      	ldr	r3, [pc, #72]	; (80042bc <_vfiprintf_r+0x228>)
 8004272:	0021      	movs	r1, r4
 8004274:	9803      	ldr	r0, [sp, #12]
 8004276:	e000      	b.n	800427a <_vfiprintf_r+0x1e6>
 8004278:	bf00      	nop
 800427a:	9004      	str	r0, [sp, #16]
 800427c:	9b04      	ldr	r3, [sp, #16]
 800427e:	3301      	adds	r3, #1
 8004280:	d1d3      	bne.n	800422a <_vfiprintf_r+0x196>
 8004282:	89bb      	ldrh	r3, [r7, #12]
 8004284:	065b      	lsls	r3, r3, #25
 8004286:	d500      	bpl.n	800428a <_vfiprintf_r+0x1f6>
 8004288:	e784      	b.n	8004194 <_vfiprintf_r+0x100>
 800428a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800428c:	e784      	b.n	8004198 <_vfiprintf_r+0x104>
 800428e:	ab07      	add	r3, sp, #28
 8004290:	9300      	str	r3, [sp, #0]
 8004292:	003a      	movs	r2, r7
 8004294:	4b09      	ldr	r3, [pc, #36]	; (80042bc <_vfiprintf_r+0x228>)
 8004296:	0021      	movs	r1, r4
 8004298:	9803      	ldr	r0, [sp, #12]
 800429a:	f000 f87f 	bl	800439c <_printf_i>
 800429e:	e7ec      	b.n	800427a <_vfiprintf_r+0x1e6>
 80042a0:	08004a38 	.word	0x08004a38
 80042a4:	08004a78 	.word	0x08004a78
 80042a8:	08004a58 	.word	0x08004a58
 80042ac:	08004a18 	.word	0x08004a18
 80042b0:	08004a7e 	.word	0x08004a7e
 80042b4:	08004a82 	.word	0x08004a82
 80042b8:	00000000 	.word	0x00000000
 80042bc:	0800406f 	.word	0x0800406f

080042c0 <_printf_common>:
 80042c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042c2:	0015      	movs	r5, r2
 80042c4:	9301      	str	r3, [sp, #4]
 80042c6:	688a      	ldr	r2, [r1, #8]
 80042c8:	690b      	ldr	r3, [r1, #16]
 80042ca:	9000      	str	r0, [sp, #0]
 80042cc:	000c      	movs	r4, r1
 80042ce:	4293      	cmp	r3, r2
 80042d0:	da00      	bge.n	80042d4 <_printf_common+0x14>
 80042d2:	0013      	movs	r3, r2
 80042d4:	0022      	movs	r2, r4
 80042d6:	602b      	str	r3, [r5, #0]
 80042d8:	3243      	adds	r2, #67	; 0x43
 80042da:	7812      	ldrb	r2, [r2, #0]
 80042dc:	2a00      	cmp	r2, #0
 80042de:	d001      	beq.n	80042e4 <_printf_common+0x24>
 80042e0:	3301      	adds	r3, #1
 80042e2:	602b      	str	r3, [r5, #0]
 80042e4:	6823      	ldr	r3, [r4, #0]
 80042e6:	069b      	lsls	r3, r3, #26
 80042e8:	d502      	bpl.n	80042f0 <_printf_common+0x30>
 80042ea:	682b      	ldr	r3, [r5, #0]
 80042ec:	3302      	adds	r3, #2
 80042ee:	602b      	str	r3, [r5, #0]
 80042f0:	2706      	movs	r7, #6
 80042f2:	6823      	ldr	r3, [r4, #0]
 80042f4:	401f      	ands	r7, r3
 80042f6:	d027      	beq.n	8004348 <_printf_common+0x88>
 80042f8:	0023      	movs	r3, r4
 80042fa:	3343      	adds	r3, #67	; 0x43
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	1e5a      	subs	r2, r3, #1
 8004300:	4193      	sbcs	r3, r2
 8004302:	6822      	ldr	r2, [r4, #0]
 8004304:	0692      	lsls	r2, r2, #26
 8004306:	d430      	bmi.n	800436a <_printf_common+0xaa>
 8004308:	0022      	movs	r2, r4
 800430a:	9901      	ldr	r1, [sp, #4]
 800430c:	3243      	adds	r2, #67	; 0x43
 800430e:	9800      	ldr	r0, [sp, #0]
 8004310:	9e08      	ldr	r6, [sp, #32]
 8004312:	47b0      	blx	r6
 8004314:	1c43      	adds	r3, r0, #1
 8004316:	d025      	beq.n	8004364 <_printf_common+0xa4>
 8004318:	2306      	movs	r3, #6
 800431a:	6820      	ldr	r0, [r4, #0]
 800431c:	682a      	ldr	r2, [r5, #0]
 800431e:	68e1      	ldr	r1, [r4, #12]
 8004320:	4003      	ands	r3, r0
 8004322:	2500      	movs	r5, #0
 8004324:	2b04      	cmp	r3, #4
 8004326:	d103      	bne.n	8004330 <_printf_common+0x70>
 8004328:	1a8d      	subs	r5, r1, r2
 800432a:	43eb      	mvns	r3, r5
 800432c:	17db      	asrs	r3, r3, #31
 800432e:	401d      	ands	r5, r3
 8004330:	68a3      	ldr	r3, [r4, #8]
 8004332:	6922      	ldr	r2, [r4, #16]
 8004334:	4293      	cmp	r3, r2
 8004336:	dd01      	ble.n	800433c <_printf_common+0x7c>
 8004338:	1a9b      	subs	r3, r3, r2
 800433a:	18ed      	adds	r5, r5, r3
 800433c:	2700      	movs	r7, #0
 800433e:	42bd      	cmp	r5, r7
 8004340:	d120      	bne.n	8004384 <_printf_common+0xc4>
 8004342:	2000      	movs	r0, #0
 8004344:	e010      	b.n	8004368 <_printf_common+0xa8>
 8004346:	3701      	adds	r7, #1
 8004348:	68e3      	ldr	r3, [r4, #12]
 800434a:	682a      	ldr	r2, [r5, #0]
 800434c:	1a9b      	subs	r3, r3, r2
 800434e:	42bb      	cmp	r3, r7
 8004350:	ddd2      	ble.n	80042f8 <_printf_common+0x38>
 8004352:	0022      	movs	r2, r4
 8004354:	2301      	movs	r3, #1
 8004356:	3219      	adds	r2, #25
 8004358:	9901      	ldr	r1, [sp, #4]
 800435a:	9800      	ldr	r0, [sp, #0]
 800435c:	9e08      	ldr	r6, [sp, #32]
 800435e:	47b0      	blx	r6
 8004360:	1c43      	adds	r3, r0, #1
 8004362:	d1f0      	bne.n	8004346 <_printf_common+0x86>
 8004364:	2001      	movs	r0, #1
 8004366:	4240      	negs	r0, r0
 8004368:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800436a:	2030      	movs	r0, #48	; 0x30
 800436c:	18e1      	adds	r1, r4, r3
 800436e:	3143      	adds	r1, #67	; 0x43
 8004370:	7008      	strb	r0, [r1, #0]
 8004372:	0021      	movs	r1, r4
 8004374:	1c5a      	adds	r2, r3, #1
 8004376:	3145      	adds	r1, #69	; 0x45
 8004378:	7809      	ldrb	r1, [r1, #0]
 800437a:	18a2      	adds	r2, r4, r2
 800437c:	3243      	adds	r2, #67	; 0x43
 800437e:	3302      	adds	r3, #2
 8004380:	7011      	strb	r1, [r2, #0]
 8004382:	e7c1      	b.n	8004308 <_printf_common+0x48>
 8004384:	0022      	movs	r2, r4
 8004386:	2301      	movs	r3, #1
 8004388:	321a      	adds	r2, #26
 800438a:	9901      	ldr	r1, [sp, #4]
 800438c:	9800      	ldr	r0, [sp, #0]
 800438e:	9e08      	ldr	r6, [sp, #32]
 8004390:	47b0      	blx	r6
 8004392:	1c43      	adds	r3, r0, #1
 8004394:	d0e6      	beq.n	8004364 <_printf_common+0xa4>
 8004396:	3701      	adds	r7, #1
 8004398:	e7d1      	b.n	800433e <_printf_common+0x7e>
	...

0800439c <_printf_i>:
 800439c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800439e:	b089      	sub	sp, #36	; 0x24
 80043a0:	9204      	str	r2, [sp, #16]
 80043a2:	000a      	movs	r2, r1
 80043a4:	3243      	adds	r2, #67	; 0x43
 80043a6:	9305      	str	r3, [sp, #20]
 80043a8:	9003      	str	r0, [sp, #12]
 80043aa:	9202      	str	r2, [sp, #8]
 80043ac:	7e0a      	ldrb	r2, [r1, #24]
 80043ae:	000c      	movs	r4, r1
 80043b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80043b2:	2a6e      	cmp	r2, #110	; 0x6e
 80043b4:	d100      	bne.n	80043b8 <_printf_i+0x1c>
 80043b6:	e086      	b.n	80044c6 <_printf_i+0x12a>
 80043b8:	d81f      	bhi.n	80043fa <_printf_i+0x5e>
 80043ba:	2a63      	cmp	r2, #99	; 0x63
 80043bc:	d033      	beq.n	8004426 <_printf_i+0x8a>
 80043be:	d808      	bhi.n	80043d2 <_printf_i+0x36>
 80043c0:	2a00      	cmp	r2, #0
 80043c2:	d100      	bne.n	80043c6 <_printf_i+0x2a>
 80043c4:	e08c      	b.n	80044e0 <_printf_i+0x144>
 80043c6:	2a58      	cmp	r2, #88	; 0x58
 80043c8:	d04d      	beq.n	8004466 <_printf_i+0xca>
 80043ca:	0025      	movs	r5, r4
 80043cc:	3542      	adds	r5, #66	; 0x42
 80043ce:	702a      	strb	r2, [r5, #0]
 80043d0:	e030      	b.n	8004434 <_printf_i+0x98>
 80043d2:	2a64      	cmp	r2, #100	; 0x64
 80043d4:	d001      	beq.n	80043da <_printf_i+0x3e>
 80043d6:	2a69      	cmp	r2, #105	; 0x69
 80043d8:	d1f7      	bne.n	80043ca <_printf_i+0x2e>
 80043da:	6819      	ldr	r1, [r3, #0]
 80043dc:	6825      	ldr	r5, [r4, #0]
 80043de:	1d0a      	adds	r2, r1, #4
 80043e0:	0628      	lsls	r0, r5, #24
 80043e2:	d529      	bpl.n	8004438 <_printf_i+0x9c>
 80043e4:	6808      	ldr	r0, [r1, #0]
 80043e6:	601a      	str	r2, [r3, #0]
 80043e8:	2800      	cmp	r0, #0
 80043ea:	da03      	bge.n	80043f4 <_printf_i+0x58>
 80043ec:	232d      	movs	r3, #45	; 0x2d
 80043ee:	9a02      	ldr	r2, [sp, #8]
 80043f0:	4240      	negs	r0, r0
 80043f2:	7013      	strb	r3, [r2, #0]
 80043f4:	4e6b      	ldr	r6, [pc, #428]	; (80045a4 <_printf_i+0x208>)
 80043f6:	270a      	movs	r7, #10
 80043f8:	e04f      	b.n	800449a <_printf_i+0xfe>
 80043fa:	2a73      	cmp	r2, #115	; 0x73
 80043fc:	d074      	beq.n	80044e8 <_printf_i+0x14c>
 80043fe:	d808      	bhi.n	8004412 <_printf_i+0x76>
 8004400:	2a6f      	cmp	r2, #111	; 0x6f
 8004402:	d01f      	beq.n	8004444 <_printf_i+0xa8>
 8004404:	2a70      	cmp	r2, #112	; 0x70
 8004406:	d1e0      	bne.n	80043ca <_printf_i+0x2e>
 8004408:	2220      	movs	r2, #32
 800440a:	6809      	ldr	r1, [r1, #0]
 800440c:	430a      	orrs	r2, r1
 800440e:	6022      	str	r2, [r4, #0]
 8004410:	e003      	b.n	800441a <_printf_i+0x7e>
 8004412:	2a75      	cmp	r2, #117	; 0x75
 8004414:	d016      	beq.n	8004444 <_printf_i+0xa8>
 8004416:	2a78      	cmp	r2, #120	; 0x78
 8004418:	d1d7      	bne.n	80043ca <_printf_i+0x2e>
 800441a:	0022      	movs	r2, r4
 800441c:	2178      	movs	r1, #120	; 0x78
 800441e:	3245      	adds	r2, #69	; 0x45
 8004420:	7011      	strb	r1, [r2, #0]
 8004422:	4e61      	ldr	r6, [pc, #388]	; (80045a8 <_printf_i+0x20c>)
 8004424:	e022      	b.n	800446c <_printf_i+0xd0>
 8004426:	0025      	movs	r5, r4
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	3542      	adds	r5, #66	; 0x42
 800442c:	1d11      	adds	r1, r2, #4
 800442e:	6019      	str	r1, [r3, #0]
 8004430:	6813      	ldr	r3, [r2, #0]
 8004432:	702b      	strb	r3, [r5, #0]
 8004434:	2301      	movs	r3, #1
 8004436:	e065      	b.n	8004504 <_printf_i+0x168>
 8004438:	6808      	ldr	r0, [r1, #0]
 800443a:	601a      	str	r2, [r3, #0]
 800443c:	0669      	lsls	r1, r5, #25
 800443e:	d5d3      	bpl.n	80043e8 <_printf_i+0x4c>
 8004440:	b200      	sxth	r0, r0
 8004442:	e7d1      	b.n	80043e8 <_printf_i+0x4c>
 8004444:	6819      	ldr	r1, [r3, #0]
 8004446:	6825      	ldr	r5, [r4, #0]
 8004448:	1d08      	adds	r0, r1, #4
 800444a:	6018      	str	r0, [r3, #0]
 800444c:	6808      	ldr	r0, [r1, #0]
 800444e:	062e      	lsls	r6, r5, #24
 8004450:	d505      	bpl.n	800445e <_printf_i+0xc2>
 8004452:	4e54      	ldr	r6, [pc, #336]	; (80045a4 <_printf_i+0x208>)
 8004454:	2708      	movs	r7, #8
 8004456:	2a6f      	cmp	r2, #111	; 0x6f
 8004458:	d01b      	beq.n	8004492 <_printf_i+0xf6>
 800445a:	270a      	movs	r7, #10
 800445c:	e019      	b.n	8004492 <_printf_i+0xf6>
 800445e:	066d      	lsls	r5, r5, #25
 8004460:	d5f7      	bpl.n	8004452 <_printf_i+0xb6>
 8004462:	b280      	uxth	r0, r0
 8004464:	e7f5      	b.n	8004452 <_printf_i+0xb6>
 8004466:	3145      	adds	r1, #69	; 0x45
 8004468:	4e4e      	ldr	r6, [pc, #312]	; (80045a4 <_printf_i+0x208>)
 800446a:	700a      	strb	r2, [r1, #0]
 800446c:	6818      	ldr	r0, [r3, #0]
 800446e:	6822      	ldr	r2, [r4, #0]
 8004470:	1d01      	adds	r1, r0, #4
 8004472:	6800      	ldr	r0, [r0, #0]
 8004474:	6019      	str	r1, [r3, #0]
 8004476:	0615      	lsls	r5, r2, #24
 8004478:	d521      	bpl.n	80044be <_printf_i+0x122>
 800447a:	07d3      	lsls	r3, r2, #31
 800447c:	d502      	bpl.n	8004484 <_printf_i+0xe8>
 800447e:	2320      	movs	r3, #32
 8004480:	431a      	orrs	r2, r3
 8004482:	6022      	str	r2, [r4, #0]
 8004484:	2710      	movs	r7, #16
 8004486:	2800      	cmp	r0, #0
 8004488:	d103      	bne.n	8004492 <_printf_i+0xf6>
 800448a:	2320      	movs	r3, #32
 800448c:	6822      	ldr	r2, [r4, #0]
 800448e:	439a      	bics	r2, r3
 8004490:	6022      	str	r2, [r4, #0]
 8004492:	0023      	movs	r3, r4
 8004494:	2200      	movs	r2, #0
 8004496:	3343      	adds	r3, #67	; 0x43
 8004498:	701a      	strb	r2, [r3, #0]
 800449a:	6863      	ldr	r3, [r4, #4]
 800449c:	60a3      	str	r3, [r4, #8]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	db58      	blt.n	8004554 <_printf_i+0x1b8>
 80044a2:	2204      	movs	r2, #4
 80044a4:	6821      	ldr	r1, [r4, #0]
 80044a6:	4391      	bics	r1, r2
 80044a8:	6021      	str	r1, [r4, #0]
 80044aa:	2800      	cmp	r0, #0
 80044ac:	d154      	bne.n	8004558 <_printf_i+0x1bc>
 80044ae:	9d02      	ldr	r5, [sp, #8]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d05a      	beq.n	800456a <_printf_i+0x1ce>
 80044b4:	0025      	movs	r5, r4
 80044b6:	7833      	ldrb	r3, [r6, #0]
 80044b8:	3542      	adds	r5, #66	; 0x42
 80044ba:	702b      	strb	r3, [r5, #0]
 80044bc:	e055      	b.n	800456a <_printf_i+0x1ce>
 80044be:	0655      	lsls	r5, r2, #25
 80044c0:	d5db      	bpl.n	800447a <_printf_i+0xde>
 80044c2:	b280      	uxth	r0, r0
 80044c4:	e7d9      	b.n	800447a <_printf_i+0xde>
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	680d      	ldr	r5, [r1, #0]
 80044ca:	1d10      	adds	r0, r2, #4
 80044cc:	6949      	ldr	r1, [r1, #20]
 80044ce:	6018      	str	r0, [r3, #0]
 80044d0:	6813      	ldr	r3, [r2, #0]
 80044d2:	062e      	lsls	r6, r5, #24
 80044d4:	d501      	bpl.n	80044da <_printf_i+0x13e>
 80044d6:	6019      	str	r1, [r3, #0]
 80044d8:	e002      	b.n	80044e0 <_printf_i+0x144>
 80044da:	066d      	lsls	r5, r5, #25
 80044dc:	d5fb      	bpl.n	80044d6 <_printf_i+0x13a>
 80044de:	8019      	strh	r1, [r3, #0]
 80044e0:	2300      	movs	r3, #0
 80044e2:	9d02      	ldr	r5, [sp, #8]
 80044e4:	6123      	str	r3, [r4, #16]
 80044e6:	e04f      	b.n	8004588 <_printf_i+0x1ec>
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	1d11      	adds	r1, r2, #4
 80044ec:	6019      	str	r1, [r3, #0]
 80044ee:	6815      	ldr	r5, [r2, #0]
 80044f0:	2100      	movs	r1, #0
 80044f2:	6862      	ldr	r2, [r4, #4]
 80044f4:	0028      	movs	r0, r5
 80044f6:	f000 f915 	bl	8004724 <memchr>
 80044fa:	2800      	cmp	r0, #0
 80044fc:	d001      	beq.n	8004502 <_printf_i+0x166>
 80044fe:	1b40      	subs	r0, r0, r5
 8004500:	6060      	str	r0, [r4, #4]
 8004502:	6863      	ldr	r3, [r4, #4]
 8004504:	6123      	str	r3, [r4, #16]
 8004506:	2300      	movs	r3, #0
 8004508:	9a02      	ldr	r2, [sp, #8]
 800450a:	7013      	strb	r3, [r2, #0]
 800450c:	e03c      	b.n	8004588 <_printf_i+0x1ec>
 800450e:	6923      	ldr	r3, [r4, #16]
 8004510:	002a      	movs	r2, r5
 8004512:	9904      	ldr	r1, [sp, #16]
 8004514:	9803      	ldr	r0, [sp, #12]
 8004516:	9d05      	ldr	r5, [sp, #20]
 8004518:	47a8      	blx	r5
 800451a:	1c43      	adds	r3, r0, #1
 800451c:	d03e      	beq.n	800459c <_printf_i+0x200>
 800451e:	6823      	ldr	r3, [r4, #0]
 8004520:	079b      	lsls	r3, r3, #30
 8004522:	d415      	bmi.n	8004550 <_printf_i+0x1b4>
 8004524:	9b07      	ldr	r3, [sp, #28]
 8004526:	68e0      	ldr	r0, [r4, #12]
 8004528:	4298      	cmp	r0, r3
 800452a:	da39      	bge.n	80045a0 <_printf_i+0x204>
 800452c:	0018      	movs	r0, r3
 800452e:	e037      	b.n	80045a0 <_printf_i+0x204>
 8004530:	0022      	movs	r2, r4
 8004532:	2301      	movs	r3, #1
 8004534:	3219      	adds	r2, #25
 8004536:	9904      	ldr	r1, [sp, #16]
 8004538:	9803      	ldr	r0, [sp, #12]
 800453a:	9e05      	ldr	r6, [sp, #20]
 800453c:	47b0      	blx	r6
 800453e:	1c43      	adds	r3, r0, #1
 8004540:	d02c      	beq.n	800459c <_printf_i+0x200>
 8004542:	3501      	adds	r5, #1
 8004544:	68e3      	ldr	r3, [r4, #12]
 8004546:	9a07      	ldr	r2, [sp, #28]
 8004548:	1a9b      	subs	r3, r3, r2
 800454a:	42ab      	cmp	r3, r5
 800454c:	dcf0      	bgt.n	8004530 <_printf_i+0x194>
 800454e:	e7e9      	b.n	8004524 <_printf_i+0x188>
 8004550:	2500      	movs	r5, #0
 8004552:	e7f7      	b.n	8004544 <_printf_i+0x1a8>
 8004554:	2800      	cmp	r0, #0
 8004556:	d0ad      	beq.n	80044b4 <_printf_i+0x118>
 8004558:	9d02      	ldr	r5, [sp, #8]
 800455a:	0039      	movs	r1, r7
 800455c:	f7fb fe58 	bl	8000210 <__aeabi_uidivmod>
 8004560:	5c73      	ldrb	r3, [r6, r1]
 8004562:	3d01      	subs	r5, #1
 8004564:	702b      	strb	r3, [r5, #0]
 8004566:	2800      	cmp	r0, #0
 8004568:	d1f7      	bne.n	800455a <_printf_i+0x1be>
 800456a:	2f08      	cmp	r7, #8
 800456c:	d109      	bne.n	8004582 <_printf_i+0x1e6>
 800456e:	6823      	ldr	r3, [r4, #0]
 8004570:	07db      	lsls	r3, r3, #31
 8004572:	d506      	bpl.n	8004582 <_printf_i+0x1e6>
 8004574:	6863      	ldr	r3, [r4, #4]
 8004576:	6922      	ldr	r2, [r4, #16]
 8004578:	4293      	cmp	r3, r2
 800457a:	dc02      	bgt.n	8004582 <_printf_i+0x1e6>
 800457c:	2330      	movs	r3, #48	; 0x30
 800457e:	3d01      	subs	r5, #1
 8004580:	702b      	strb	r3, [r5, #0]
 8004582:	9b02      	ldr	r3, [sp, #8]
 8004584:	1b5b      	subs	r3, r3, r5
 8004586:	6123      	str	r3, [r4, #16]
 8004588:	9b05      	ldr	r3, [sp, #20]
 800458a:	aa07      	add	r2, sp, #28
 800458c:	9300      	str	r3, [sp, #0]
 800458e:	0021      	movs	r1, r4
 8004590:	9b04      	ldr	r3, [sp, #16]
 8004592:	9803      	ldr	r0, [sp, #12]
 8004594:	f7ff fe94 	bl	80042c0 <_printf_common>
 8004598:	1c43      	adds	r3, r0, #1
 800459a:	d1b8      	bne.n	800450e <_printf_i+0x172>
 800459c:	2001      	movs	r0, #1
 800459e:	4240      	negs	r0, r0
 80045a0:	b009      	add	sp, #36	; 0x24
 80045a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045a4:	08004a89 	.word	0x08004a89
 80045a8:	08004a9a 	.word	0x08004a9a

080045ac <_sbrk_r>:
 80045ac:	2300      	movs	r3, #0
 80045ae:	b570      	push	{r4, r5, r6, lr}
 80045b0:	4c06      	ldr	r4, [pc, #24]	; (80045cc <_sbrk_r+0x20>)
 80045b2:	0005      	movs	r5, r0
 80045b4:	0008      	movs	r0, r1
 80045b6:	6023      	str	r3, [r4, #0]
 80045b8:	f7fc fac0 	bl	8000b3c <_sbrk>
 80045bc:	1c43      	adds	r3, r0, #1
 80045be:	d103      	bne.n	80045c8 <_sbrk_r+0x1c>
 80045c0:	6823      	ldr	r3, [r4, #0]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d000      	beq.n	80045c8 <_sbrk_r+0x1c>
 80045c6:	602b      	str	r3, [r5, #0]
 80045c8:	bd70      	pop	{r4, r5, r6, pc}
 80045ca:	46c0      	nop			; (mov r8, r8)
 80045cc:	200001e8 	.word	0x200001e8

080045d0 <__sread>:
 80045d0:	b570      	push	{r4, r5, r6, lr}
 80045d2:	000c      	movs	r4, r1
 80045d4:	250e      	movs	r5, #14
 80045d6:	5f49      	ldrsh	r1, [r1, r5]
 80045d8:	f000 f8b2 	bl	8004740 <_read_r>
 80045dc:	2800      	cmp	r0, #0
 80045de:	db03      	blt.n	80045e8 <__sread+0x18>
 80045e0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80045e2:	181b      	adds	r3, r3, r0
 80045e4:	6563      	str	r3, [r4, #84]	; 0x54
 80045e6:	bd70      	pop	{r4, r5, r6, pc}
 80045e8:	89a3      	ldrh	r3, [r4, #12]
 80045ea:	4a02      	ldr	r2, [pc, #8]	; (80045f4 <__sread+0x24>)
 80045ec:	4013      	ands	r3, r2
 80045ee:	81a3      	strh	r3, [r4, #12]
 80045f0:	e7f9      	b.n	80045e6 <__sread+0x16>
 80045f2:	46c0      	nop			; (mov r8, r8)
 80045f4:	ffffefff 	.word	0xffffefff

080045f8 <__swrite>:
 80045f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045fa:	001f      	movs	r7, r3
 80045fc:	898b      	ldrh	r3, [r1, #12]
 80045fe:	0005      	movs	r5, r0
 8004600:	000c      	movs	r4, r1
 8004602:	0016      	movs	r6, r2
 8004604:	05db      	lsls	r3, r3, #23
 8004606:	d505      	bpl.n	8004614 <__swrite+0x1c>
 8004608:	230e      	movs	r3, #14
 800460a:	5ec9      	ldrsh	r1, [r1, r3]
 800460c:	2200      	movs	r2, #0
 800460e:	2302      	movs	r3, #2
 8004610:	f000 f874 	bl	80046fc <_lseek_r>
 8004614:	89a3      	ldrh	r3, [r4, #12]
 8004616:	4a05      	ldr	r2, [pc, #20]	; (800462c <__swrite+0x34>)
 8004618:	0028      	movs	r0, r5
 800461a:	4013      	ands	r3, r2
 800461c:	81a3      	strh	r3, [r4, #12]
 800461e:	0032      	movs	r2, r6
 8004620:	230e      	movs	r3, #14
 8004622:	5ee1      	ldrsh	r1, [r4, r3]
 8004624:	003b      	movs	r3, r7
 8004626:	f000 f81f 	bl	8004668 <_write_r>
 800462a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800462c:	ffffefff 	.word	0xffffefff

08004630 <__sseek>:
 8004630:	b570      	push	{r4, r5, r6, lr}
 8004632:	000c      	movs	r4, r1
 8004634:	250e      	movs	r5, #14
 8004636:	5f49      	ldrsh	r1, [r1, r5]
 8004638:	f000 f860 	bl	80046fc <_lseek_r>
 800463c:	89a3      	ldrh	r3, [r4, #12]
 800463e:	1c42      	adds	r2, r0, #1
 8004640:	d103      	bne.n	800464a <__sseek+0x1a>
 8004642:	4a05      	ldr	r2, [pc, #20]	; (8004658 <__sseek+0x28>)
 8004644:	4013      	ands	r3, r2
 8004646:	81a3      	strh	r3, [r4, #12]
 8004648:	bd70      	pop	{r4, r5, r6, pc}
 800464a:	2280      	movs	r2, #128	; 0x80
 800464c:	0152      	lsls	r2, r2, #5
 800464e:	4313      	orrs	r3, r2
 8004650:	81a3      	strh	r3, [r4, #12]
 8004652:	6560      	str	r0, [r4, #84]	; 0x54
 8004654:	e7f8      	b.n	8004648 <__sseek+0x18>
 8004656:	46c0      	nop			; (mov r8, r8)
 8004658:	ffffefff 	.word	0xffffefff

0800465c <__sclose>:
 800465c:	b510      	push	{r4, lr}
 800465e:	230e      	movs	r3, #14
 8004660:	5ec9      	ldrsh	r1, [r1, r3]
 8004662:	f000 f815 	bl	8004690 <_close_r>
 8004666:	bd10      	pop	{r4, pc}

08004668 <_write_r>:
 8004668:	b570      	push	{r4, r5, r6, lr}
 800466a:	0005      	movs	r5, r0
 800466c:	0008      	movs	r0, r1
 800466e:	0011      	movs	r1, r2
 8004670:	2200      	movs	r2, #0
 8004672:	4c06      	ldr	r4, [pc, #24]	; (800468c <_write_r+0x24>)
 8004674:	6022      	str	r2, [r4, #0]
 8004676:	001a      	movs	r2, r3
 8004678:	f7fc f878 	bl	800076c <_write>
 800467c:	1c43      	adds	r3, r0, #1
 800467e:	d103      	bne.n	8004688 <_write_r+0x20>
 8004680:	6823      	ldr	r3, [r4, #0]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d000      	beq.n	8004688 <_write_r+0x20>
 8004686:	602b      	str	r3, [r5, #0]
 8004688:	bd70      	pop	{r4, r5, r6, pc}
 800468a:	46c0      	nop			; (mov r8, r8)
 800468c:	200001e8 	.word	0x200001e8

08004690 <_close_r>:
 8004690:	2300      	movs	r3, #0
 8004692:	b570      	push	{r4, r5, r6, lr}
 8004694:	4c06      	ldr	r4, [pc, #24]	; (80046b0 <_close_r+0x20>)
 8004696:	0005      	movs	r5, r0
 8004698:	0008      	movs	r0, r1
 800469a:	6023      	str	r3, [r4, #0]
 800469c:	f7fc fa22 	bl	8000ae4 <_close>
 80046a0:	1c43      	adds	r3, r0, #1
 80046a2:	d103      	bne.n	80046ac <_close_r+0x1c>
 80046a4:	6823      	ldr	r3, [r4, #0]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d000      	beq.n	80046ac <_close_r+0x1c>
 80046aa:	602b      	str	r3, [r5, #0]
 80046ac:	bd70      	pop	{r4, r5, r6, pc}
 80046ae:	46c0      	nop			; (mov r8, r8)
 80046b0:	200001e8 	.word	0x200001e8

080046b4 <_fstat_r>:
 80046b4:	2300      	movs	r3, #0
 80046b6:	b570      	push	{r4, r5, r6, lr}
 80046b8:	4c06      	ldr	r4, [pc, #24]	; (80046d4 <_fstat_r+0x20>)
 80046ba:	0005      	movs	r5, r0
 80046bc:	0008      	movs	r0, r1
 80046be:	0011      	movs	r1, r2
 80046c0:	6023      	str	r3, [r4, #0]
 80046c2:	f7fc fa19 	bl	8000af8 <_fstat>
 80046c6:	1c43      	adds	r3, r0, #1
 80046c8:	d103      	bne.n	80046d2 <_fstat_r+0x1e>
 80046ca:	6823      	ldr	r3, [r4, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d000      	beq.n	80046d2 <_fstat_r+0x1e>
 80046d0:	602b      	str	r3, [r5, #0]
 80046d2:	bd70      	pop	{r4, r5, r6, pc}
 80046d4:	200001e8 	.word	0x200001e8

080046d8 <_isatty_r>:
 80046d8:	2300      	movs	r3, #0
 80046da:	b570      	push	{r4, r5, r6, lr}
 80046dc:	4c06      	ldr	r4, [pc, #24]	; (80046f8 <_isatty_r+0x20>)
 80046de:	0005      	movs	r5, r0
 80046e0:	0008      	movs	r0, r1
 80046e2:	6023      	str	r3, [r4, #0]
 80046e4:	f7fc fa16 	bl	8000b14 <_isatty>
 80046e8:	1c43      	adds	r3, r0, #1
 80046ea:	d103      	bne.n	80046f4 <_isatty_r+0x1c>
 80046ec:	6823      	ldr	r3, [r4, #0]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d000      	beq.n	80046f4 <_isatty_r+0x1c>
 80046f2:	602b      	str	r3, [r5, #0]
 80046f4:	bd70      	pop	{r4, r5, r6, pc}
 80046f6:	46c0      	nop			; (mov r8, r8)
 80046f8:	200001e8 	.word	0x200001e8

080046fc <_lseek_r>:
 80046fc:	b570      	push	{r4, r5, r6, lr}
 80046fe:	0005      	movs	r5, r0
 8004700:	0008      	movs	r0, r1
 8004702:	0011      	movs	r1, r2
 8004704:	2200      	movs	r2, #0
 8004706:	4c06      	ldr	r4, [pc, #24]	; (8004720 <_lseek_r+0x24>)
 8004708:	6022      	str	r2, [r4, #0]
 800470a:	001a      	movs	r2, r3
 800470c:	f7fc fa0b 	bl	8000b26 <_lseek>
 8004710:	1c43      	adds	r3, r0, #1
 8004712:	d103      	bne.n	800471c <_lseek_r+0x20>
 8004714:	6823      	ldr	r3, [r4, #0]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d000      	beq.n	800471c <_lseek_r+0x20>
 800471a:	602b      	str	r3, [r5, #0]
 800471c:	bd70      	pop	{r4, r5, r6, pc}
 800471e:	46c0      	nop			; (mov r8, r8)
 8004720:	200001e8 	.word	0x200001e8

08004724 <memchr>:
 8004724:	b2c9      	uxtb	r1, r1
 8004726:	1882      	adds	r2, r0, r2
 8004728:	4290      	cmp	r0, r2
 800472a:	d101      	bne.n	8004730 <memchr+0xc>
 800472c:	2000      	movs	r0, #0
 800472e:	4770      	bx	lr
 8004730:	7803      	ldrb	r3, [r0, #0]
 8004732:	428b      	cmp	r3, r1
 8004734:	d0fb      	beq.n	800472e <memchr+0xa>
 8004736:	3001      	adds	r0, #1
 8004738:	e7f6      	b.n	8004728 <memchr+0x4>

0800473a <__malloc_lock>:
 800473a:	4770      	bx	lr

0800473c <__malloc_unlock>:
 800473c:	4770      	bx	lr
	...

08004740 <_read_r>:
 8004740:	b570      	push	{r4, r5, r6, lr}
 8004742:	0005      	movs	r5, r0
 8004744:	0008      	movs	r0, r1
 8004746:	0011      	movs	r1, r2
 8004748:	2200      	movs	r2, #0
 800474a:	4c06      	ldr	r4, [pc, #24]	; (8004764 <_read_r+0x24>)
 800474c:	6022      	str	r2, [r4, #0]
 800474e:	001a      	movs	r2, r3
 8004750:	f7fc f9ab 	bl	8000aaa <_read>
 8004754:	1c43      	adds	r3, r0, #1
 8004756:	d103      	bne.n	8004760 <_read_r+0x20>
 8004758:	6823      	ldr	r3, [r4, #0]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d000      	beq.n	8004760 <_read_r+0x20>
 800475e:	602b      	str	r3, [r5, #0]
 8004760:	bd70      	pop	{r4, r5, r6, pc}
 8004762:	46c0      	nop			; (mov r8, r8)
 8004764:	200001e8 	.word	0x200001e8

08004768 <_init>:
 8004768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800476a:	46c0      	nop			; (mov r8, r8)
 800476c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800476e:	bc08      	pop	{r3}
 8004770:	469e      	mov	lr, r3
 8004772:	4770      	bx	lr

08004774 <_fini>:
 8004774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004776:	46c0      	nop			; (mov r8, r8)
 8004778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800477a:	bc08      	pop	{r3}
 800477c:	469e      	mov	lr, r3
 800477e:	4770      	bx	lr
